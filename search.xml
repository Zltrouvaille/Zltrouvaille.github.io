<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156.html"/>
      <url>/posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>we</title>
      <link href="/posts/1c7f6819.html"/>
      <url>/posts/1c7f6819.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue高级</title>
      <link href="/posts/ecf3c99d.html"/>
      <url>/posts/ecf3c99d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><p>   ├── node_modules<br>   ├── public<br>   │   ├── favicon.ico: 页签图标<br>   │   └── index.html: 主页面<br>   ├── src<br>   │   ├── assets: 存放静态资源<br>   │   │   └── logo.png<br>   │   │── component: 存放组件<br>   │   │   └── HelloWorld.vue<br>   │   │── App.vue: 汇总所有组件<br>   │   │── main.js: 入口文件<br>   ├── .gitignore: git版本管制忽略的配置<br>   ├── babel.config.js: babel的配置文件<br>   ├── package.json: 应用包配置文件<br>   ├── README.md: 应用描述文件<br>   ├── package-lock.json：包版本控制文件</p><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props配置项"><a href="#props配置项" class="headerlink" title="props配置项"></a>props配置项</h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line"> <span class="attr">name</span>:&#123;</span><br><span class="line"> <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line"> <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"> <span class="attr">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol></li></ol><h2 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin(混入)"></a>mixin(混入)</h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p> 第一步定义混合：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 第二步使用混入：</p><p>  全局混入：<code>Vue.mixin(xxx)</code><br>  局部混入：<code>mixins:[&#39;xxx&#39;]</code></p></li></ol><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><ol><li><p>组件化编码流程：</p><p>  (1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>  (2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>  ​      1).一个组件在用：放在组件自身即可。</p><p>  ​      2). 一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</p><p>  (3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>  (1).父组件 ==&gt; 子组件 通信</p><p>  (2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code></p><pre><code>       该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</code></pre></li><li><p><code>xxxxxStorage.getItem(&#39;person&#39;);</code></p><p>   ​    该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem(&#39;key&#39;);</code></p><p>   ​    该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code>xxxxxStorage.clear()</code></p><p>   ​    该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="组件的自定义事件"><a href="#组件的自定义事件" class="headerlink" title="组件的自定义事件"></a>组件的自定义事件</h2><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>    </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h2 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   ......</span><br><span class="line">   <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">   &#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑<span style="color:red">当前组件所用到的</span>事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><ol><li><p>一种组件间通信的方式，适用于<span style="color:red">任意组件间通信</span>。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的<span style="color:red">回调留在A组件自身。</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去<span style="color:red">取消订阅。</span></p></li></ol></li></ol><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" style="width:60%"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">   &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>  在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">  <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>  编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">   <span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">               &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">      &lt;Category&gt;</span><br><span class="line">         &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">               &lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">         &lt;/template&gt;</span><br><span class="line">      &lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Category&gt;</span><br><span class="line">         &lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">            &lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">            &lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">         &lt;/template&gt;</span><br><span class="line">      &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      </span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>​     在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2-何时使用？"><a href="#2-何时使用？" class="headerlink" title="2.何时使用？"></a>2.何时使用？</h3><p>​     多个组件需要共享数据时</p><h3 id="3-搭建vuex环境"><a href="#3-搭建vuex环境" class="headerlink" title="3.搭建vuex环境"></a>3.搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">   <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">   store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-基本使用"><a href="#4-基本使用" class="headerlink" title="4.基本使用"></a>4.基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line">   <span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">      context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line">   <span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">      state.<span class="property">sum</span> += value</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5-getters的使用"><a href="#5-getters的使用" class="headerlink" title="5.getters的使用"></a>5.getters的使用</h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">   <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   ......</span><br><span class="line">   getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6-四个map方法的使用"><a href="#6-四个map方法的使用" class="headerlink" title="6.四个map方法的使用"></a>6.四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7-模块化-命名空间"><a href="#7-模块化-命名空间" class="headerlink" title="7.模块化+命名空间"></a>7.模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2></li><li><p>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</p></li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">   <span class="attr">routes</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-几个注意点"><a href="#2-几个注意点" class="headerlink" title="2.几个注意点"></a>2.几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3-多级路由（多级路由）"><a href="#3-多级路由（多级路由）" class="headerlink" title="3.多级路由（多级路由）"></a>3.多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">   &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">      <span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">         &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">         &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-路由的query参数"><a href="#4-路由的query参数" class="headerlink" title="4.路由的query参数"></a>4.路由的query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">            </span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">   :to=&quot;&#123;</span><br><span class="line">      path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">      query:&#123;</span><br><span class="line">         id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-命名路由"><a href="#5-命名路由" class="headerlink" title="5.命名路由"></a>5.命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line">   <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line">         <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                      <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line">               <span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">               <span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">            &#125;</span><br><span class="line">         ]</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">   :to=&quot;&#123;</span><br><span class="line">      name:&#x27;hello&#x27;,</span><br><span class="line">      query:&#123;</span><br><span class="line">         id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6-路由的params参数"><a href="#6-路由的params参数" class="headerlink" title="6.路由的params参数"></a>6.路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">   <span class="attr">children</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">         <span class="attr">children</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">               <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">               <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">            &#125;</span><br><span class="line">         ]</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line">            </span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">   :to=&quot;&#123;</span><br><span class="line">      name:&#x27;xiangqing&#x27;,</span><br><span class="line">      params:&#123;</span><br><span class="line">         id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-路由的props配置"><a href="#7-路由的props配置" class="headerlink" title="7.路由的props配置"></a>7.路由的props配置</h3><p>  作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">   <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">   <span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line">   <span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line">   <span class="comment">// props:true</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">   <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">         <span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">         <span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-lt-router-link-gt-的replace属性"><a href="#8-lt-router-link-gt-的replace属性" class="headerlink" title="8.&lt;router-link&gt;的replace属性"></a>8.<code>&lt;router-link&gt;</code>的replace属性</h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9-编程式路由导航"><a href="#9-编程式路由导航" class="headerlink" title="9.编程式路由导航"></a>9.编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">         <span class="attr">id</span>:xxx,</span><br><span class="line">         <span class="attr">title</span>:xxx</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line">   <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">      <span class="attr">params</span>:&#123;</span><br><span class="line">         <span class="attr">id</span>:xxx,</span><br><span class="line">         <span class="attr">title</span>:xxx</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10-缓存路由组件"><a href="#10-缓存路由组件" class="headerlink" title="10.缓存路由组件"></a>10.缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-两个新的生命周期钩子"><a href="#11-两个新的生命周期钩子" class="headerlink" title="11.两个新的生命周期钩子"></a>11.两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12-路由守卫"><a href="#12-路由守卫" class="headerlink" title="12.路由守卫"></a>12.路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">   <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line">         <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">         <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">   <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">   <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">         <span class="title function_">next</span>()</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">         <span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13-路由器的两种工作模式"><a href="#13-路由器的两种工作模式" class="headerlink" title="13.路由器的两种工作模式"></a>13.路由器的两种工作模式</h3><ol><li><p>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</p></li><li><p>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</p></li><li><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><h1 id="Vue3快速上手"><a href="#Vue3快速上手" class="headerlink" title="Vue3快速上手"></a>Vue3快速上手</h1><p><img src="/posts/ecf3c99d/93624428-53932780-f9ae-11ea-8d16-af949e16a09f-16802286763865.png" style="width:200px"></p><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li>新的内置组件<ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" style="width:500px;height:280px;float:left"><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" style="width:480px;height:280px"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的setup"><a href="#1-拉开序幕的setup" class="headerlink" title="1.拉开序幕的setup"></a>1.拉开序幕的setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理: </p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><div style="border:1px solid black;width:380px;float:left;margin-right:20px;"><strong>vue2.x的生命周期</strong><img src="https://cn.vuejs.org/images/lifecycle.png" alt="lifecycle_2" style="zoom:33%;width:1200px"></div><div style="border:1px solid black;width:510px;height:985px;float:left"><strong>vue3.0的生命周期</strong><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="lifecycle_2" style="zoom:33%;width:2500px"></div><p>1</p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Demo&#x27;,</span><br><span class="line">setup()&#123;</span><br><span class="line">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">//自定义一个myRef</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer</span><br><span class="line">//通过customRef去实现自定义</span><br><span class="line">return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer = setTimeout(()=&gt;&#123;</span><br><span class="line">value = newValue</span><br><span class="line">trigger() //告诉Vue去更新界面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">return &#123;</span><br><span class="line">keyword</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><p><img src="/posts/ecf3c99d/components_provide-16802286763879.png" style="width:300px"></p><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><div style="width:600px;height:370px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" style="width:600px;float:left"></div><div style="width:300px;height:370px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" style="zoom:50%;width:560px;left"> </div><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><div style="width:500px;height:340px;overflow:hidden;float:left">    <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image" style="height:360px"></div><div style="width:430px;height:340px;overflow:hidden;float:left">    <img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image" style="height:360px"></div><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><p>| 2.x 全局 API（<code>Vue</code>） | 3.x 实例 API (<code>app</code>)                        |<br>| ————————————- | —————————————————————- |<br>| Vue.config.xxxx           | app.config.xxxx                             |<br>| Vue.config.productionTip  | <strong style="color:#DD5145">移除</strong> |<br>| Vue.component             | app.component                               |<br>| Vue.directive             | app.directive                               |<br>| Vue.mixin                 | app.mixin                                   |<br>| Vue.use                   | app.use                                     |<br>| Vue.prototype             | app.config.globalProperties                 |</p></li></ul></li></ul><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>……</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/posts/6f2612a2.html"/>
      <url>/posts/6f2612a2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h2><p><strong>今日目标：</strong></p><blockquote><ul><li>掌握基于SpringBoot框架的程序开发步骤</li><li>熟练使用SpringBoot配置信息修改服务器配置</li><li>基于SpringBoot的完成SSM整合项目开发</li></ul></blockquote><h2 id="1，SpringBoot简介"><a href="#1，SpringBoot简介" class="headerlink" title="1，SpringBoot简介"></a>1，SpringBoot简介</h2><p><code>SpringBoot</code> 是由 <code>Pivotal</code> 团队提供的全新框架，其设计目的是用来==简化== <code>Spring</code> 应用的==初始搭建==以及==开发过程==。</p><p>使用了 <code>Spring</code> 框架后已经简化了我们的开发。而 <code>SpringBoot</code> 又是对 <code>Spring</code> 开发进行简化的，可想而知 <code>SpringBoot</code> 使用的简单及广泛性。既然 <code>SpringBoot</code> 是用来简化 <code>Spring</code> 开发的，那我们就先回顾一下，以 <code>SpringMVC</code> 开发为例：</p><ol><li><strong>创建工程，并在 <code>pom.xml</code> 配置文件中配置所依赖的坐标</strong></li></ol><p><img src="/posts/6f2612a2/image-20210911132335452.png" alt="image-20210911132335452" style="zoom:50%;"></p><ol><li><p><strong>编写 <code>web3.0</code> 的配置类</strong></p><p>作为 <code>web</code> 程序，<code>web3.0</code> 的配置类不能缺少，而这个配置类还是比较麻烦的，代码如下</p></li></ol><p><img src="/posts/6f2612a2/image-20210911133112602.png" alt="image-20210911133112602" style="zoom:50%;"></p><ol><li><strong>编写 <code>SpringMVC</code> 的配置类</strong></li></ol><p><img src="/posts/6f2612a2/image-20210911133219847.png" alt="image-20210911133219847" style="zoom:50%;"></p><p>​    做到这只是将工程的架子搭起来。要想被外界访问，最起码还需要提供一个 <code>Controller</code> 类，在该类中提供一个方法。</p><ol><li><strong>编写 <code>Controller</code> 类</strong></li></ol><p><img src="/posts/6f2612a2/image-20210911133532151.png" alt="image-20210911133532151" style="zoom:50%;"></p><p>从上面的 <code>SpringMVC</code> 程序开发可以看到，前三步都是在搭建环境，而且这三步基本都是固定的。<code>SpringBoot</code> 就是对这三步进行简化了。接下来我们通过一个入门案例来体现 <code>SpingBoot</code> 简化 <code>Spring</code> 开发。</p><h3 id="1-1-SpringBoot快速入门"><a href="#1-1-SpringBoot快速入门" class="headerlink" title="1.1  SpringBoot快速入门"></a>1.1  SpringBoot快速入门</h3><h4 id="1-1-1-开发步骤"><a href="#1-1-1-开发步骤" class="headerlink" title="1.1.1  开发步骤"></a>1.1.1  开发步骤</h4><p><code>SpringBoot</code> 开发起来特别简单，分为如下几步：</p><ul><li>创建新模块，选择Spring初始化，并配置模块相关基础信息</li><li>选择当前模块需要使用的技术集</li><li>开发控制器类</li><li>运行自动生成的Application类</li></ul><p>知道了 <code>SpringBoot</code> 的开发步骤后，接下来我们进行具体的操作</p><h5 id="1-1-1-1-创建新模块"><a href="#1-1-1-1-创建新模块" class="headerlink" title="1.1.1.1  创建新模块"></a>1.1.1.1  创建新模块</h5><ul><li>点击 <code>+</code> 选择 <code>New Module</code> 创建新模块</li></ul><p><img src="/posts/6f2612a2/image-20210911155135008.png" alt="image-20210911155135008" style="zoom:60%;"></p><ul><li><p>选择 <code>Spring Initializr</code> ，用来创建 <code>SpringBoot</code> 工程</p><p>以前我们选择的是 <code>Maven</code> ，今天选择 <code>Spring Initializr</code> 来快速构建 <code>SpringBoot</code> 工程。而在 <code>Module SDK</code> 这一项选择我们安装的 <code>JDK</code> 版本。</p></li></ul><p><img src="/posts/6f2612a2/image-20210911155249493.png" alt="image-20210911155249493" style="zoom:60%;"></p><ul><li><p>对 <code>SpringBoot</code> 工程进行相关的设置</p><p>我们使用这种方式构建的 <code>SpringBoot</code> 工程其实也是 <code>Maven</code> 工程，而该方式只是一种快速构建的方式而已。</p><p><img src="/posts/6f2612a2/image-20210911155916899.png" alt="image-20210911155916899" style="zoom:67%;"></p><blockquote><p>==注意：打包方式这里需要设置为 <code>Jar</code>==</p></blockquote></li><li><p>选中 <code>Web</code>，然后勾选 <code>Spring Web</code></p><p>由于我们需要开发一个 <code>web</code> 程序，使用到了 <code>SpringMVC</code> 技术，所以按照下图红框进行勾选</p></li></ul><p><img src="/posts/6f2612a2/image-20210911160040328.png" alt="image-20210911160040328" style="zoom:60%;"></p><ul><li>下图界面不需要任何修改，直接点击 <code>Finish</code> 完成 <code>SpringBoot</code> 工程的构建</li></ul><p><img src="/posts/6f2612a2/image-20210911160353534.png" alt="image-20210911160353534" style="zoom:70%;"></p><p>经过以上步骤后就创建了如下结构的模块，它会帮我们自动生成一个 <code>Application</code> 类，而该类一会再启动服务器时会用到</p><p><img src="/posts/6f2612a2/image-20210911160541833.png" alt="image-20210911160541833" style="zoom:80%;"></p><blockquote><p>==注意：==</p><ol><li><p>在创建好的工程中不需要创建配置类</p></li><li><p>创建好的项目会自动生成其他的一些文件，而这些文件目前对我们来说没有任何作用，所以可以将这些文件删除。</p><p>可以删除的目录和文件如下：</p><ul><li><code>.mvn</code>    </li><li><code>.gitignore</code></li><li><code>HELP.md</code></li><li><code>mvnw</code></li><li><code>mvnw.cmd</code></li></ul></li></ol></blockquote><h5 id="1-1-1-2-创建-Controller"><a href="#1-1-1-2-创建-Controller" class="headerlink" title="1.1.1.2  创建 Controller"></a>1.1.1.2  创建 <code>Controller</code></h5><p>在  <code>com.itheima.controller</code> 包下创建 <code>BookController</code> ，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-1-1-3-启动服务器"><a href="#1-1-1-3-启动服务器" class="headerlink" title="1.1.1.3  启动服务器"></a>1.1.1.3  启动服务器</h5><p>运行 <code>SpringBoot</code> 工程不需要使用本地的 <code>Tomcat</code> 和 插件，只运行项目 <code>com.itheima</code> 包下的 <code>Application</code> 类，我们就可以在控制台看出如下信息</p><p><img src="/posts/6f2612a2/image-20210911165642280.png" alt="image-20210911165642280"></p><h5 id="1-1-1-4-进行测试"><a href="#1-1-1-4-进行测试" class="headerlink" title="1.1.1.4  进行测试"></a>1.1.1.4  进行测试</h5><p>使用 <code>Postman</code> 工具来测试我们的程序</p><p><img src="/posts/6f2612a2/image-20210911160850121.png" alt="image-20210911160850121"></p><p>通过上面的入门案例我们可以看到使用 <code>SpringBoot</code> 进行开发，使整个开发变得很简单，那它是如何做到的呢？</p><p>要研究这个问题，我们需要看看 <code>Application</code> 类和 <code>pom.xml</code> 都书写了什么。先看看 <code>Applicaion</code> 类，该类内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类中的东西很简单，就在类上添加了一个 <code>@SpringBootApplication</code> 注解，而在主方法中就一行代码。我们在启动服务器时就是执行的该类中的主方法。</p><p>再看看 <code>pom.xml</code> 配置文件中的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--指定了一个父工程，父工程中的东西在该工程中可以继承过来使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot_01_quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--JDK 的版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该依赖就是我们在创建 SpringBoot 工程勾选的那个 Spring Web 产生的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个是单元测试的依赖，我们现在没有进行单元测试，所以这个依赖现在可以没有--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这个插件是在打包时需要的，而这里暂时还没有用到--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们代码之所以能简化，就是因为指定的父工程和 <code>Spring Web</code> 依赖实现的。具体的我们后面在聊。</p><h4 id="1-1-2-对比"><a href="#1-1-2-对比" class="headerlink" title="1.1.2  对比"></a>1.1.2  对比</h4><p>做完 <code>SpringBoot</code> 的入门案例后，接下来对比一下 <code>Spring</code> 程序和 <code>SpringBoot</code> 程序。如下图</p><p><img src="/posts/6f2612a2/image-20210911172200292.png" alt="image-20210911172200292" style="zoom:60%;"></p><ul><li><p><strong>坐标</strong></p><p><code>Spring</code> 程序中的坐标需要自己编写，而且坐标非常多</p><p><code>SpringBoot</code> 程序中的坐标是我们在创建工程时进行勾选自动生成的</p></li><li><p><strong>web3.0配置类</strong></p><p><code>Spring</code> 程序需要自己编写这个配置类。这个配置类大家之前编写过，肯定感觉很复杂</p><p><code>SpringBoot</code> 程序不需要我们自己书写</p></li><li><p><strong>配置类</strong></p><p><code>Spring/SpringMVC</code> 程序的配置类需要自己书写。而 <code>SpringBoot</code>  程序则不需要书写。</p></li></ul><blockquote><p>==注意：基于Idea的 <code>Spring Initializr</code> 快速构建 <code>SpringBoot</code> 工程时需要联网。== </p></blockquote><h4 id="1-1-3-官网构建工程"><a href="#1-1-3-官网构建工程" class="headerlink" title="1.1.3  官网构建工程"></a>1.1.3  官网构建工程</h4><p>在入门案例中之所以能快速构建 <code>SpringBoot</code> 工程，是因为 <code>Idea</code> 使用了官网提供了快速构建 <code>SpringBoot</code> 工程的组件实现的。那如何在官网进行工程构建呢？通过如下步骤构建</p><h5 id="1-1-3-1-进入SpringBoot官网"><a href="#1-1-3-1-进入SpringBoot官网" class="headerlink" title="1.1.3.1  进入SpringBoot官网"></a>1.1.3.1  进入SpringBoot官网</h5><p>官网地址如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://spring.io/projects/spring-boot</span><br></pre></td></tr></table></figure><p>进入到 <code>SpringBoot</code> 官网后拖到最下方就可以看到如下内容</p><p><img src="/posts/6f2612a2/image-20210911173712014.png" alt="image-20210911173712014" style="zoom:60%;"></p><p>然后点击 <code>Spring Initializr</code> 超链接就会跳转到如下页面</p><p><img src="/posts/6f2612a2/image-20210911174110687.png" alt="image-20210911174110687"></p><p>这个页面内容是不是感觉很眼熟的，这和我们使用 <code>Idea</code> 快速构建 <code>SpringBoot</code> 工程的界面基本相同。在上面页面输入对应的信息</p><h5 id="1-1-3-2-选择依赖"><a href="#1-1-3-2-选择依赖" class="headerlink" title="1.1.3.2  选择依赖"></a>1.1.3.2  选择依赖</h5><p>选择 <code>Spring Web</code> 可以点击上图右上角的 <code>ADD DEPENDENCIES... CTRL + B</code> 按钮，就会出现如下界面</p><p><img src="/posts/6f2612a2/image-20210911174650679.png" alt="image-20210911174650679"></p><h5 id="1-1-3-3-生成工程"><a href="#1-1-3-3-生成工程" class="headerlink" title="1.1.3.3  生成工程"></a>1.1.3.3  生成工程</h5><p>以上步骤完成后就可以生成 <code>SpringBoot</code> 工程了。在页面的最下方点击 <code>GENERATE CTRL + 回车</code> 按钮生成工程并下载到本地，如下图所示</p><p><img src="/posts/6f2612a2/image-20210911175222857.png" alt="image-20210911175222857"></p><p>打开下载好的压缩包可以看到工程结构和使用 <code>Idea</code> 生成的一模一样，如下图</p><p><img src="/posts/6f2612a2/image-20210911175502834.png" alt="image-20210911175502834" style="zoom:80%;"></p><p>而打开 <code>pom.xml</code> 文件，里面也包含了父工程和 <code>Spring Web</code> 的依赖。</p><p>通过上面官网的操作，我们知道 <code>Idea</code> 中快速构建 <code>SpringBoot</code> 工程其实就是使用的官网的快速构建组件，那以后即使没有 <code>Idea</code> 也可以使用官网的方式构建 <code>SpringBoot</code> 工程。</p><h4 id="1-1-4-SpringBoot工程快速启动"><a href="#1-1-4-SpringBoot工程快速启动" class="headerlink" title="1.1.4  SpringBoot工程快速启动"></a>1.1.4  SpringBoot工程快速启动</h4><h5 id="1-1-4-1-问题导入"><a href="#1-1-4-1-问题导入" class="headerlink" title="1.1.4.1  问题导入"></a>1.1.4.1  问题导入</h5><p><img src="/posts/6f2612a2/image-20210911180828611.png" alt="image-20210911180828611" style="zoom:50%;"></p><p>以后我们和前端开发人员协同开发，而前端开发人员需要测试前端程序就需要后端开启服务器，这就受制于后端开发人员。为了摆脱这个受制，前端开发人员尝试着在自己电脑上安装 <code>Tomcat</code> 和 <code>Idea</code> ，在自己电脑上启动后端程序，这显然不现实。</p><p>我们后端可以将 <code>SpringBoot</code> 工程打成 <code>jar</code> 包，该 <code>jar</code> 包运行不依赖于 <code>Tomcat</code> 和 <code>Idea</code> 这些工具也可以正常运行，只是这个 <code>jar</code> 包在运行过程中连接和我们自己程序相同的 <code>Mysql</code> 数据库即可。这样就可以解决这个问题，如下图</p><p><img src="/posts/6f2612a2/image-20210911181714437.png" alt="image-20210911181714437" style="zoom:50%;"></p><p>那现在问题是如何打包呢？</p><h5 id="1-1-4-2-打包"><a href="#1-1-4-2-打包" class="headerlink" title="1.1.4.2  打包"></a>1.1.4.2  打包</h5><p>由于我们在构建 <code>SpringBoot</code> 工程时已经在 <code>pom.xml</code> 中配置了如下插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以我们只需要使用 <code>Maven</code> 的 <code>package</code> 指令打包就会在 <code>target</code> 目录下生成对应的 <code>Jar</code> 包。</p><blockquote><p>==注意：该插件必须配置，不然打好的 <code>jar</code> 包也是有问题的。==</p></blockquote><h5 id="1-1-4-3-启动"><a href="#1-1-4-3-启动" class="headerlink" title="1.1.4.3  启动"></a>1.1.4.3  启动</h5><p>进入 <code>jar</code> 包所在位置，在 <code>命令提示符</code> 中输入如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -jar springboot_01_quickstart-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>执行上述命令就可以看到 <code>SpringBoot</code> 运行的日志信息</p><p><img src="/posts/6f2612a2/image-20210911182956629.png" alt="image-20210911182956629" style="zoom:60%;"></p><h3 id="1-2-SpringBoot概述"><a href="#1-2-SpringBoot概述" class="headerlink" title="1.2  SpringBoot概述"></a>1.2  SpringBoot概述</h3><p><code>SpringBoot</code> 是由Pivotal团队提供的全新框架，其设计目的是用来==简化==Spring应用的==初始搭建==以及==开发过程==。</p><p>大家已经感受了 <code>SpringBoot</code> 程序，回过头看看 <code>SpringBoot</code> 主要作用是什么，就是简化 <code>Spring</code> 的搭建过程和开发过程。</p><p>原始 <code>Spring</code> 环境搭建和开发存在以下问题：</p><ul><li>配置繁琐</li><li>依赖设置繁琐</li></ul><p><code>SpringBoot</code> 程序优点恰巧就是针对 <code>Spring</code> 的缺点</p><ul><li>自动配置。这个是用来解决 <code>Spring</code> 程序配置繁琐的问题</li><li>起步依赖。这个是用来解决 <code>Spring</code> 程序依赖设置繁琐的问题</li><li>辅助功能（内置服务器,…）。我们在启动 <code>SpringBoot</code> 程序时既没有使用本地的 <code>tomcat</code> 也没有使用 <code>tomcat</code> 插件，而是使用 <code>SpringBoot</code> 内置的服务器。</li></ul><p>接下来我们来说一下 <code>SpringBoot</code> 的起步依赖</p><h4 id="1-2-1-起步依赖"><a href="#1-2-1-起步依赖" class="headerlink" title="1.2.1  起步依赖"></a>1.2.1  起步依赖</h4><p>我们使用 <code>Spring Initializr</code>  方式创建的 <code>Maven</code> 工程的的 <code>pom.xml</code> 配置文件中自动生成了很多包含 <code>starter</code> 的依赖，如下图</p><p><img src="/posts/6f2612a2/image-20210918220338109.png" alt="image-20210918220338109" style="zoom:70%;"></p><p>这些依赖就是==启动依赖==，接下来我们探究一下他是如何实现的。</p><h5 id="1-2-1-1-探索父工程"><a href="#1-2-1-1-探索父工程" class="headerlink" title="1.2.1.1  探索父工程"></a>1.2.1.1  探索父工程</h5><p>从上面的文件中可以看到指定了一个父工程，我们进入到父工程，发现父工程中又指定了一个父工程，如下图所示</p><p><img src="/posts/6f2612a2/image-20210918220855024.png" alt="image-20210918220855024" style="zoom:80%;"></p><p>再进入到该父工程中，在该工程中我们可以看到配置内容结构如下图所示</p><p><img src="/posts/6f2612a2/image-20210918221042947.png" alt="image-20210918221042947" style="zoom:80%;"></p><p>上图中的 <code>properties</code> 标签中定义了各个技术软件依赖的版本，避免了我们在使用不同软件技术时考虑版本的兼容问题。在 <code>properties</code> 中我们找 <code>servlet</code>  和 <code>mysql</code> 的版本如下图</p><p><img src="/posts/6f2612a2/image-20210918221511249.png" alt="image-20210918221511249" style="zoom:80%;"></p><p><code>dependencyManagement</code> 标签是进行依赖版本锁定，但是并没有导入对应的依赖；如果我们工程需要那个依赖只需要引入依赖的 <code>groupid</code> 和 <code>artifactId</code> 不需要定义 <code>version</code>。</p><p>而 <code>build</code> 标签中也对插件的版本进行了锁定，如下图</p><p><img src="/posts/6f2612a2/image-20210918221942453.png" alt="image-20210918221942453" style="zoom:80%;"></p><p>看完了父工程中 <code>pom.xml</code> 的配置后不难理解我们工程的的依赖为什么都没有配置 <code>version</code>。</p><h5 id="1-2-1-2-探索依赖"><a href="#1-2-1-2-探索依赖" class="headerlink" title="1.2.1.2  探索依赖"></a>1.2.1.2  探索依赖</h5><p>在我们创建的工程中的 <code>pom.xml</code> 中配置了如下依赖</p><p><img src="/posts/6f2612a2/image-20210918222321402.png" alt="image-20210918222321402" style="zoom:80%;"></p><p>进入到该依赖，查看 <code>pom.xml</code> 的依赖会发现它引入了如下的依赖</p><p><img src="/posts/6f2612a2/image-20210918222607469.png" alt="image-20210918222607469" style="zoom:80%;"></p><p>里面的引入了 <code>spring-web</code> 和 <code>spring-webmvc</code> 的依赖，这就是为什么我们的工程中没有依赖这两个包还能正常使用 <code>springMVC</code> 中的注解的原因。</p><p>而依赖 <code>spring-boot-starter-tomcat</code> ，从名字基本能确认内部依赖了 <code>tomcat</code>，所以我们的工程才能正常启动。</p><p>==结论：以后需要使用技术，只需要引入该技术对应的起步依赖即可==</p><h5 id="1-2-1-3-小结"><a href="#1-2-1-3-小结" class="headerlink" title="1.2.1.3  小结"></a>1.2.1.3  小结</h5><p><strong>starter</strong></p><ul><li><code>SpringBoot</code> 中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li></ul><p><strong>parent</strong></p><ul><li><p>所有 <code>SpringBoot</code> 项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</p></li><li><p><code>spring-boot-starter-parent</code>（2.5.0）与 <code>spring-boot-starter-parent</code>（2.4.6）共计57处坐标版本不同</p></li></ul><p><strong>实际开发</strong></p><ul><li><p>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供</p><blockquote><p>G：groupid</p><p>A：artifactId</p><p>V：version</p></blockquote></li><li><p>如发生坐标错误，再指定version（要小心版本冲突）</p></li></ul><h4 id="1-2-2-程序启动"><a href="#1-2-2-程序启动" class="headerlink" title="1.2.2  程序启动"></a>1.2.2  程序启动</h4><p>创建的每一个 <code>SpringBoot</code> 程序时都包含一个类似于下面的类，我们将这个类称作引导类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot01QuickstartApplication</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot01QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注意：==</p><ul><li><p><code>SpringBoot</code> 在创建项目时，采用jar的打包方式</p></li><li><p><code>SpringBoot</code> 的引导类是项目的入口，运行 <code>main</code> 方法就可以启动项目</p><p>因为我们在 <code>pom.xml</code> 中配置了 <code>spring-boot-starter-web</code> 依赖，而该依赖通过前面的学习知道它依赖 <code>tomcat</code> ，所以运行 <code>main</code> 方法就可以使用 <code>tomcat</code> 启动咱们的工程。</p></li></ul><h4 id="1-2-3-切换web服务器"><a href="#1-2-3-切换web服务器" class="headerlink" title="1.2.3  切换web服务器"></a>1.2.3  切换web服务器</h4><p>现在我们启动工程使用的是 <code>tomcat</code> 服务器，那能不能不使用 <code>tomcat</code> 而使用 <code>jetty</code> 服务器，<code>jetty</code> 在我们 <code>maven</code> 高级时讲 <code>maven</code> 私服使用的服务器。而要切换 <code>web</code> 服务器就需要将默认的 <code>tomcat</code> 服务器给排除掉，怎么排除呢？使用 <code>exclusion</code> 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在我们运行引导类可以吗？运行一下试试，打印的日志信息如下</p><p><img src="/posts/6f2612a2/image-20210918232512707.png" alt="image-20210918232512707"></p><p>程序直接停止了，为什么呢？那是因为排除了 <code>tomcat</code> 服务器，程序中就没有服务器了。所以此时不光要排除 <code>tomcat</code> 服务器，还要引入 <code>jetty</code> 服务器。在 <code>pom.xml</code> 中因为 <code>jetty</code> 的起步依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来再次运行引导类，在日志信息中就可以看到使用的是 <code>jetty</code> 服务器</p><p><img src="/posts/6f2612a2/image-20210918232904623.png" alt="image-20210918232904623"></p><p><strong>小结：</strong></p><p>通过切换服务器，我们不难发现在使用 <code>SpringBoot</code> 换技术时只需要导入该技术的起步依赖即可。</p><h2 id="2，配置文件"><a href="#2，配置文件" class="headerlink" title="2，配置文件"></a>2，配置文件</h2><h3 id="2-1-配置文件格式"><a href="#2-1-配置文件格式" class="headerlink" title="2.1  配置文件格式"></a>2.1  配置文件格式</h3><p>我们现在启动服务器默认的端口号是 <code>8080</code>，访问路径可以书写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/books/1</span><br></pre></td></tr></table></figure><p>在线上环境我们还是希望将端口号改为 <code>80</code>，这样在访问的时候就可以不写端口号了，如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/books/1</span><br></pre></td></tr></table></figure><p>而 <code>SpringBoot</code> 程序如何修改呢？<code>SpringBoot</code> 提供了多种属性配置方式</p><ul><li><p><code>application.properties</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.port=80</span><br></pre></td></tr></table></figure></li><li><p><code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure></li><li><p><code>application.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>==注意：<code>SpringBoot</code> 程序的配置文件名必须是 <code>application</code> ，只是后缀名不同而已。==</p></blockquote><h4 id="2-1-1-环境准备"><a href="#2-1-1-环境准备" class="headerlink" title="2.1.1  环境准备"></a>2.1.1  环境准备</h4><p>创建一个新工程 <code>springboot_02_base_config</code> 用来演示不同的配置文件，工程环境和入门案例一模一样，结构如下：</p><p><img src="/posts/6f2612a2/image-20210917151314753.png" alt="image-20210917151314753" style="zoom:80%;"></p><p>在该工程中的 <code>com.itheima.controller</code> 包下创建一个名为 <code>BookController</code> 的控制器。内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-不同配置文件演示"><a href="#2-1-2-不同配置文件演示" class="headerlink" title="2.1.2  不同配置文件演示"></a>2.1.2  不同配置文件演示</h4><ul><li><strong>application.properties配置文件</strong></li></ul><p>现在需要进行配置，配合文件必须放在 <code>resources</code> 目录下，而该目录下有一个名为 <code>application.properties</code> 的配置文件，我们就可以在该配置文件中修改端口号，在该配置文件中书写 <code>port</code> ，<code>Idea</code> 就会提示，如下</p><p><img src="/posts/6f2612a2/image-20210917161422535.png" alt="image-20210917161422535" style="zoom:80%;"></p><p><code>application.properties</code> 配置文件内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><p>启动服务，会在控制台打印出日志信息，从日志信息中可以看到绑定的端口号已经修改了</p><p><img src="/posts/6f2612a2/image-20210917161720855.png" alt="image-20210917161720855" style="zoom:80%;"></p><ul><li><strong>application.yml配置文件</strong></li></ul><p>删除 <code>application.properties</code> 配置文件中的内容。在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，在该文件中书写端口号的配置项，格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><blockquote><p>==注意： 在<code>:</code>后，数据前一定要加空格。==</p></blockquote><p>而在 <code>yml</code> 配置文件中也是有提示功能的，我们也可以在该文件中书写 <code>port</code> ，然后 <code>idea</code> 就会提示并书写成上面的格式</p><p><img src="/posts/6f2612a2/image-20210917162512646.png" alt="image-20210917162512646" style="zoom:80%;"></p><p>启动服务，可以在控制台看到绑定的端口号是 <code>81</code></p><p><img src="/posts/6f2612a2/image-20210917162700711.png" alt="image-20210917162700711"></p><ul><li><strong>application.yaml配置文件</strong></li></ul><p>删除 <code>application.yml</code> 配置文件和 <code>application.properties</code> 配置文件内容，然后在 <code>resources</code> 下创建名为 <code>application.yaml</code> 的配置文件，配置内容和后缀名为 <code>yml</code> 的配置文件中的内容相同，只是使用了不同的后缀名而已</p><p><code>application.yaml</code> 配置文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">83</span></span><br></pre></td></tr></table></figure><p>启动服务，在控制台可以看到绑定的端口号</p><p><img src="/posts/6f2612a2/image-20210917163335913.png" alt="image-20210917163335913"></p><p>==注意：在配合文件中如果没有提示，可以使用一下方式解决==</p><ul><li>点击 <code>File</code> 选中 <code>Project Structure</code></li></ul><p><img src="/posts/6f2612a2/image-20210917163557071.png" alt="image-20210917163557071" style="zoom:80%;"></p><ul><li>弹出如下窗口，按图中标记红框进行选择</li></ul><p><img src="/posts/6f2612a2/image-20210917163736458.png" alt="image-20210917163736458" style="zoom:70%;"></p><ul><li>通过上述操作，会弹出如下窗口</li></ul><p><img src="/posts/6f2612a2/image-20210917163818051.png" alt="image-20210917163818051" style="zoom:80%;"></p><ul><li>点击上图的 <code>+</code> 号，弹出选择该模块的配置文件</li></ul><p><img src="/posts/6f2612a2/image-20210917163828518.png" alt="image-20210917163828518" style="zoom:80%;"></p><ul><li>通过上述几步后，就可以看到如下界面。<code>properties</code> 类型的配合文件有一个，<code>ymal</code> 类型的配置文件有两个</li></ul><p><img src="/posts/6f2612a2/image-20210917163846243.png" alt="image-20210917163846243" style="zoom:80%;"></p><h4 id="2-1-3-三种配合文件的优先级"><a href="#2-1-3-三种配合文件的优先级" class="headerlink" title="2.1.3  三种配合文件的优先级"></a>2.1.3  三种配合文件的优先级</h4><p>在三种配合文件中分别配置不同的端口号，启动服务查看绑定的端口号。用这种方式就可以看到哪个配置文件的优先级更高一些</p><p><code>application.properties</code> 文件内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> 文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><p><code>application.yaml</code> 文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure><p>启动服务，在控制台可以看到使用的端口号是 <code>80</code>。说明 <code>application.properties</code> 的优先级最高</p><p>注释掉 <code>application.properties</code> 配置文件内容。再次启动服务，在控制台可以看到使用的端口号是 <code>81</code>，说明 <code>application.yml</code> 配置文件为第二优先级。</p><p>从上述的验证结果可以确定三种配置文件的优先级是：</p><p>==<code>application.properties</code>  &gt;  <code>application.yml</code>   &gt;  <code>application.yaml</code>==</p><blockquote><p>==注意：==</p><ul><li><p><code>SpringBoot</code> 核心配置文件名为 <code>application</code></p></li><li><p><code>SpringBoot</code> 内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性</p><p>例如要设置日志的级别时，可以在配置文件中书写 <code>logging</code>，就会提示出来。配置内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><h3 id="2-2-yaml格式"><a href="#2-2-yaml格式" class="headerlink" title="2.2  yaml格式"></a>2.2  yaml格式</h3><p>上面讲了三种不同类型的配置文件，而 <code>properties</code> 类型的配合文件之前我们学习过，接下来我们重点学习 <code>yaml</code> 类型的配置文件。</p><p><strong>YAML（YAML Ain’t Markup Language），一种数据序列化格式。</strong>这种格式的配置文件在近些年已经占有主导地位，那么这种配置文件和前期使用的配置文件是有一些优势的，我们先看之前使用的配置文件。</p><p>最开始我们使用的是 <code>xml</code> ，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">enterprise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">age</span>&gt;</span>16<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tel</span>&gt;</span>4006184000<span class="tag">&lt;/<span class="name">tel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">enterprise</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而 <code>properties</code> 类型的配置文件如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise.name</span>=<span class="string">itcast</span></span><br><span class="line"><span class="attr">enterprise.age</span>=<span class="string">16</span></span><br><span class="line"><span class="attr">enterprise.tel</span>=<span class="string">4006184000</span></span><br></pre></td></tr></table></figure><p><code>yaml</code> 类型的配置文件内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">16</span></span><br><span class="line"><span class="attr">tel:</span> <span class="number">4006184000</span></span><br></pre></td></tr></table></figure><p><strong>优点：</strong></p><ul><li><p>容易阅读</p><p><code>yaml</code> 类型的配置文件比 <code>xml</code> 类型的配置文件更容易阅读，结构更加清晰</p></li><li><p>容易与脚本语言交互</p></li><li><p>以数据为核心，重数据轻格式</p><p><code>yaml</code> 更注重数据，而 <code>xml</code> 更注重格式</p></li></ul><p><strong>YAML 文件扩展名：</strong></p><ul><li><code>.yml</code> (主流)</li><li><code>.yaml</code></li></ul><p>上面两种后缀名都可以，以后使用更多的还是 <code>yml</code> 的。</p><h4 id="2-2-1-语法规则"><a href="#2-2-1-语法规则" class="headerlink" title="2.2.1  语法规则"></a>2.2.1  语法规则</h4><ul><li><p>大小写敏感</p></li><li><p>属性层级关系使用多行描述，每行结尾使用冒号结束</p></li><li><p>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</p><p>空格的个数并不重要，只要保证同层级的左侧对齐即可。</p></li><li><p>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</p></li><li><p># 表示注释</p></li></ul><p>==核心规则：数据前面要加空格与冒号隔开==</p><p>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔，例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure><h3 id="2-3-yaml配置文件数据读取"><a href="#2-3-yaml配置文件数据读取" class="headerlink" title="2.3  yaml配置文件数据读取"></a>2.3  yaml配置文件数据读取</h3><h4 id="2-3-1-环境准备"><a href="#2-3-1-环境准备" class="headerlink" title="2.3.1  环境准备"></a>2.3.1  环境准备</h4><p>新创建一个名为 <code>springboot_03_read_data</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p><p><img src="/posts/6f2612a2/image-20210917172736484.png" alt="image-20210917172736484" style="zoom:80%;"></p><p>在 <code>com.itheima.controller</code> 包写创建名为 <code>BookController</code> 的控制器，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>com.itheima.domain</code> 包下创建一个名为 <code>Enterprise</code> 的实体类等会用来封装数据，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>resources</code> 下创建一个名为 <code>application.yml</code> 的配置文件，里面配置了不同的数据，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">大数据</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-读取配置数据"><a href="#2-3-2-读取配置数据" class="headerlink" title="2.3.2  读取配置数据"></a>2.3.2  读取配置数据</h4><h5 id="2-3-2-1-使用-Value注解"><a href="#2-3-2-1-使用-Value注解" class="headerlink" title="2.3.2.1  使用 @Value注解"></a>2.3.2.1  使用 @Value注解</h5><p>使用 <code>@Value(&quot;表达式&quot;)</code> 注解可以从配合文件中读取数据，注解中用于读取属性名引用方式是：<code>$&#123;一级属性名.二级属性名……&#125;</code></p><p>我们可以在 <code>BookController</code> 中使用 <code>@Value</code>  注解读取配合文件数据，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;lesson&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String lesson;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer port;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;enterprise.subject[0]&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String subject_00;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(lesson);</span><br><span class="line">        System.out.println(port);</span><br><span class="line">        System.out.println(subject_00);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-2-2-Environment对象"><a href="#2-3-2-2-Environment对象" class="headerlink" title="2.3.2.2  Environment对象"></a>2.3.2.2  Environment对象</h5><p>上面方式读取到的数据特别零散，<code>SpringBoot</code> 还可以使用 <code>@Autowired</code> 注解注入 <code>Environment</code> 对象的方式读取数据。这种方式 <code>SpringBoot</code> 会将配置文件中所有的数据封装到 <code>Environment</code> 对象中，如果需要使用哪个数据只需要通过调用 <code>Environment</code> 对象的 <code>getProperty(String name)</code> 方法获取。具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;lesson&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;enterprise.name&quot;</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">&quot;enterprise.subject[0]&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>==注意：这种方式，框架内容大量数据，而在开发中我们很少使用。==</p></blockquote><h5 id="2-3-2-3-自定义对象"><a href="#2-3-2-3-自定义对象" class="headerlink" title="2.3.2.3  自定义对象"></a>2.3.2.3  自定义对象</h5><p><code>SpringBoot</code> 还提供了将配置文件中的数据封装到我们自定义的实体类对象中的方式。具体操作如下：</p><ul><li><p>将实体类 <code>bean</code> 的创建交给 <code>Spring</code> 管理。</p><p>在类上添加 <code>@Component</code> 注解</p></li><li><p>使用 <code>@ConfigurationProperties</code> 注解表示加载配置文件</p><p>在该注解中也可以使用 <code>prefix</code> 属性指定只加载指定前缀的数据</p></li><li><p>在 <code>BookController</code> 中进行注入</p></li></ul><p><strong>具体代码如下：</strong></p><p><code>Enterprise</code> 实体类内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;enterprise&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTel</span><span class="params">(String tel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tel = tel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getSubject() &#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSubject</span><span class="params">(String[] subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Enterprise&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, tel=&#x27;&quot;</span> + tel + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, subject=&quot;</span> + Arrays.toString(subject) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BookController</code> 内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Enterprise enterprise;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(enterprise.getName());</span><br><span class="line">        System.out.println(enterprise.getAge());</span><br><span class="line">        System.out.println(enterprise.getSubject());</span><br><span class="line">        System.out.println(enterprise.getTel());</span><br><span class="line">        System.out.println(enterprise.getSubject()[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注意：==</p><p>使用第三种方式，在实体类上有如下警告提示</p><p><img src="/posts/6f2612a2/image-20210917180919390.png" alt="image-20210917180919390" style="zoom:70%;"></p><p>这个警告提示解决是在 <code>pom.xml</code> 中添加如下依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-多环境配置"><a href="#2-4-多环境配置" class="headerlink" title="2.4  多环境配置"></a>2.4  多环境配置</h3><p>以后在工作中，对于开发环境、测试环境、生产环境的配置肯定都不相同，比如我们开发阶段会在自己的电脑上安装 <code>mysql</code> ，连接自己电脑上的 <code>mysql</code> 即可，但是项目开发完毕后要上线就需要该配置，将环境的配置改为线上环境的。</p><p><img src="/posts/6f2612a2/image-20210917185253557.png" alt="image-20210917185253557" style="zoom:60%;"></p><p>来回的修改配置会很麻烦，而 <code>SpringBoot</code> 给开发者提供了多环境的快捷配置，需要切换环境时只需要改一个配置即可。不同类型的配置文件多环境开发的配置都不相同，接下来对不同类型的配置文件进行说明</p><h4 id="2-4-1-yaml文件"><a href="#2-4-1-yaml文件" class="headerlink" title="2.4.1  yaml文件"></a>2.4.1  yaml文件</h4><p>在 <code>application.yml</code> 中使用 <code>---</code> 来分割不同的配置，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span> <span class="comment">#给开发环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span> <span class="comment">#给生产环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span> <span class="comment">#给测试环境起的名字</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>上面配置中 <code>spring.profiles</code> 是用来给不同的配置起名字的。而如何告知 <code>SpringBoot</code> 使用哪段配置呢？可以使用如下配置来启用都一段配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span>  <span class="comment">#表示使用的是开发环境的配置</span></span><br></pre></td></tr></table></figure><p>综上所述，<code>application.yml</code> 配置文件内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置启用的环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#生产</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#测试</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>==注意：==</p><p>在上面配置中给不同配置起名字的 <code>spring.profiles</code> 配置项已经过时。最新用来起名字的配置项是 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开发</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">config:</span></span><br><span class="line">    <span class="attr">activate:</span></span><br><span class="line">      <span class="attr">on-profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h4 id="2-4-2-properties文件"><a href="#2-4-2-properties文件" class="headerlink" title="2.4.2  properties文件"></a>2.4.2  properties文件</h4><p><code>properties</code> 类型的配置文件配置多环境需要定义不同的配置文件</p><ul><li><p><code>application-dev.properties</code> 是开发环境的配置文件。我们在该文件中配置端口号为 <code>80</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure></li><li><p><code>application-test.properties</code> 是测试环境的配置文件。我们在该文件中配置端口号为 <code>81</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">81</span></span><br></pre></td></tr></table></figure></li><li><p><code>application-pro.properties</code> 是生产环境的配置文件。我们在该文件中配置端口号为 <code>82</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">82</span></span><br></pre></td></tr></table></figure></li></ul><p><code>SpringBoot</code> 只会默认加载名为 <code>application.properties</code> 的配置文件，所以需要在 <code>application.properties</code> 配置文件中设置启用哪个配置文件，配置如下:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></table></figure><h4 id="2-4-3-命令行启动参数设置"><a href="#2-4-3-命令行启动参数设置" class="headerlink" title="2.4.3  命令行启动参数设置"></a>2.4.3  命令行启动参数设置</h4><p>使用 <code>SpringBoot</code> 开发的程序以后都是打成 <code>jar</code> 包，通过 <code>java -jar xxx.jar</code> 的方式启动服务的。那么就存在一个问题，如何切换环境呢？因为配置文件打到的jar包中了。</p><p>我们知道 <code>jar</code> 包其实就是一个压缩包，可以解压缩，然后修改配置，最后再打成jar包就可以了。这种方式显然有点麻烦，而 <code>SpringBoot</code> 提供了在运行 <code>jar</code> 时设置开启指定的环境的方式，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar xxx.jar –-spring.profiles.active=test</span><br></pre></td></tr></table></figure><p>那么这种方式能不能临时修改端口号呢？也是可以的，可以通过如下方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar xxx.jar –-server.port=88</span><br></pre></td></tr></table></figure><p>当然也可以同时设置多个配置，比如即指定启用哪个环境配置，又临时指定端口，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar springboot.jar –-server.port=88 –-spring.profiles.active=test</span><br></pre></td></tr></table></figure><p>大家进行测试后就会发现命令行设置的端口号优先级高（也就是使用的是命令行设置的端口号），配置的优先级其实 <code>SpringBoot</code> 官网已经进行了说明，参见 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</span><br></pre></td></tr></table></figure><p>进入上面网站后会看到如下页面</p><p><img src="/posts/6f2612a2/image-20210917193910191.png" alt="image-20210917193910191"></p><p>如果使用了多种方式配合同一个配置项，优先级高的生效。</p><h3 id="2-5-配置文件分类"><a href="#2-5-配置文件分类" class="headerlink" title="2.5  配置文件分类"></a>2.5  配置文件分类</h3><p><img src="/posts/6f2612a2/image-20210917194941597.png" alt="image-20210917194941597" style="zoom:70%;"></p><p>有这样的场景，我们开发完毕后需要测试人员进行测试，由于测试环境和开发环境的很多配置都不相同，所以测试人员在运行我们的工程时需要临时修改很多配置，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar springboot.jar –-spring.profiles.active=test --server.port=85 --server.servlet.context-path=/heima --server.tomcat.connection-timeout=-1 …… …… …… …… ……</span><br></pre></td></tr></table></figure><p>针对这种情况，<code>SpringBoot</code> 定义了配置文件不同的放置的位置；而放在不同位置的优先级时不同的。</p><p><code>SpringBoot</code> 中4级配置文件放置位置：</p><ul><li>1级：classpath：application.yml  </li><li>2级：classpath：config/application.yml</li><li>3级：file ：application.yml</li><li>4级：file ：config/application.yml </li></ul><blockquote><p>==说明：==级别越高优先级越高</p></blockquote><h4 id="2-5-1-代码演示"><a href="#2-5-1-代码演示" class="headerlink" title="2.5.1  代码演示"></a>2.5.1  代码演示</h4><p>在这里我们只演示不同级别配置文件放置位置的优先级。</p><h5 id="2-5-1-1-环境准备"><a href="#2-5-1-1-环境准备" class="headerlink" title="2.5.1.1  环境准备"></a>2.5.1.1  环境准备</h5><p>创建一个名为 <code>springboot_06_config_file</code> 的 <code>SpringBoot</code> 工程，目录结构如下</p><p><img src="/posts/6f2612a2/image-20210917200241282.png" alt="image-20210917200241282" style="zoom:80%;"></p><p>在 <code>resources</code> 下创建一个名为 <code>config</code> 的目录，在该目录中创建 <code>application.yml</code> 配置文件，而在该配置文件中将端口号设置为 <code>81</code>，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure><p>而在 <code>resources</code> 下创建的 <code>application.yml</code> 配置文件中并将端口号设置为 <code>80</code>，内容如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><h5 id="2-5-1-2-验证1级和2级的优先级"><a href="#2-5-1-2-验证1级和2级的优先级" class="headerlink" title="2.5.1.2  验证1级和2级的优先级"></a>2.5.1.2  验证1级和2级的优先级</h5><p>运行启动引导类，可以在控制台看到如下日志信息</p><p><img src="/posts/6f2612a2/image-20210917200805389.png" alt="image-20210917200805389"></p><p>通过这个结果可以得出==类路径下的 <code>config</code> 下的配置文件优先于类路径下的配置文件。==</p><h5 id="2-5-1-3-验证2级和4级的优先级"><a href="#2-5-1-3-验证2级和4级的优先级" class="headerlink" title="2.5.1.3  验证2级和4级的优先级"></a>2.5.1.3  验证2级和4级的优先级</h5><p>要验证4级，按照以下步骤完成</p><ul><li><p>将工程打成 <code>jar</code> 包</p><p>点击工程的 <code>package</code> 来打 <code>jar</code> 包</p><p><img src="/posts/6f2612a2/image-20210917201243721.png" alt="image-20210917201243721" style="zoom:80%;"></p></li><li><p>在硬盘上找到 <code>jar</code> 包所在位置</p><p><img src="/posts/6f2612a2/image-20210917201523669.png" alt="image-20210917201523669" style="zoom:70%;"></p></li><li><p>在 <code>jar</code> 包所在位置创建 <code>config</code> 文件夹，在该文件夹下创建 <code>application.yml</code> 配置文件，而在该配合文件中将端口号设置为 <code>82</code> </p></li><li><p>在命令行使用以下命令运行程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar springboot_06_config_file-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><p>运行后日志信息如下</p><p><img src="/posts/6f2612a2/image-20210917201922831.png" alt="image-20210917201922831"></p><p>通过这个结果可以得出==file： <code>config</code> 下的配置文件优先于类路径下的配置文件。==</p></li></ul><blockquote><p>==注意：==</p><p>SpringBoot 2.5.0版本存在一个bug，我们在使用这个版本时，需要在 <code>jar</code> 所在位置的 <code>config</code> 目录下创建一个任意名称的文件夹</p></blockquote><h2 id="3，SpringBoot整合junit"><a href="#3，SpringBoot整合junit" class="headerlink" title="3，SpringBoot整合junit"></a>3，SpringBoot整合junit</h2><p>回顾 <code>Spring</code> 整合 <code>junit</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span>&#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>@RunWith</code> 注解指定运行器，使用 <code>@ContextConfiguration</code> 注解来指定配置类或者配置文件。而 <code>SpringBoot</code> 整合 <code>junit</code> 特别简单，分为以下三步完成</p><ul><li>在测试类上添加 <code>SpringBootTest</code> 注解</li><li>使用 <code>@Autowired</code> 注入要测试的资源</li><li>定义测试方法进行测试</li></ul><h3 id="3-1-环境准备"><a href="#3-1-环境准备" class="headerlink" title="3.1  环境准备"></a>3.1  环境准备</h3><p>创建一个名为 <code>springboot_07_test</code> 的 <code>SpringBoot</code> 工程，工程目录结构如下</p><p><img src="/posts/6f2612a2/image-20210917213556673.png" alt="image-20210917213556673" style="zoom:80%;"></p><p>在 <code>com.itheima.service</code> 下创建 <code>BookService</code> 接口，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>com.itheima.service.impl</code> 包写创建一个 <code>BookServiceImpl</code> 类，使其实现 <code>BookService</code> 接口，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service is running ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-编写测试类"><a href="#3-2-编写测试类" class="headerlink" title="3.2  编写测试类"></a>3.2  编写测试类</h3><p>在 <code>test/java</code> 下创建 <code>com.itheima</code> 包，在该包下创建测试类，将 <code>BookService</code> 注入到该测试类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot07TestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>==注意：==这里的引导类所在包必须是测试类所在包及其子包。</p><p>例如：</p><ul><li>引导类所在包是 <code>com.itheima</code></li><li>测试类所在包是 <code>com.itheima</code></li></ul><p>如果不满足这个要求的话，就需要在使用 <code>@SpringBootTest</code> 注解时，使用 <code>classes</code> 属性指定引导类的字节码对象。如 <code>@SpringBootTest(classes = Springboot07TestApplication.class)</code></p></blockquote><h2 id="4，SpringBoot整合mybatis"><a href="#4，SpringBoot整合mybatis" class="headerlink" title="4，SpringBoot整合mybatis"></a>4，SpringBoot整合mybatis</h2><h3 id="4-1-回顾Spring整合Mybatis"><a href="#4-1-回顾Spring整合Mybatis" class="headerlink" title="4.1  回顾Spring整合Mybatis"></a>4.1  回顾Spring整合Mybatis</h3><p><code>Spring</code> 整合 <code>Mybatis</code> 需要定义很多配置类</p><ul><li><p><code>SpringConfig</code> 配置类</p><ul><li><p>导入 <code>JdbcConfig</code> 配置类</p></li><li><p>导入 <code>MybatisConfig</code> 配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>JdbcConfig</code> 配置类</p><ul><li><p>定义数据源（加载properties配置项：driver、url、username、password）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>MybatisConfig</code> 配置类</p><ul><li><p>定义 <code>SqlSessionFactoryBean</code></p></li><li><p>定义映射配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">getMapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">    msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> msc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">getSqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">    ssfb.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> ssfb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-2-SpringBoot整合mybatis"><a href="#4-2-SpringBoot整合mybatis" class="headerlink" title="4.2  SpringBoot整合mybatis"></a>4.2  SpringBoot整合mybatis</h3><h4 id="4-2-1-创建模块"><a href="#4-2-1-创建模块" class="headerlink" title="4.2.1  创建模块"></a>4.2.1  创建模块</h4><ul><li>创建新模块，选择 <code>Spring Initializr</code>，并配置模块相关基础信息</li></ul><p><img src="/posts/6f2612a2/image-20210917215913779.png" alt="image-20210917215913779" style="zoom:80%;"></p><ul><li><p>选择当前模块需要使用的技术集（MyBatis、MySQL）</p><p><img src="/posts/6f2612a2/image-20210917215958091.png" alt="image-20210917215958091" style="zoom:80%;"></p></li></ul><h4 id="4-2-2-定义实体类"><a href="#4-2-2-定义实体类" class="headerlink" title="4.2.2  定义实体类"></a>4.2.2  定义实体类</h4><p>在 <code>com.itheima.domain</code> 包下定义实体类 <code>Book</code>，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//setter and  getter</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3-定义dao接口"><a href="#4-2-3-定义dao接口" class="headerlink" title="4.2.3  定义dao接口"></a>4.2.3  定义dao接口</h4><p>在 <code>com.itheima.dao</code> 包下定义 <code>BookDao</code> 接口，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4-定义测试类"><a href="#4-2-4-定义测试类" class="headerlink" title="4.2.4  定义测试类"></a>4.2.4  定义测试类</h4><p>在 <code>test/java</code> 下定义包 <code>com.itheima</code> ，在该包下测试类，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot08MybatisApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.getById(<span class="number">1</span>);</span><br><span class="line">System.out.println(book);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-5-编写配置"><a href="#4-2-5-编写配置" class="headerlink" title="4.2.5  编写配置"></a>4.2.5  编写配置</h4><p>我们代码中并没有指定连接哪儿个数据库，用户名是什么，密码是什么。所以这部分需要在 <code>SpringBoot</code> 的配置文件中进行配合。</p><p>在 <code>application.yml</code> 配置文件中配置如下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h4 id="4-2-6-测试"><a href="#4-2-6-测试" class="headerlink" title="4.2.6  测试"></a>4.2.6  测试</h4><p>运行测试方法，我们会看到如下错误信息</p><p><img src="/posts/6f2612a2/image-20210917221427930.png" alt="image-20210917221427930" style="zoom:70%;"></p><p>错误信息显示在 <code>Spring</code> 容器中没有 <code>BookDao</code> 类型的 <code>bean</code>。为什么会出现这种情况呢？</p><p>原因是 <code>Mybatis</code> 会扫描接口并创建接口的代码对象交给 <code>Spring</code> 管理，但是现在并没有告诉 <code>Mybatis</code> 哪个是 <code>dao</code> 接口。而我们要解决这个问题需要在<code>BookDao</code> 接口上使用 <code>@Mapper</code> ，<code>BookDao</code> 接口改进为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>==注意：==</p><p><code>SpringBoot</code> 版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区 <code>jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</code>，或在MySQL数据库端配置时区解决此问题</p></blockquote><h4 id="4-2-7-使用Druid数据源"><a href="#4-2-7-使用Druid数据源" class="headerlink" title="4.2.7  使用Druid数据源"></a>4.2.7  使用Druid数据源</h4><p>现在我们并没有指定数据源，<code>SpringBoot</code> 有默认的数据源，我们也可以指定使用 <code>Druid</code> 数据源，按照以下步骤实现</p><ul><li><p>导入 <code>Druid</code> 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>application.yml</code> 配置文件配置</p><p>可以通过 <code>spring.datasource.type</code> 来配置使用什么数据源。配置文件内容可以改进为</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5，案例"><a href="#5，案例" class="headerlink" title="5，案例"></a>5，案例</h2><p><code>SpringBoot</code> 到这就已经学习完毕，接下来我们将学习 <code>SSM</code> 时做的三大框架整合的案例用 <code>SpringBoot</code> 来实现一下。我们完成这个案例基本是将之前做的拷贝过来，修改成 <code>SpringBoot</code> 的即可，主要从以下几部分完成</p><ol><li><p>pom.xml</p><p>配置起步依赖，必要的资源坐标(druid)</p></li><li><p>application.yml</p><p>设置数据源、端口等</p></li><li><p>配置类</p><p>全部删除</p></li><li><p>dao</p><p>设置@Mapper</p></li><li><p>测试类</p></li><li><p>页面</p><p>放置在resources目录下的static目录中</p></li></ol><h3 id="5-1-创建工程"><a href="#5-1-创建工程" class="headerlink" title="5.1  创建工程"></a>5.1  创建工程</h3><p>创建 <code>SpringBoot</code> 工程，在创建工程时需要勾选 <code>web</code>、<code>mysql</code>、<code>mybatis</code>，工程目录结构如下</p><p><img src="/posts/6f2612a2/image-20210917225019868.png" alt="image-20210917225019868" style="zoom:80%;"></p><p>由于我们工程中使用到了 <code>Druid</code> ，所以需要导入 <code>Druid</code> 的坐标</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-代码拷贝"><a href="#5-2-代码拷贝" class="headerlink" title="5.2  代码拷贝"></a>5.2  代码拷贝</h3><p>将 <code>springmvc_11_page</code> 工程中的 <code>java</code> 代码及测试代码连同包拷贝到 <code>springboot_09_ssm</code> 工程，按照下图进行拷贝</p><p><img src="/posts/6f2612a2/image-20210917225715519.png" alt="image-20210917225715519" style="zoom:70%;"></p><p>需要修改的内容如下：</p><ul><li><p><code>Springmvc_11_page</code> 中 <code>config</code> 包下的是配置类，而 <code>SpringBoot</code> 工程不需要这些配置类，所以这些可以直接删除</p></li><li><p><code>dao</code> 包下的接口上在拷贝到 <code>springboot_09-ssm</code> 工程中需要在接口中添加 <code>@Mapper</code> 注解</p></li><li><p><code>BookServiceTest</code> 测试需要改成 <code>SpringBoot</code> 整合 <code>junit</code> 的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-3-配置文件"><a href="#5-3-配置文件" class="headerlink" title="5.3  配置文件"></a>5.3  配置文件</h3><p>在 <code>application.yml</code> 配置文件中需要配置如下内容</p><ul><li>服务的端口号</li><li>连接数据库的信息</li><li>数据源</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span> <span class="comment">#?servierTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><h3 id="5-4-静态资源"><a href="#5-4-静态资源" class="headerlink" title="5.4  静态资源"></a>5.4  静态资源</h3><p>在 <code>SpringBoot</code> 程序中是没有 <code>webapp</code> 目录的，那么在 <code>SpringBoot</code> 程序中静态资源需要放在什么位置呢？</p><p>静态资源需要放在 <code>resources</code> 下的 <code>static</code> 下，如下图所示</p><p><img src="/posts/6f2612a2/image-20210917230702072.png" alt="image-20210917230702072" style="zoom:80%;"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios</title>
      <link href="/posts/a09486d2.html"/>
      <url>/posts/a09486d2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>express</strong>是快速搭建web服务器</p><p>axios响应的结果（response ：</p><ol><li>设置</li><li>数据（josn</li><li>相应头</li><li>原生的AJAX请求对象</li><li>响应+状态码 </li></ol><h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http://****/id&#x27;</span>,</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    这个</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://,</span></span><br><span class="line"><span class="string">    data: &#123;</span></span><br><span class="line"><span class="string">    title: &#x27;</span>jiwang<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;).then(response =&gt;&#123;</span></span><br><span class="line"><span class="string">    响应</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="配置默认设置"><a href="#配置默认设置" class="headerlink" title="配置默认设置"></a>配置默认设置</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">method</span> = <span class="string">&#x27;GET&#x27;</span>;<span class="comment">//设置默认的请求类型为 GET</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:3000&#x27;</span>;<span class="comment">//设置基础 URL</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">params</span> = &#123;<span class="attr">id</span>:<span class="number">100</span>&#125;;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">3000</span>;<span class="comment">//</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Node.js require函数是将模块导入到当前文件的主要方式在Node.js中有三种的模块:核心模块，文件模块和外部node_modules。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybats-plus</title>
      <link href="/posts/89399289.html"/>
      <url>/posts/89399289.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="mybats-plus"><a href="#mybats-plus" class="headerlink" title="mybats-plus"></a>mybats-plus</h1><h1 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h1><ol><li>默认生成主键id是雪花算法</li><li><strong>对应的实体的主键字段加入自增注解： @TableId(IdType.AUTO)</strong></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>orcale</title>
      <link href="/posts/5f64e705.html"/>
      <url>/posts/5f64e705.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="用户授权和撤销"><a href="#用户授权和撤销" class="headerlink" title="用户授权和撤销"></a>用户授权和撤销</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">忘记密码：</span><br><span class="line"><span class="number">1.</span>sqlplus <span class="operator">/</span>nolog</span><br><span class="line"><span class="number">2.</span>conn <span class="operator">/</span><span class="keyword">as</span> sysdba;(当前用户是sys)</span><br></pre></td></tr></table></figure><p><strong>创建用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> tom identified <span class="keyword">by</span> <span class="number">1234</span>;</span><br></pre></td></tr></table></figure><p><strong>修改密码</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> scott  identified <span class="keyword">by</span> tiger;</span><br></pre></td></tr></table></figure><p><strong>授权登录权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> tom</span><br></pre></td></tr></table></figure><p><strong>登陆到其他用户</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conn scott<span class="operator">/</span>tiger;</span><br></pre></td></tr></table></figure><p><strong>用户授权表的权限</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> emp <span class="keyword">to</span> tom;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span> <span class="keyword">on</span> emp <span class="keyword">to</span> tom <span class="keyword">with</span> <span class="keyword">grant</span> option;(授予权限的同时赋予)</span><br></pre></td></tr></table></figure><p><strong>回收权限</strong>‘</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recoke <span class="keyword">select</span> <span class="keyword">on</span> emp <span class="keyword">from</span> tom;</span><br></pre></td></tr></table></figure><p><strong>取消用户锁定</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">system</span> account unlock;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>english</title>
      <link href="/posts/2c830200.html"/>
      <url>/posts/2c830200.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="English"><a href="#English" class="headerlink" title="English"></a>English</h1><h1 id="ing名词后缀"><a href="#ing名词后缀" class="headerlink" title="ing名词后缀"></a>ing名词后缀</h1><p>corresponding：</p><p>fingding：  </p><p>train：</p><p>willing：</p><p>existing：</p><p>missing：</p><p>engineering：</p><p>warning：</p><p>earning：</p><p>leading:</p><p>experience:</p><p>experienced：</p><h1 id="identi-相同"><a href="#identi-相同" class="headerlink" title="identi 相同"></a>identi 相同</h1><p>identify：</p><h1 id="e-ef-ex-使。。。；加强意义；外向"><a href="#e-ef-ex-使。。。；加强意义；外向" class="headerlink" title="e- ef- ex- 使。。。；加强意义；外向"></a>e- ef- ex- 使。。。；加强意义；外向</h1><p>event：</p><p>emerged from：</p><p>establish </p><p>estate：</p><p>effect：</p><p>effective：</p><p>efficient：</p><p>efficiency：</p><p>exact：</p><p>expense：</p><p>expand：</p><p>examine：</p><p>exist:</p><h1 id="ion，ation：-名词后缀，表行为，状态等；"><a href="#ion，ation：-名词后缀，表行为，状态等；" class="headerlink" title="ion，ation： 名词后缀，表行为，状态等；"></a>ion，ation： 名词后缀，表行为，状态等；</h1><p>comprehension: </p><p>function:</p><p>option：</p><p>protection：</p><p>solution：</p><p>version：</p><p>creation：</p><p>pollution：</p><p>emission：</p><p>revolution：</p><p>portion：</p><p>restriction：</p><p>session：</p><p>instruction：</p><p>application：</p><p>foundation：</p><p>transportation：</p><p>location：</p><p>motivation：</p><p>reputation：</p><p>de-去掉；向下；加强意义；否定</p><p>develop：</p><p>decline：</p><p>development：</p><p>derive：</p><p>degree：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sql</title>
      <link href="/posts/dbd66adf.html"/>
      <url>/posts/dbd66adf.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>四种数据库：Mysql，Oracle，SQLServer，PostgreSQL</p><p>结构化查询语言</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(<span class="keyword">not</span> <span class="keyword">null</span>是不能为空值，<span class="type">numeric</span>(a,b)精确取值，总位数a，小数点后位数b)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emmployees()</span><br></pre></td></tr></table></figure><h1 id="insert用法"><a href="#insert用法" class="headerlink" title="insert用法"></a>insert用法</h1><p><strong>第一种用法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(字段一的值，字段二的值.....);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>第二种用法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名(字段一，字段二，字段三，....)values(字段一的值，字段二的值....);</span><br></pre></td></tr></table></figure><h1 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> employees;</span><br><span class="line"><span class="keyword">select</span> name,salary <span class="keyword">from</span> employeses;</span><br></pre></td></tr></table></figure><p><strong>使用distinct可以去重复的值</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> 字段名 <span class="keyword">from</span> 表名;</span><br></pre></td></tr></table></figure><h2 id="Where"><a href="#Where" class="headerlink" title="Where"></a>Where</h2><p><img src="/posts/dbd66adf/image-20230307212626495.png" alt="image-20230307212626495"></p><p><strong>例如</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,salary <span class="keyword">from</span> employees <span class="keyword">where</span> hiredata<span class="operator">&lt;</span><span class="string">&#x27;2000-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="and和or"><a href="#and和or" class="headerlink" title="and和or"></a>and和or</h3><p>and和or可以用在where子句中把两个或多个条件结合起来。</p><p><strong>and</strong>运算符要求两个条件都成立</p><p><strong>or</strong>运算符有一个条件成立就行了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 字段n 运算符 值n <span class="keyword">and</span><span class="operator">|</span><span class="keyword">or</span> 字段m 运算符 值m；</span><br></pre></td></tr></table></figure><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><p><strong>在where中使用，like后%匹配多个字符</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段 <span class="keyword">like</span> 字符串;</span><br></pre></td></tr></table></figure><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><p><strong>in相当于or条件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 字段名 <span class="keyword">in</span>(值<span class="number">1</span>，值<span class="number">2</span>);相当于查询字段名<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span> 的值</span><br></pre></td></tr></table></figure><h3 id="between-……-and"><a href="#between-……-and" class="headerlink" title="between …… and"></a>between …… and</h3><p><strong>是选取两个值之间的数据</strong>(相当于 &gt;= and &lt;=)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名 <span class="keyword">between</span> 值<span class="number">1</span> <span class="keyword">and</span> 值<span class="number">2</span></span><br></pre></td></tr></table></figure><p><em>注：not between 是不在这两个值之间的</em> </p><h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><p><strong>对于结果进行排序，默认选择升序(asc)排序，也可以指定desc降序进行排序</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名 <span class="keyword">from</span> 表名 字段一,字段二，......<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h1 id="update"><a href="#update" class="headerlink" title="update"></a>update</h1><p><strong>用法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段<span class="number">1</span><span class="operator">=</span>？,字段二<span class="operator">=</span>？<span class="keyword">where</span> 字句</span><br><span class="line">#如果不指明<span class="keyword">where</span>就是所有的记录都得更新</span><br><span class="line">#修改全部数据</span><br></pre></td></tr></table></figure><h1 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字句</span><br><span class="line">如果不指明<span class="keyword">where</span>就是所有的记录都得删除</span><br></pre></td></tr></table></figure><h1 id="index"><a href="#index" class="headerlink" title="index"></a>index</h1><p><strong>索引可以提高访问数据的速度</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名 <span class="keyword">on</span> 表名 (多字段);</span><br></pre></td></tr></table></figure><h1 id="view"><a href="#view" class="headerlink" title="view"></a>view</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名 <span class="keyword">as</span> <span class="keyword">select</span> 语句;</span><br></pre></td></tr></table></figure><p><em>修改视图同时修改底层数据</em></p><p><strong>字段值NULL判断要用is null 或者 is not null</strong></p><h1 id="字段名和表名的别名"><a href="#字段名和表名的别名" class="headerlink" title="字段名和表名的别名"></a>字段名和表名的别名</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select 字段名 as 别名 from 表名 as  别名;</span><br><span class="line"></span><br><span class="line">as可省略</span><br></pre></td></tr></table></figure><p><img src="/posts/dbd66adf/image-20230307220250097.png" alt="image-20230307220250097"></p><h1 id="join连接"><a href="#join连接" class="headerlink" title="join连接"></a>join连接</h1><p><img src="/posts/dbd66adf/image-20230307220343057.png" alt="image-20230307220343057"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>内连接</span><br><span class="line"><span class="number">1.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">join</span> 表名 <span class="keyword">on</span> 条件 <span class="keyword">where</span> 表达式</span><br><span class="line"><span class="number">2.</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 表名 <span class="keyword">where</span> 表达式</span><br><span class="line">查询“<span class="number">3001</span>”课程比“<span class="number">3003</span>”课程成绩高的所有学生的学号与分数；</span><br><span class="line"><span class="keyword">SELECT</span> a.sid,a.score <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> sid,score <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cid<span class="operator">=</span>&quot;3001&quot;) a,</span><br><span class="line"></span><br><span class="line">      (<span class="keyword">SELECT</span> sid,score <span class="keyword">FROM</span> sc <span class="keyword">WHERE</span> cid<span class="operator">=</span>&quot;3003&quot;) b</span><br><span class="line"></span><br><span class="line">     <span class="keyword">WHERE</span> a.score<span class="operator">&gt;</span>b.score <span class="keyword">AND</span> a.sid<span class="operator">=</span>b.sid</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <img src="/posts/dbd66adf/image-20230307220528897.png" alt="image-20230307220528897"></p><h1 id="SubQuery"><a href="#SubQuery" class="headerlink" title="SubQuery"></a>SubQuery</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2.</span>... <span class="keyword">from</span> 表名 <span class="keyword">where</span> 字段名 操作符  (子查询);</span><br></pre></td></tr></table></figure><p><img src="/posts/dbd66adf/image-20230307220736009.png" alt="image-20230307220736009" style="zoom:200%;"></p><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><p><img src="/posts/dbd66adf/image-20230307220830620.png" alt="image-20230307220830620"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">max</span>(字段名)<span class="built_in">min</span>(字段名)<span class="built_in">avg</span>(字段名)<span class="built_in">sum</span>(字段名)</span><br><span class="line">例如:<span class="keyword">select</span> <span class="built_in">sum</span>(salary) <span class="keyword">from</span> employee</span><br></pre></td></tr></table></figure><h1 id="group-by分组"><a href="#group-by分组" class="headerlink" title="group by分组"></a>group by分组</h1><p><img src="/posts/dbd66adf/image-20230307221049745.png" alt="image-20230307221049745"></p><h1 id="having-过滤分组"><a href="#having-过滤分组" class="headerlink" title="having 过滤分组"></a>having 过滤分组</h1><p><img src="/posts/dbd66adf/image-20230307221118356.png" alt="image-20230307221118356"></p><p><img src="/posts/dbd66adf/image-20230307221138167.png" alt="image-20230307221138167"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>统计每个城市的人口数量</span><br><span class="line"><span class="keyword">select</span> city, <span class="built_in">count</span>(<span class="operator">*</span>) num <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> city;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>统计每个城市的人口数量而且数量大于三个的</span><br><span class="line"><span class="keyword">select</span> city, <span class="built_in">count</span>(<span class="operator">*</span>) num <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> city <span class="keyword">having</span> num <span class="operator">&gt;</span> <span class="number">3</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>统计每个城市年龄最大的人</span><br><span class="line"> <span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> city；</span><br></pre></td></tr></table></figure><p><strong>如果预估数据量比较大，我们使用<code>SQL_BIG_RESULT</code> 这个提示直接用磁盘临时表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> SQL_BIG_RESULT city, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> city;</span><br></pre></td></tr></table></figure><h1 id="like-1"><a href="#like-1" class="headerlink" title="like"></a>like</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表 <span class="keyword">where</span> lie <span class="keyword">like</span> <span class="type">binary</span> <span class="string">&#x27;%_&#x27;</span></span><br><span class="line"><span class="operator">%</span>是多少个都可以 _只能是一个  <span class="type">binary</span> 是开启区分大小写</span><br></pre></td></tr></table></figure><h1 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#前面的<span class="number">0</span>可以省略</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表 limit <span class="number">5</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表 limit <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line">#不够的话有几条显示几条</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream</title>
      <link href="/posts/f745bb2a.html"/>
      <url>/posts/f745bb2a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h1>]]></content>
      
      
      
        <tags>
            
            <tag> javaSe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务</title>
      <link href="/posts/460c1130.html"/>
      <url>/posts/460c1130.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-认识微服务"><a href="#1-认识微服务" class="headerlink" title="1.认识微服务"></a>1.认识微服务</h1><p>随着互联网行业的发展，对服务的要求也越来越高，服务架构也从单体架构逐渐演变为现在流行的微服务架构。这些架构之间有怎样的差别呢？</p><h2 id="1-0-学习目标"><a href="#1-0-学习目标" class="headerlink" title="1.0.学习目标"></a>1.0.学习目标</h2><p>了解微服务架构的优缺点</p><h2 id="1-1-单体架构"><a href="#1-1-单体架构" class="headerlink" title="1.1.单体架构"></a>1.1.单体架构</h2><p><strong>单体架构</strong>：将业务的所有功能集中在一个项目中开发，打成一个包部署。</p><p><img src="/posts/460c1130/image-20210713202807818.png" alt="image-20210713202807818"></p><p>单体架构的优缺点如下：</p><p><strong>优点：</strong></p><ul><li>架构简单</li><li>部署成本低</li></ul><p><strong>缺点：</strong></p><ul><li>耦合度高（维护困难、升级困难）</li></ul><h2 id="1-2-分布式架构"><a href="#1-2-分布式架构" class="headerlink" title="1.2.分布式架构"></a>1.2.分布式架构</h2><p><strong>分布式架构</strong>：根据业务功能对系统做拆分，每个业务功能模块作为独立项目开发，称为一个服务。</p><p><img src="/posts/460c1130/image-20210713203124797.png" alt="image-20210713203124797"></p><p>分布式架构的优缺点：</p><p><strong>优点：</strong></p><ul><li>降低服务耦合</li><li>有利于服务升级和拓展</li></ul><p><strong>缺点：</strong></p><ul><li>服务调用关系错综复杂</li></ul><p>分布式架构虽然降低了服务耦合，但是服务拆分时也有很多问题需要思考：</p><ul><li>服务拆分的粒度如何界定？</li><li>服务之间如何调用？</li><li>服务的调用关系如何管理？</li></ul><p>人们需要制定一套行之有效的标准来约束分布式架构。</p><h2 id="1-3-微服务"><a href="#1-3-微服务" class="headerlink" title="1.3.微服务"></a>1.3.微服务</h2><p>微服务的架构特征：</p><ul><li>单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责</li><li>自治：团队独立、技术独立、数据独立，独立部署和交付</li><li>面向服务：服务提供统一标准的接口，与语言和技术无关</li><li>隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题</li></ul><p><img src="/posts/460c1130/image-20210713203753373.png" alt="image-20210713203753373"></p><p>微服务的上述特性其实是在给分布式架构制定一个标准，进一步降低服务之间的耦合度，提供服务的独立性和灵活性。做到高内聚，低耦合。</p><p>因此，可以认为<strong>微服务</strong>是一种经过良好架构设计的<strong>分布式架构方案</strong> 。</p><p>但方案该怎么落地？选用什么样的技术栈？全球的互联网公司都在积极尝试自己的微服务落地方案。</p><p>其中在Java领域最引人注目的就是SpringCloud提供的方案了。</p><h2 id="1-4-SpringCloud"><a href="#1-4-SpringCloud" class="headerlink" title="1.4.SpringCloud"></a>1.4.SpringCloud</h2><p>SpringCloud是目前国内使用最广泛的微服务框架。官网地址：<a href="https://spring.io/projects/spring-cloud。">https://spring.io/projects/spring-cloud。</a></p><p>SpringCloud集成了各种微服务功能组件，并基于SpringBoot实现了这些组件的自动装配，从而提供了良好的开箱即用体验。</p><p>其中常见的组件包括：</p><p><img src="/posts/460c1130/image-20210713204155887.png" alt="image-20210713204155887"></p><p>另外，SpringCloud底层是依赖于SpringBoot的，并且有版本的兼容关系，如下：</p><p><img src="/posts/460c1130/image-20210713205003790.png" alt="image-20210713205003790"></p><p>我们课堂学习的版本是 Hoxton.SR10，因此对应的SpringBoot版本是2.3.x版本。</p><h2 id="1-5-总结"><a href="#1-5-总结" class="headerlink" title="1.5.总结"></a>1.5.总结</h2><ul><li><p>单体架构：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</p></li><li><p>分布式架构：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东、淘宝</p></li><li><p>微服务：一种良好的分布式架构方案</p><p>①优点：拆分粒度更小、服务更独立、耦合度更低</p><p>②缺点：架构非常复杂，运维、监控、部署难度提高</p></li><li><p>SpringCloud是微服务架构的一站式解决方案，集成了各种优秀微服务功能组件</p></li></ul><h1 id="2-服务拆分和远程调用"><a href="#2-服务拆分和远程调用" class="headerlink" title="2.服务拆分和远程调用"></a>2.服务拆分和远程调用</h1><p>任何分布式架构都离不开服务的拆分，微服务也是一样。</p><h2 id="2-1-服务拆分原则"><a href="#2-1-服务拆分原则" class="headerlink" title="2.1.服务拆分原则"></a>2.1.服务拆分原则</h2><p>这里我总结了微服务拆分时的几个原则：</p><ul><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其它微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其它微服务调用</li></ul><p><img src="/posts/460c1130/image-20210713210800950.png" alt="image-20210713210800950"></p><h2 id="2-2-服务拆分示例"><a href="#2-2-服务拆分示例" class="headerlink" title="2.2.服务拆分示例"></a>2.2.服务拆分示例</h2><p>以课前资料中的微服务cloud-demo为例，其结构如下：</p><p><img src="/posts/460c1130/image-20210713211009593.png" alt="image-20210713211009593"></p><p>cloud-demo：父工程，管理依赖</p><ul><li>order-service：订单微服务，负责订单相关业务</li><li>user-service：用户微服务，负责用户相关业务</li></ul><p>要求：</p><ul><li>订单微服务和用户微服务都必须有各自的数据库，相互独立</li><li>订单服务和用户服务都对外暴露Restful的接口</li><li>订单服务如果需要查询用户信息，只能调用用户服务的Restful接口，不能查询用户数据库</li></ul><h3 id="2-2-1-导入Sql语句"><a href="#2-2-1-导入Sql语句" class="headerlink" title="2.2.1.导入Sql语句"></a>2.2.1.导入Sql语句</h3><p>首先，将课前资料提供的<code>cloud-order.sql</code>和<code>cloud-user.sql</code>导入到mysql中：</p><p><img src="/posts/460c1130/image-20210713211417049.png" alt="image-20210713211417049"></p><p>cloud-user表中初始数据如下：</p><p><img src="/posts/460c1130/image-20210713211550169.png" alt="image-20210713211550169"></p><p>cloud-order表中初始数据如下：</p><p><img src="/posts/460c1130/image-20210713211657319.png" alt="image-20210713211657319"></p><p>cloud-order表中持有cloud-user表中的id字段。</p><h3 id="2-2-2-导入demo工程"><a href="#2-2-2-导入demo工程" class="headerlink" title="2.2.2.导入demo工程"></a>2.2.2.导入demo工程</h3><p>用IDEA导入课前资料提供的Demo：</p><p><img src="/posts/460c1130/image-20210713211814094.png" alt="image-20210713211814094"></p><p>项目结构如下：</p><p><img src="/posts/460c1130/image-20210713212656887.png" alt="image-20210713212656887"></p><p>导入后，会在IDEA右下角出现弹窗：</p><p><img src="/posts/460c1130/image-20210713212349272.png" alt="image-20210713212349272"></p><p>点击弹窗，然后按下图选择：</p><p><img src="/posts/460c1130/image-20210713212336185.png" alt="image-20210713212336185"></p><p>会出现这样的菜单：</p><p><img src="/posts/460c1130/image-20210713212513324.png" alt="image-20210713212513324"></p><p>配置下项目使用的JDK：</p><p><img src="/posts/460c1130/image-20210713220736408.png" alt="image-20210713220736408"></p><h2 id="2-3-实现远程调用案例"><a href="#2-3-实现远程调用案例" class="headerlink" title="2.3.实现远程调用案例"></a>2.3.实现远程调用案例</h2><p>在order-service服务中，有一个根据id查询订单的接口：</p><p><img src="/posts/460c1130/image-20210713212749575.png" alt="image-20210713212749575"></p><p>根据id查询订单，返回值是Order对象，如图：</p><p><img src="/posts/460c1130/image-20210713212901725.png" alt="image-20210713212901725"></p><p>其中的user为null</p><p>在user-service中有一个根据id查询用户的接口：</p><p><img src="/posts/460c1130/image-20210713213146089.png" alt="image-20210713213146089"></p><p>查询的结果如图：</p><p><img src="/posts/460c1130/image-20210713213213075.png" alt="image-20210713213213075"></p><h3 id="2-3-1-案例需求："><a href="#2-3-1-案例需求：" class="headerlink" title="2.3.1.案例需求："></a>2.3.1.案例需求：</h3><p>修改order-service中的根据id查询订单业务，要求在查询订单的同时，根据订单中包含的userId查询出用户信息，一起返回。</p><p><img src="/posts/460c1130/image-20210713213312278.png" alt="image-20210713213312278"></p><p>因此，我们需要在order-service中 向user-service发起一个http的请求，调用<a href="http://localhost:8081/user/{userId}这个接口。">http://localhost:8081/user/{userId}这个接口。</a></p><p>大概的步骤是这样的：</p><ul><li>注册一个RestTemplate的实例到Spring容器</li><li>修改order-service服务中的OrderService类中的queryOrderById方法，根据Order对象中的userId查询User</li><li>将查询的User填充到Order对象，一起返回</li></ul><h3 id="2-3-2-注册RestTemplate"><a href="#2-3-2-注册RestTemplate" class="headerlink" title="2.3.2.注册RestTemplate"></a>2.3.2.注册RestTemplate</h3><p>首先，我们在order-service服务中的OrderApplication启动类中，注册RestTemplate实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan(&quot;cn.itcast.order.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(OrderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-实现远程调用"><a href="#2-3-3-实现远程调用" class="headerlink" title="2.3.3.实现远程调用"></a>2.3.3.实现远程调用</h3><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法：</p><p><img src="/posts/460c1130/image-20210713213959569.png" alt="image-20210713213959569"></p><h2 id="2-4-提供者与消费者"><a href="#2-4-提供者与消费者" class="headerlink" title="2.4.提供者与消费者"></a>2.4.提供者与消费者</h2><p>在服务调用关系中，会有两个不同的角色：</p><p><strong>服务提供者</strong>：一次业务中，被其它微服务调用的服务。（提供接口给其它微服务）</p><p><strong>服务消费者</strong>：一次业务中，调用其它微服务的服务。（调用其它微服务提供的接口）</p><p><img src="/posts/460c1130/image-20210713214404481.png" alt="image-20210713214404481"></p><p>但是，服务提供者与服务消费者的角色并不是绝对的，而是相对于业务而言。</p><p>如果服务A调用了服务B，而服务B又调用了服务C，服务B的角色是什么？</p><ul><li>对于A调用B的业务而言：A是服务消费者，B是服务提供者</li><li>对于B调用C的业务而言：B是服务消费者，C是服务提供者</li></ul><p>因此，服务B既可以是服务提供者，也可以是服务消费者。</p><h1 id="3-Eureka注册中心"><a href="#3-Eureka注册中心" class="headerlink" title="3.Eureka注册中心"></a>3.Eureka注册中心</h1><p>假如我们的服务提供者user-service部署了多个实例，如图：</p><p><img src="/posts/460c1130/image-20210713214925388.png" alt="image-20210713214925388"></p><p>大家思考几个问题：</p><ul><li>order-service在发起远程调用的时候，该如何得知user-service实例的ip地址和端口？</li><li>有多个user-service实例地址，order-service调用时该如何选择？</li><li>order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</li></ul><h2 id="3-1-Eureka的结构和作用"><a href="#3-1-Eureka的结构和作用" class="headerlink" title="3.1.Eureka的结构和作用"></a>3.1.Eureka的结构和作用</h2><p>这些问题都需要利用SpringCloud中的注册中心来解决，其中最广为人知的注册中心就是Eureka，其结构如下：</p><p><img src="/posts/460c1130/image-20210713220104956.png" alt="image-20210713220104956"></p><p>回答之前的各个问题。</p><p>问题1：order-service如何得知user-service实例地址？</p><p>获取地址信息的流程如下：</p><ul><li>user-service服务实例启动后，将自己的信息注册到eureka-server（Eureka服务端）。这个叫服务注册</li><li>eureka-server保存服务名称到服务实例地址列表的映射关系</li><li>order-service根据服务名称，拉取实例地址列表。这个叫服务发现或服务拉取</li></ul><p>问题2：order-service如何从多个user-service实例中选择具体的实例？</p><ul><li>order-service从实例列表中利用负载均衡算法选中一个实例地址</li><li>向该实例地址发起远程调用</li></ul><p>问题3：order-service如何得知某个user-service实例是否依然健康，是不是已经宕机？</p><ul><li>user-service会每隔一段时间（默认30秒）向eureka-server发起请求，报告自己状态，称为心跳</li><li>当超过一定时间没有发送心跳时，eureka-server会认为微服务实例故障，将该实例从服务列表中剔除</li><li>order-service拉取服务时，就能将故障实例排除了</li></ul><blockquote><p>注意：一个微服务，既可以是服务提供者，又可以是服务消费者，因此eureka将服务注册、服务发现等功能统一封装到了eureka-client端</p></blockquote><p>因此，接下来我们动手实践的步骤包括：</p><p><img src="/posts/460c1130/image-20210713220509769.png" alt="image-20210713220509769"></p><h2 id="3-2-搭建eureka-server"><a href="#3-2-搭建eureka-server" class="headerlink" title="3.2.搭建eureka-server"></a>3.2.搭建eureka-server</h2><p>首先大家注册中心服务端：eureka-server，这必须是一个独立的微服务</p><h3 id="3-2-1-创建eureka-server服务"><a href="#3-2-1-创建eureka-server服务" class="headerlink" title="3.2.1.创建eureka-server服务"></a>3.2.1.创建eureka-server服务</h3><p>在cloud-demo父工程下，创建一个子模块：</p><p><img src="/posts/460c1130/image-20210713220605881.png" alt="image-20210713220605881"></p><p>填写模块信息：</p><p><img src="/posts/460c1130/image-20210713220857396.png" alt="image-20210713220857396"></p><p>然后填写服务信息：</p><p><img src="/posts/460c1130/image-20210713221339022.png" alt="image-20210713221339022"></p><h3 id="3-2-2-引入eureka依赖"><a href="#3-2-2-引入eureka依赖" class="headerlink" title="3.2.2.引入eureka依赖"></a>3.2.2.引入eureka依赖</h3><p>引入SpringCloud为eureka提供的starter依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-编写启动类"><a href="#3-2-3-编写启动类" class="headerlink" title="3.2.3.编写启动类"></a>3.2.3.编写启动类</h3><p>给eureka-server服务编写一个启动类，一定要添加一个@EnableEurekaServer注解，开启eureka的注册中心功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-4-编写配置文件"><a href="#3-2-4-编写配置文件" class="headerlink" title="3.2.4.编写配置文件"></a>3.2.4.编写配置文件</h3><p>编写一个application.yml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eureka-server</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span> </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3-2-5-启动服务"><a href="#3-2-5-启动服务" class="headerlink" title="3.2.5.启动服务"></a>3.2.5.启动服务</h3><p>启动微服务，然后在浏览器访问：<a href="http://127.0.0.1:10086">http://127.0.0.1:10086</a></p><p>看到下面结果应该是成功了：</p><p><img src="/posts/460c1130/image-20210713222157190.png" alt="image-20210713222157190"></p><h2 id="3-3-服务注册"><a href="#3-3-服务注册" class="headerlink" title="3.3.服务注册"></a>3.3.服务注册</h2><p>下面，我们将user-service注册到eureka-server中去。</p><h3 id="1）引入依赖"><a href="#1）引入依赖" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在user-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）配置文件"><a href="#2）配置文件" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>在user-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3）启动多个user-service实例"><a href="#3）启动多个user-service实例" class="headerlink" title="3）启动多个user-service实例"></a>3）启动多个user-service实例</h3><p>为了演示一个服务有多个实例的场景，我们添加一个SpringBoot的启动配置，再启动一个user-service。</p><p>首先，复制原来的user-service启动配置：</p><p><img src="/posts/460c1130/image-20210713222656562.png" alt="image-20210713222656562"></p><p>然后，在弹出的窗口中，填写信息：</p><p><img src="/posts/460c1130/image-20210713222757702.png" alt="image-20210713222757702"></p><p>现在，SpringBoot窗口会出现两个user-service启动配置：</p><p><img src="/posts/460c1130/image-20210713222841951.png" alt="image-20210713222841951"></p><p>不过，第一个是8081端口，第二个是8082端口。</p><p>启动两个user-service实例：</p><p><img src="/posts/460c1130/image-20210713223041491.png" alt="image-20210713223041491"></p><p>查看eureka-server管理页面：</p><p><img src="/posts/460c1130/image-20210713223150650.png" alt="image-20210713223150650"></p><h2 id="3-4-服务发现"><a href="#3-4-服务发现" class="headerlink" title="3.4.服务发现"></a>3.4.服务发现</h2><p>下面，我们将order-service的逻辑修改：向eureka-server拉取user-service的信息，实现服务发现。</p><h3 id="1）引入依赖-1"><a href="#1）引入依赖-1" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>之前说过，服务发现、服务注册统一都封装在eureka-client依赖，因此这一步与服务注册时一致。</p><p>在order-service的pom文件中，引入下面的eureka-client依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）配置文件-1"><a href="#2）配置文件-1" class="headerlink" title="2）配置文件"></a>2）配置文件</h3><p>服务发现也需要知道eureka地址，因此第二步与服务注册一致，都是配置eureka信息：</p><p>在order-service中，修改application.yml文件，添加服务名称、eureka地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderservice</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:10086/eureka</span></span><br></pre></td></tr></table></figure><h3 id="3）服务拉取和负载均衡"><a href="#3）服务拉取和负载均衡" class="headerlink" title="3）服务拉取和负载均衡"></a>3）服务拉取和负载均衡</h3><p>最后，我们要去eureka-server中拉取user-service服务的实例列表，并且实现负载均衡。</p><p>不过这些动作不用我们去做，只需要添加一些注解即可。</p><p>在order-service的OrderApplication中，给RestTemplate这个Bean添加一个@LoadBalanced注解：</p><p><img src="/posts/460c1130/image-20210713224049419.png" alt="image-20210713224049419"></p><p>修改order-service服务中的cn.itcast.order.service包下的OrderService类中的queryOrderById方法。修改访问的url路径，用服务名代替ip、端口：</p><p><img src="/posts/460c1130/image-20210713224245731.png" alt="image-20210713224245731"></p><p>spring会自动帮助我们从eureka-server端，根据userservice这个服务名称，获取实例列表，而后完成负载均衡。</p><h1 id="4-Ribbon负载均衡"><a href="#4-Ribbon负载均衡" class="headerlink" title="4.Ribbon负载均衡"></a>4.Ribbon负载均衡</h1><p>上一节中，我们添加了@LoadBalanced注解，即可实现负载均衡功能，这是什么原理呢？</p><h2 id="4-1-负载均衡原理"><a href="#4-1-负载均衡原理" class="headerlink" title="4.1.负载均衡原理"></a>4.1.负载均衡原理</h2><p>SpringCloud底层其实是利用了一个名为Ribbon的组件，来实现负载均衡功能的。</p><p><img src="/posts/460c1130/image-20210713224517686.png" alt="image-20210713224517686"></p><p>那么我们发出的请求明明是<a href="http://userservice/user/1，怎么变成了http://localhost:8081的呢？">http://userservice/user/1，怎么变成了http://localhost:8081的呢？</a></p><h2 id="4-2-源码跟踪"><a href="#4-2-源码跟踪" class="headerlink" title="4.2.源码跟踪"></a>4.2.源码跟踪</h2><p>为什么我们只输入了service名称就可以访问了呢？之前还要获取ip和端口。</p><p>显然有人帮我们根据service名称，获取到了服务实例的ip和端口。它就是<code>LoadBalancerInterceptor</code>，这个类会在对RestTemplate的请求进行拦截，然后从Eureka根据服务id获取服务列表，随后利用负载均衡算法得到真实的服务地址信息，替换服务id。</p><p>我们进行源码跟踪：</p><h3 id="1）LoadBalancerIntercepor"><a href="#1）LoadBalancerIntercepor" class="headerlink" title="1）LoadBalancerIntercepor"></a>1）LoadBalancerIntercepor</h3><p><img src="/posts/460c1130/1525620483637.png" alt="1525620483637"></p><p>可以看到这里的intercept方法，拦截了用户的HttpRequest请求，然后做了几件事：</p><ul><li><code>request.getURI()</code>：获取请求uri，本例中就是 <a href="http://user-service/user/8">http://user-service/user/8</a></li><li><code>originalUri.getHost()</code>：获取uri路径的主机名，其实就是服务id，<code>user-service</code></li><li><code>this.loadBalancer.execute()</code>：处理服务id，和用户请求。</li></ul><p>这里的<code>this.loadBalancer</code>是<code>LoadBalancerClient</code>类型，我们继续跟入。</p><h3 id="2）LoadBalancerClient"><a href="#2）LoadBalancerClient" class="headerlink" title="2）LoadBalancerClient"></a>2）LoadBalancerClient</h3><p>继续跟入execute方法：</p><p><img src="/posts/460c1130/1525620787090.png" alt="1525620787090"></p><p>代码是这样的：</p><ul><li>getLoadBalancer(serviceId)：根据服务id获取ILoadBalancer，而ILoadBalancer会拿着服务id去eureka中获取服务列表并保存起来。</li><li>getServer(loadBalancer)：利用内置的负载均衡算法，从服务列表中选择一个。本例中，可以看到获取了8082端口的服务</li></ul><p>放行后，再次访问并跟踪，发现获取的是8081：</p><p> <img src="/posts/460c1130/1525620835911.png" alt="1525620835911"></p><p>果然实现了负载均衡。</p><h3 id="3）负载均衡策略IRule"><a href="#3）负载均衡策略IRule" class="headerlink" title="3）负载均衡策略IRule"></a>3）负载均衡策略IRule</h3><p>在刚才的代码中，可以看到获取服务使通过一个<code>getServer</code>方法来做负载均衡:</p><p> <img src="/posts/460c1130/1525620835911.png" alt="1525620835911"></p><p>我们继续跟入：</p><p><img src="/posts/460c1130/1544361421671.png" alt="1544361421671"></p><p>继续跟踪源码chooseServer方法，发现这么一段代码：</p><p> <img src="/posts/460c1130/1525622652849.png" alt="1525622652849"></p><p>我们看看这个rule是谁：</p><p> <img src="/posts/460c1130/1525622699666.png" alt="1525622699666"></p><p>这里的rule默认值是一个<code>RoundRobinRule</code>，看类的介绍：</p><p> <img src="/posts/460c1130/1525622754316.png" alt="1525622754316"></p><p>这不就是轮询的意思嘛。</p><p>到这里，整个负载均衡的流程我们就清楚了。</p><h3 id="4）总结"><a href="#4）总结" class="headerlink" title="4）总结"></a>4）总结</h3><p>SpringCloudRibbon的底层采用了一个拦截器，拦截了RestTemplate发出的请求，对地址做了修改。用一幅图来总结一下：</p><p><img src="/posts/460c1130/image-20210713224724673.png" alt="image-20210713224724673"></p><p>基本流程如下：</p><ul><li>拦截我们的RestTemplate请求<a href="http://userservice/user/1">http://userservice/user/1</a></li><li>RibbonLoadBalancerClient会从请求url中获取服务名称，也就是user-service</li><li>DynamicServerListLoadBalancer根据user-service到eureka拉取服务列表</li><li>eureka返回列表，localhost:8081、localhost:8082</li><li>IRule利用内置负载均衡规则，从列表中选择一个，例如localhost:8081</li><li>RibbonLoadBalancerClient修改请求地址，用localhost:8081替代userservice，得到<a href="http://localhost:8081/user/1，发起真实请求">http://localhost:8081/user/1，发起真实请求</a></li></ul><h2 id="4-3-负载均衡策略"><a href="#4-3-负载均衡策略" class="headerlink" title="4.3.负载均衡策略"></a>4.3.负载均衡策略</h2><h3 id="4-3-1-负载均衡策略"><a href="#4-3-1-负载均衡策略" class="headerlink" title="4.3.1.负载均衡策略"></a>4.3.1.负载均衡策略</h3><p>负载均衡的规则都定义在IRule接口中，而IRule有很多不同的实现类：</p><p><img src="/posts/460c1130/image-20210713225653000.png" alt="image-20210713225653000"></p><p>不同规则的含义如下：</p><div class="table-container"><table><thead><tr><th><strong>内置负载均衡规则类</strong></th><th><strong>规则描述</strong></th></tr></thead><tbody><tr><td>RoundRobinRule</td><td>简单轮询服务列表来选择服务器。它是Ribbon默认的负载均衡规则。</td></tr><tr><td>AvailabilityFilteringRule</td><td>对以下两种服务器进行忽略：   （1）在默认情况下，这台服务器如果3次连接失败，这台服务器就会被设置为“短路”状态。短路状态将持续30秒，如果再次连接失败，短路的持续时间就会几何级地增加。  （2）并发数过高的服务器。如果一个服务器的并发连接数过高，配置了AvailabilityFilteringRule规则的客户端也会将其忽略。并发连接数的上限，可以由客户端的<clientName>.<clientConfigNameSpace>.ActiveConnectionsLimit属性进行配置。</clientConfigNameSpace></clientName></td></tr><tr><td>WeightedResponseTimeRule</td><td>为每一个服务器赋予一个权重值。服务器响应时间越长，这个服务器的权重就越小。这个规则会随机选择服务器，这个权重值会影响服务器的选择。</td></tr><tr><td><strong>ZoneAvoidanceRule</strong></td><td>以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询。</td></tr><tr><td>BestAvailableRule</td><td>忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td>RandomRule</td><td>随机选择一个可用的服务器。</td></tr><tr><td>RetryRule</td><td>重试机制的选择逻辑</td></tr></tbody></table></div><p>默认的实现就是ZoneAvoidanceRule，是一种轮询方案</p><h3 id="4-3-2-自定义负载均衡策略"><a href="#4-3-2-自定义负载均衡策略" class="headerlink" title="4.3.2.自定义负载均衡策略"></a>4.3.2.自定义负载均衡策略</h3><p>通过定义IRule实现可以修改负载均衡规则，有两种方式：</p><ol><li>代码方式：在order-service中的OrderApplication类中，定义一个新的IRule：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>配置文件方式：在order-service的application.yml文件中，添加新的配置也可以修改规则：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span> <span class="comment"># 给某个微服务配置负载均衡规则，这里是userservice服务</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>，一般用默认的负载均衡规则，不做修改。</p></blockquote><h2 id="4-4-饥饿加载"><a href="#4-4-饥饿加载" class="headerlink" title="4.4.饥饿加载"></a>4.4.饥饿加载</h2><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userservice</span></span><br></pre></td></tr></table></figure><h1 id="5-Nacos注册中心"><a href="#5-Nacos注册中心" class="headerlink" title="5.Nacos注册中心"></a>5.Nacos注册中心</h1><p>国内公司一般都推崇阿里巴巴的技术，比如注册中心，SpringCloudAlibaba也推出了一个名为Nacos的注册中心。</p><h2 id="5-1-认识和安装Nacos"><a href="#5-1-认识和安装Nacos" class="headerlink" title="5.1.认识和安装Nacos"></a>5.1.认识和安装Nacos</h2><p><a href="https://nacos.io/">Nacos</a>是阿里巴巴的产品，现在是<a href="https://spring.io/projects/spring-cloud">SpringCloud</a>中的一个组件。相比<a href="https://github.com/Netflix/eureka">Eureka</a>功能更加丰富，在国内受欢迎程度较高。</p><p><img src="/posts/460c1130/image-20210713230444308.png" alt="image-20210713230444308"></p><p>安装方式可以参考课前资料《Nacos安装指南.md》</p><h2 id="5-2-服务注册到nacos"><a href="#5-2-服务注册到nacos" class="headerlink" title="5.2.服务注册到nacos"></a>5.2.服务注册到nacos</h2><p>Nacos是SpringCloudAlibaba的组件，而SpringCloudAlibaba也遵循SpringCloud中定义的服务注册、服务发现规范。因此使用Nacos和使用Eureka对于微服务来说，并没有太大区别。</p><p>主要差异在于：</p><ul><li>依赖不同</li><li>服务地址不同</li></ul><h3 id="1）引入依赖-2"><a href="#1）引入依赖-2" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>在cloud-demo父工程的pom文件中的<code>&lt;dependencyManagement&gt;</code>中引入SpringCloudAlibaba的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在user-service和order-service中的pom文件中引入nacos-discovery依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的依赖。</p></blockquote><h3 id="2）配置nacos地址"><a href="#2）配置nacos地址" class="headerlink" title="2）配置nacos地址"></a>2）配置nacos地址</h3><p>在user-service和order-service的application.yml中添加nacos地址：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：不要忘了注释掉eureka的地址</p></blockquote><h3 id="3）重启"><a href="#3）重启" class="headerlink" title="3）重启"></a>3）重启</h3><p>重启微服务后，登录nacos管理页面，可以看到微服务信息：</p><p><img src="/posts/460c1130/image-20210713231439607.png" alt="image-20210713231439607"></p><h2 id="5-3-服务分级存储模型"><a href="#5-3-服务分级存储模型" class="headerlink" title="5.3.服务分级存储模型"></a>5.3.服务分级存储模型</h2><p>一个<strong>服务</strong>可以有多个<strong>实例</strong>，例如我们的user-service，可以有:</p><ul><li>127.0.0.1:8081</li><li>127.0.0.1:8082</li><li>127.0.0.1:8083</li></ul><p>假如这些实例分布于全国各地的不同机房，例如：</p><ul><li>127.0.0.1:8081，在上海机房</li><li>127.0.0.1:8082，在上海机房</li><li>127.0.0.1:8083，在杭州机房</li></ul><p>Nacos就将同一机房内的实例 划分为一个<strong>集群</strong>。</p><p>也就是说，user-service是服务，一个服务可以包含多个集群，如杭州、上海，每个集群下可以有多个实例，形成分级模型，如图：</p><p><img src="/posts/460c1130/image-20210713232522531.png" alt="image-20210713232522531"></p><p>微服务互相访问时，应该尽可能访问同集群实例，因为本地访问速度更快。当本集群内不可用时，才访问其它集群。例如：</p><p><img src="/posts/460c1130/image-20210713232658928.png" alt="image-20210713232658928"></p><p>杭州机房内的order-service应该优先访问同机房的user-service。</p><h3 id="5-3-1-给user-service配置集群"><a href="#5-3-1-给user-service配置集群" class="headerlink" title="5.3.1.给user-service配置集群"></a>5.3.1.给user-service配置集群</h3><p>修改user-service的application.yml文件，添加集群配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span> <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p>重启两个user-service实例后，我们可以在nacos控制台看到下面结果：</p><p><img src="/posts/460c1130/image-20210713232916215.png" alt="image-20210713232916215"></p><p>我们再次复制一个user-service启动配置，添加属性：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dserver.port=8083 -Dspring.cloud.nacos.discovery.cluster-name=SH</span><br></pre></td></tr></table></figure><p>配置如图所示：</p><p><img src="/posts/460c1130/image-20210713233528982.png" alt="image-20210713233528982"></p><p>启动UserApplication3后再次查看nacos控制台：</p><p><img src="/posts/460c1130/image-20210713233727923.png" alt="image-20210713233727923"></p><h3 id="5-3-2-同集群优先的负载均衡"><a href="#5-3-2-同集群优先的负载均衡" class="headerlink" title="5.3.2.同集群优先的负载均衡"></a>5.3.2.同集群优先的负载均衡</h3><p>默认的<code>ZoneAvoidanceRule</code>并不能实现根据同集群优先来实现负载均衡。</p><p>因此Nacos中提供了一个<code>NacosRule</code>的实现，可以优先从同集群中挑选实例。</p><p>1）给order-service配置集群信息</p><p>修改order-service的application.yml文件，添加集群配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  cloud:</span><br><span class="line">    nacos:</span><br><span class="line">      server-addr: localhost:8848</span><br><span class="line">      discovery:</span><br><span class="line">        cluster-name: HZ <span class="comment"># 集群名称</span></span><br></pre></td></tr></table></figure><p>2）修改负载均衡规则</p><p>修改order-service的application.yml文件，修改负载均衡规则：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">userservice:</span></span><br><span class="line">  <span class="attr">ribbon:</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span> <span class="comment"># 负载均衡规则 </span></span><br></pre></td></tr></table></figure><h2 id="5-4-权重配置"><a href="#5-4-权重配置" class="headerlink" title="5.4.权重配置"></a>5.4.权重配置</h2><p>实际部署中会出现这样的场景：</p><p>服务器设备性能有差异，部分实例所在机器性能较好，另一些较差，我们希望性能好的机器承担更多的用户请求。</p><p>但默认情况下NacosRule是同集群内随机挑选，不会考虑机器的性能问题。</p><p>因此，Nacos提供了权重配置来控制访问频率，权重越大则访问频率越高。</p><p>在nacos控制台，找到user-service的实例列表，点击编辑，即可修改权重：</p><p><img src="/posts/460c1130/image-20210713235133225.png" alt="image-20210713235133225"></p><p>在弹出的编辑窗口，修改权重：</p><p><img src="/posts/460c1130/image-20210713235235219.png" alt="image-20210713235235219"></p><blockquote><p><strong>注意</strong>：如果权重修改为0，则该实例永远不会被访问</p></blockquote><h2 id="5-5-环境隔离"><a href="#5-5-环境隔离" class="headerlink" title="5.5.环境隔离"></a>5.5.环境隔离</h2><p>Nacos提供了namespace来实现环境隔离功能。</p><ul><li>nacos中可以有多个namespace</li><li>namespace下可以有group、service等</li><li>不同namespace之间相互隔离，例如不同namespace的服务互相不可见</li></ul><p><img src="/posts/460c1130/image-20210714000101516.png" alt="image-20210714000101516"></p><h3 id="5-5-1-创建namespace"><a href="#5-5-1-创建namespace" class="headerlink" title="5.5.1.创建namespace"></a>5.5.1.创建namespace</h3><p>默认情况下，所有service、data、group都在同一个namespace，名为public：</p><p><img src="/posts/460c1130/image-20210714000414781.png" alt="image-20210714000414781"></p><p>我们可以点击页面新增按钮，添加一个namespace：</p><p><img src="/posts/460c1130/image-20210714000440143.png" alt="image-20210714000440143"></p><p>然后，填写表单：</p><p><img src="/posts/460c1130/image-20210714000505928.png" alt="image-20210714000505928"></p><p>就能在页面看到一个新的namespace：</p><p><img src="/posts/460c1130/image-20210714000522913.png" alt="image-20210714000522913"></p><h3 id="5-5-2-给微服务配置namespace"><a href="#5-5-2-给微服务配置namespace" class="headerlink" title="5.5.2.给微服务配置namespace"></a>5.5.2.给微服务配置namespace</h3><p>给微服务配置namespace只能通过修改配置来实现。</p><p>例如，修改order-service的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">HZ</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">492a7d5d-237b-46a1-a99a-fa8e98e4b0f9</span> <span class="comment"># 命名空间，填ID</span></span><br></pre></td></tr></table></figure><p>重启order-service后，访问控制台，可以看到下面的结果：</p><p><img src="/posts/460c1130/image-20210714000830703.png" alt="image-20210714000830703"></p><p><img src="/posts/460c1130/image-20210714000837140.png" alt="image-20210714000837140"></p><p>此时访问order-service，因为namespace不同，会导致找不到userservice，控制台会报错：</p><p><img src="/posts/460c1130/image-20210714000941256.png" alt="image-20210714000941256"></p><h2 id="5-6-Nacos与Eureka的区别"><a href="#5-6-Nacos与Eureka的区别" class="headerlink" title="5.6.Nacos与Eureka的区别"></a>5.6.Nacos与Eureka的区别</h2><p>Nacos的服务实例分为两种l类型：</p><ul><li><p>临时实例：如果实例宕机超过一定时间，会从服务列表剔除，默认的类型。</p></li><li><p>非临时实例：如果实例宕机，不会从服务列表剔除，也可以叫永久实例。</p></li></ul><p>配置一个服务实例为永久实例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">ephemeral:</span> <span class="literal">false</span> <span class="comment"># 设置为非临时实例</span></span><br></pre></td></tr></table></figure><p>Nacos和Eureka整体结构类似，服务注册、服务拉取、心跳等待，但是也存在一些差异：</p><p><img src="/posts/460c1130/image-20210714001728017.png" alt="image-20210714001728017"></p><ul><li><p>Nacos与eureka的共同点</p><ul><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ul></li><li><p>Nacos与Eureka的区别</p><ul><li>Nacos支持服务端主动检测提供者状态：临时实例采用心跳模式，非临时实例采用主动检测模式</li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ul></li></ul><h1 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建</h1><h2 id="1-集群结构图"><a href="#1-集群结构图" class="headerlink" title="1.集群结构图"></a>1.集群结构图</h2><p>官方给出的Nacos集群图：</p><p><img src="/posts/460c1130/image-20210409210621117-16716447996231.png" alt="image-20210409210621117"></p><p>其中包含3个nacos节点，然后一个负载均衡器代理3个Nacos。这里负载均衡器可以使用nginx。</p><p>我们计划的集群结构：</p><p><img src="/posts/460c1130/image-20210409211355037-16716447996232.png" alt="image-20210409211355037"></p><p>三个nacos节点的地址：</p><div class="table-container"><table><thead><tr><th>节点</th><th>ip</th><th>port</th></tr></thead><tbody><tr><td>nacos1</td><td>192.168.150.1</td><td>8845</td></tr><tr><td>nacos2</td><td>192.168.150.1</td><td>8846</td></tr><tr><td>nacos3</td><td>192.168.150.1</td><td>8847</td></tr></tbody></table></div><h2 id="2-搭建集群"><a href="#2-搭建集群" class="headerlink" title="2.搭建集群"></a>2.搭建集群</h2><p>搭建集群的基本步骤：</p><ul><li>搭建数据库，初始化数据库表结构</li><li>下载nacos安装包</li><li>配置nacos</li><li>启动nacos集群</li><li>nginx反向代理</li></ul><h3 id="2-1-初始化数据库"><a href="#2-1-初始化数据库" class="headerlink" title="2.1.初始化数据库"></a>2.1.初始化数据库</h3><p>Nacos默认数据存储在内嵌数据库Derby中，不属于生产可用的数据库。</p><p>官方推荐的最佳实践是使用带有主从的高可用数据库集群，主从模式的高可用数据库可以参考<strong>传智教育</strong>的后续高手课程。</p><p>这里我们以单点的数据库为例来讲解。</p><p>首先新建一个数据库，命名为nacos，而后导入下面的SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-2-下载nacos"><a href="#2-2-下载nacos" class="headerlink" title="2.2.下载nacos"></a>2.2.下载nacos</h3><p>nacos在GitHub上有下载地址：<a href="https://github.com/alibaba/nacos/tags，可以选择任意版本下载。">https://github.com/alibaba/nacos/tags，可以选择任意版本下载。</a></p><p>本例中才用1.4.1版本：</p><p><img src="/posts/460c1130/image-20210409212119411-16716447996233.png" alt="image-20210409212119411"></p><h3 id="2-3-配置Nacos"><a href="#2-3-配置Nacos" class="headerlink" title="2.3.配置Nacos"></a>2.3.配置Nacos</h3><p>将这个包解压到任意非中文目录下，如图：</p><p><img src="/posts/460c1130/image-20210402161843337-16716447996234.png" alt="image-20210402161843337"></p><p>目录说明：</p><ul><li>bin：启动脚本</li><li>conf：配置文件</li></ul><p>进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf：</p><p><img src="/posts/460c1130/image-20210409212459292-16716447996235.png" alt="image-20210409212459292"></p><p>然后添加内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:8845</span><br><span class="line">127.0.0.1.8846</span><br><span class="line">127.0.0.1.8847</span><br></pre></td></tr></table></figure><p>然后修改application.properties文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">123</span></span><br></pre></td></tr></table></figure><h3 id="2-4-启动"><a href="#2-4-启动" class="headerlink" title="2.4.启动"></a>2.4.启动</h3><p>将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3</p><p><img src="/posts/460c1130/image-20210409213335538-16716447996236.png" alt="image-20210409213335538"> </p><p>然后分别修改三个文件夹中的application.properties，</p><p>nacos1:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8845</span></span><br></pre></td></tr></table></figure><p>nacos2:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8846</span></span><br></pre></td></tr></table></figure><p>nacos3:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8847</span></span><br></pre></td></tr></table></figure><p>然后分别启动三个nacos节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup.cmd</span><br></pre></td></tr></table></figure><h3 id="2-5-nginx反向代理"><a href="#2-5-nginx反向代理" class="headerlink" title="2.5.nginx反向代理"></a>2.5.nginx反向代理</h3><p>找到课前资料提供的nginx安装包： </p><p><img src="/posts/460c1130/image-20210410103253355-16716447996237.png" alt="image-20210410103253355"> </p><p>解压到任意非中文目录下：</p><p><img src="/posts/460c1130/image-20210410103322874-16716447996238.png" alt="image-20210410103322874"> </p><p>修改conf/nginx.conf文件，配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> nacos-cluster &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8845</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8846</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">127.0.0.1:8847</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> /nacos &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://nacos-cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而后在浏览器访问：<a href="http://localhost/nacos即可。">http://localhost/nacos即可。</a></p><p>代码中application.yml文件配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> <span class="comment"># Nacos地址</span></span><br></pre></td></tr></table></figure><h3 id="2-6-优化"><a href="#2-6-优化" class="headerlink" title="2.6.优化"></a>2.6.优化</h3><ul><li><p>实际部署时，需要给做反向代理的nginx服务器设置一个域名，这样后续如果有服务器迁移nacos的客户端也无需更改配置.</p></li><li><p>Nacos的各个节点应该部署到多个不同服务器，做好容灾和隔离</p></li></ul><h2 id="1-1-统一配置管理"><a href="#1-1-统一配置管理" class="headerlink" title="1.1.统一配置管理"></a>1.1.统一配置管理</h2><p>当微服务部署的实例越来越多，达到数十、数百时，逐个修改微服务配置就会让人抓狂，而且很容易出错。我们需要一种统一配置管理方案，可以集中管理所有实例的配置。</p><p><img src="/posts/460c1130/image-20210714164426792.png" alt="image-20210714164426792"></p><p>Nacos一方面可以将配置集中管理，另一方可以在配置变更时，及时通知微服务，实现配置的热更新。</p><h3 id="1-1-1-在nacos中添加配置文件"><a href="#1-1-1-在nacos中添加配置文件" class="headerlink" title="1.1.1.在nacos中添加配置文件"></a>1.1.1.在nacos中添加配置文件</h3><p>如何在nacos中管理配置呢？</p><p><img src="/posts/460c1130/image-20210714164742924.png" alt="image-20210714164742924"></p><p>然后在弹出的表单中，填写配置信息：</p><p><img src="/posts/460c1130/image-20210714164856664.png" alt="image-20210714164856664"></p><blockquote><p>注意：项目的核心配置，需要热更新的配置才有放到nacos管理的必要。基本不会变更的一些配置还是保存在微服务本地比较好。</p></blockquote><h3 id="1-1-2-从微服务拉取配置"><a href="#1-1-2-从微服务拉取配置" class="headerlink" title="1.1.2.从微服务拉取配置"></a>1.1.2.从微服务拉取配置</h3><p>微服务要拉取nacos中管理的配置，并且与本地的application.yml配置合并，才能完成项目启动。</p><p>但如果尚未读取application.yml，又如何得知nacos地址呢？</p><p>因此spring引入了一种新的配置文件：bootstrap.yaml文件，会在application.yml之前被读取，流程如下：</p><p><img src="/posts/460c1130/L0iFYNF.png" alt="img"></p><p>1）引入nacos-config依赖</p><p>首先，在user-service服务中，引入nacos-config的客户端依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--nacos配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）添加bootstrap.yaml</p><p>然后，在user-service中添加一个bootstrap.yaml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userservice</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span> <span class="comment">#开发环境，这里是dev </span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span> <span class="comment"># 文件后缀名</span></span><br></pre></td></tr></table></figure><p>这里会根据spring.cloud.nacos.server-addr获取nacos地址，再根据</p><p><code>$&#123;spring.application.name&#125;-$&#123;spring.profiles.active&#125;.$&#123;spring.cloud.nacos.config.file-extension&#125;</code>作为文件id，来读取配置。</p><p>本例中，就是去读取<code>userservice-dev.yaml</code>：</p><p><img src="/posts/460c1130/image-20210714170845901.png" alt="image-20210714170845901"></p><p>3）读取nacos配置</p><p>在user-service中的UserController中添加业务逻辑，读取pattern.dateformat配置：</p><p><img src="/posts/460c1130/image-20210714170337448.png" alt="image-20210714170337448"></p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在页面访问，可以看到效果：</p><p><img src="/posts/460c1130/image-20210714170449612.png" alt="image-20210714170449612"></p><h2 id="1-2-配置热更新"><a href="#1-2-配置热更新" class="headerlink" title="1.2.配置热更新"></a>1.2.配置热更新</h2><p>我们最终的目的，是修改nacos中的配置后，微服务中无需重启即可让配置生效，也就是<strong>配置热更新</strong>。</p><p>要实现配置热更新，可以使用两种方式：</p><h3 id="1-2-1-方式一"><a href="#1-2-1-方式一" class="headerlink" title="1.2.1.方式一"></a>1.2.1.方式一</h3><p>在@Value注入的变量所在类上添加注解@RefreshScope：</p><p><img src="/posts/460c1130/image-20210714171036335.png" alt="image-20210714171036335"></p><h3 id="1-2-2-方式二"><a href="#1-2-2-方式二" class="headerlink" title="1.2.2.方式二"></a>1.2.2.方式二</h3><p>使用@ConfigurationProperties注解代替@Value注解。</p><p>在user-service服务中，添加一个类，读取patterrn.dateformat属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;pattern&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PatternProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String dateformat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在UserController中使用这个类代替@Value：</p><p><img src="/posts/460c1130/image-20210714171316124.png" alt="image-20210714171316124"></p><p>完整代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.user.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.config.PatternProperties;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PatternProperties patternProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;now&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">now</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LocalDateTime.now().format(DateTimeFormatter.ofPattern(patternProperties.getDateformat()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-配置共享"><a href="#1-3-配置共享" class="headerlink" title="1.3.配置共享"></a>1.3.配置共享</h2><p>其实微服务启动时，会去nacos读取多个配置文件，例如：</p><ul><li><p><code>[spring.application.name]-[spring.profiles.active].yaml</code>，例如：userservice-dev.yaml</p></li><li><p><code>[spring.application.name].yaml</code>，例如：userservice.yaml</p></li></ul><p>而<code>[spring.application.name].yaml</code>不包含环境，因此可以被多个环境共享。</p><p>下面我们通过案例来测试配置共享</p><h3 id="1）添加一个环境共享配置"><a href="#1）添加一个环境共享配置" class="headerlink" title="1）添加一个环境共享配置"></a>1）添加一个环境共享配置</h3><p>我们在nacos中添加一个userservice.yaml文件：</p><p><img src="/posts/460c1130/image-20210714173233650.png" alt="image-20210714173233650"></p><h3 id="2）在user-service中读取共享配置"><a href="#2）在user-service中读取共享配置" class="headerlink" title="2）在user-service中读取共享配置"></a>2）在user-service中读取共享配置</h3><p>在user-service服务中，修改PatternProperties类，读取新添加的属性：</p><p><img src="/posts/460c1130/image-20210714173324231.png" alt="image-20210714173324231"></p><p>在user-service服务中，修改UserController，添加一个方法：</p><p><img src="/posts/460c1130/image-20210714173721309.png" alt="image-20210714173721309"></p><h3 id="3）运行两个UserApplication，使用不同的profile"><a href="#3）运行两个UserApplication，使用不同的profile" class="headerlink" title="3）运行两个UserApplication，使用不同的profile"></a>3）运行两个UserApplication，使用不同的profile</h3><p>修改UserApplication2这个启动项，改变其profile值：</p><p><img src="/posts/460c1130/image-20210714173538538.png" alt="image-20210714173538538"></p><p><img src="/posts/460c1130/image-20210714173519963.png" alt="image-20210714173519963"></p><p>这样，UserApplication(8081)使用的profile是dev，UserApplication2(8082)使用的profile是test。</p><p>启动UserApplication和UserApplication2</p><p>访问<a href="http://localhost:8081/user/prop，结果：">http://localhost:8081/user/prop，结果：</a></p><p><img src="/posts/460c1130/image-20210714174313344.png" alt="image-20210714174313344"></p><p>访问<a href="http://localhost:8082/user/prop，结果：">http://localhost:8082/user/prop，结果：</a></p><p><img src="/posts/460c1130/image-20210714174424818.png" alt="image-20210714174424818"></p><p>可以看出来，不管是dev，还是test环境，都读取到了envSharedValue这个属性的值。</p><h3 id="4）配置共享的优先级"><a href="#4）配置共享的优先级" class="headerlink" title="4）配置共享的优先级"></a>4）配置共享的优先级</h3><p>当nacos、服务本地同时出现相同属性时，优先级有高低之分：</p><p><img src="/posts/460c1130/image-20210714174623557.png" alt="image-20210714174623557"></p><h2 id="1-4-搭建Nacos集群"><a href="#1-4-搭建Nacos集群" class="headerlink" title="1.4.搭建Nacos集群"></a>1.4.搭建Nacos集群</h2><p>Nacos生产环境下一定要部署为集群状态，部署方式参考课前资料中的文档：</p><p><img src="/posts/460c1130/image-20210714174728042.png" alt="image-20210714174728042"></p><h1 id="2-Feign远程调用"><a href="#2-Feign远程调用" class="headerlink" title="2.Feign远程调用"></a>2.Feign远程调用</h1><p>先来看我们以前利用RestTemplate发起远程调用的代码：</p><p><img src="/posts/460c1130/image-20210714174814204.png" alt="image-20210714174814204"></p><p>存在下面的问题：</p><p>•代码可读性差，编程体验不统一</p><p>•参数复杂URL难以维护</p><p>Feign是一个声明式的http客户端，官方地址：<a href="https://github.com/OpenFeign/feign">https://github.com/OpenFeign/feign</a></p><p>其作用就是帮助我们优雅的实现http请求的发送，解决上面提到的问题。</p><p><img src="/posts/460c1130/image-20210714174918088.png" alt="image-20210714174918088"></p><h2 id="2-1-Feign替代RestTemplate"><a href="#2-1-Feign替代RestTemplate" class="headerlink" title="2.1.Feign替代RestTemplate"></a>2.1.Feign替代RestTemplate</h2><p>Fegin的使用步骤如下：</p><h3 id="1）引入依赖-3"><a href="#1）引入依赖-3" class="headerlink" title="1）引入依赖"></a>1）引入依赖</h3><p>我们在order-service服务的pom文件中引入feign的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）添加注解"><a href="#2）添加注解" class="headerlink" title="2）添加注解"></a>2）添加注解</h3><p>在order-service的启动类添加注解开启Feign的功能：</p><p><img src="/posts/460c1130/image-20210714175102524.png" alt="image-20210714175102524"></p><h3 id="3）编写Feign的客户端"><a href="#3）编写Feign的客户端" class="headerlink" title="3）编写Feign的客户端"></a>3）编写Feign的客户端</h3><p>在order-service中新建一个接口，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.order.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(&quot;userservice&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个客户端主要是基于SpringMVC的注解来声明远程调用的信息，比如：</p><ul><li>服务名称：userservice</li><li>请求方式：GET</li><li>请求路径：/user/{id}</li><li>请求参数：Long id</li><li>返回值类型：User</li></ul><p>这样，Feign就可以帮助我们发送http请求，无需自己使用RestTemplate来发送了。</p><h3 id="4）测试"><a href="#4）测试" class="headerlink" title="4）测试"></a>4）测试</h3><p>修改order-service中的OrderService类中的queryOrderById方法，使用Feign客户端代替RestTemplate：</p><p><img src="/posts/460c1130/image-20210714175415087.png" alt="image-20210714175415087"></p><p>是不是看起来优雅多了。</p><h3 id="5）总结"><a href="#5）总结" class="headerlink" title="5）总结"></a>5）总结</h3><p>使用Feign的步骤：</p><p>① 引入依赖</p><p>② 添加@EnableFeignClients注解</p><p>③ 编写FeignClient接口</p><p>④ 使用FeignClient中定义的方法代替RestTemplate</p><h2 id="2-2-自定义配置"><a href="#2-2-自定义配置" class="headerlink" title="2.2.自定义配置"></a>2.2.自定义配置</h2><p>Feign可以支持很多的自定义配置，如下表所示：</p><div class="table-container"><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td><strong>feign.Logger.Level</strong></td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table></div><p>一般情况下，默认值就能满足我们使用，如果要自定义时，只需要创建自定义的@Bean覆盖默认Bean即可。</p><p>下面以日志为例来演示如何自定义配置。</p><h3 id="2-2-1-配置文件方式"><a href="#2-2-1-配置文件方式" class="headerlink" title="2.2.1.配置文件方式"></a>2.2.1.配置文件方式</h3><p>基于配置文件修改feign的日志级别可以针对单个服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">userservice:</span> <span class="comment"># 针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure><p>也可以针对所有服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span>  </span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span> </span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">FULL</span> <span class="comment">#  日志级别 </span></span><br></pre></td></tr></table></figure><p>而日志的级别分为四种：</p><ul><li>NONE：不记录任何日志信息，这是默认值。</li><li>BASIC：仅记录请求的方法，URL以及响应状态码和执行时间</li><li>HEADERS：在BASIC的基础上，额外记录了请求和响应的头信息</li><li>FULL：记录所有请求和响应的明细，包括头信息、请求体、元数据。</li></ul><h3 id="2-2-2-Java代码方式"><a href="#2-2-2-Java代码方式" class="headerlink" title="2.2.2.Java代码方式"></a>2.2.2.Java代码方式</h3><p>也可以基于Java代码来修改日志级别，先声明一个类，然后声明一个Logger.Level的对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultFeignConfiguration</span>  &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC; <span class="comment">// 日志级别为BASIC</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要<strong>全局生效</strong>，将其放到启动类的@EnableFeignClients这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure><p>如果是<strong>局部生效</strong>，则把它放到对应的@FeignClient这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, configuration = DefaultFeignConfiguration .class)</span> </span><br></pre></td></tr></table></figure><h2 id="2-3-Feign使用优化"><a href="#2-3-Feign使用优化" class="headerlink" title="2.3.Feign使用优化"></a>2.3.Feign使用优化</h2><p>Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括：</p><p>•URLConnection：默认实现，不支持连接池</p><p>•Apache HttpClient ：支持连接池</p><p>•OKHttp：支持连接池</p><p>因此提高Feign的性能主要手段就是使用<strong>连接池</strong>代替默认的URLConnection。</p><p>这里我们用Apache的HttpClient来演示。</p><p>1）引入依赖</p><p>在order-service的pom文件中引入Apache的HttpClient依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--httpClient的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）配置连接池</p><p>在order-service的application.yml中添加配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span> <span class="comment"># default全局的配置</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span> <span class="comment"># 日志级别，BASIC就是基本的请求和响应信息</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对HttpClient的支持</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span> <span class="comment"># 最大的连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span> <span class="comment"># 每个路径的最大连接数</span></span><br></pre></td></tr></table></figure><p>接下来，在FeignClientFactoryBean中的loadBalance方法中打断点：</p><p><img src="/posts/460c1130/image-20210714185925910.png" alt="image-20210714185925910"></p><p>Debug方式启动order-service服务，可以看到这里的client，底层就是Apache HttpClient：</p><p><img src="/posts/460c1130/image-20210714190041542.png" alt="image-20210714190041542"></p><p>总结，Feign的优化：</p><p>1.日志级别尽量用basic</p><p>2.使用HttpClient或OKHttp代替URLConnection</p><p>①  引入feign-httpClient依赖</p><p>②  配置文件开启httpClient功能，设置连接池参数</p><h2 id="2-4-最佳实践"><a href="#2-4-最佳实践" class="headerlink" title="2.4.最佳实践"></a>2.4.最佳实践</h2><p>所谓最近实践，就是使用过程中总结的经验，最好的一种使用方式。</p><p>自习观察可以发现，Feign的客户端与服务提供者的controller代码非常相似：</p><p>feign客户端：</p><p><img src="/posts/460c1130/image-20210714190542730.png" alt="image-20210714190542730"></p><p>UserController：</p><p><img src="/posts/460c1130/image-20210714190528450.png" alt="image-20210714190528450"></p><p>有没有一种办法简化这种重复的代码编写呢？</p><h3 id="2-4-1-继承方式"><a href="#2-4-1-继承方式" class="headerlink" title="2.4.1.继承方式"></a>2.4.1.继承方式</h3><p>一样的代码可以通过继承来共享：</p><p>1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。</p><p>2）Feign客户端和Controller都集成改接口</p><p><img src="/posts/460c1130/image-20210714190640857.png" alt="image-20210714190640857"></p><p>优点：</p><ul><li>简单</li><li>实现了代码共享</li></ul><p>缺点：</p><ul><li><p>服务提供方、服务消费方紧耦合</p></li><li><p>参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解</p></li></ul><h3 id="2-4-2-抽取方式"><a href="#2-4-2-抽取方式" class="headerlink" title="2.4.2.抽取方式"></a>2.4.2.抽取方式</h3><p>将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。</p><p>例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用。</p><p><img src="/posts/460c1130/image-20210714214041796.png" alt="image-20210714214041796"></p><h3 id="2-4-3-实现基于抽取的最佳实践"><a href="#2-4-3-实现基于抽取的最佳实践" class="headerlink" title="2.4.3.实现基于抽取的最佳实践"></a>2.4.3.实现基于抽取的最佳实践</h3><h4 id="1）抽取"><a href="#1）抽取" class="headerlink" title="1）抽取"></a>1）抽取</h4><p>首先创建一个module，命名为feign-api：</p><p><img src="/posts/460c1130/image-20210714204557771.png" alt="image-20210714204557771"></p><p>项目结构：</p><p><img src="/posts/460c1130/image-20210714204656214.png" alt="image-20210714204656214"></p><p>在feign-api中然后引入feign的starter依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中</p><p><img src="/posts/460c1130/image-20210714205221970.png" alt="image-20210714205221970"></p><h4 id="2）在order-service中使用feign-api"><a href="#2）在order-service中使用feign-api" class="headerlink" title="2）在order-service中使用feign-api"></a>2）在order-service中使用feign-api</h4><p>首先，删除order-service中的UserClient、User、DefaultFeignConfiguration等类或接口。</p><p>在order-service的pom文件中中引入feign-api的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.itcast.demo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包</p><h4 id="3）重启测试"><a href="#3）重启测试" class="headerlink" title="3）重启测试"></a>3）重启测试</h4><p>重启后，发现服务报错了：</p><p><img src="/posts/460c1130/image-20210714205623048.png" alt="image-20210714205623048"></p><p>这是因为UserClient现在在cn.itcast.feign.clients包下，</p><p>而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。</p><h4 id="4）解决扫描包问题"><a href="#4）解决扫描包问题" class="headerlink" title="4）解决扫描包问题"></a>4）解决扫描包问题</h4><p>方式一：</p><p>指定Feign应该扫描的包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;)</span></span><br></pre></td></tr></table></figure><p>方式二：</p><p>指定需要加载的Client接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(clients = &#123;UserClient.class&#125;)</span></span><br></pre></td></tr></table></figure><h1 id="3-Gateway服务网关"><a href="#3-Gateway服务网关" class="headerlink" title="3.Gateway服务网关"></a>3.Gateway服务网关</h1><p>Spring Cloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等响应式编程和事件流技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><h2 id="3-1-为什么需要网关"><a href="#3-1-为什么需要网关" class="headerlink" title="3.1.为什么需要网关"></a>3.1.为什么需要网关</h2><p>Gateway网关是我们服务的守门神，所有微服务的统一入口。</p><p>网关的<strong>核心功能特性</strong>：</p><ul><li>请求路由</li><li>权限控制</li><li>限流</li></ul><p>架构图：</p><p><img src="/posts/460c1130/image-20210714210131152.png" alt="image-20210714210131152"></p><p><strong>权限控制</strong>：网关作为微服务入口，需要校验用户是是否有请求资格，如果没有则进行拦截。</p><p><strong>路由和负载均衡</strong>：一切请求都必须先经过gateway，但网关不处理业务，而是根据某种规则，把请求转发到某个微服务，这个过程叫做路由。当然路由的目标服务有多个时，还需要做负载均衡。</p><p><strong>限流</strong>：当请求流量过高时，在网关中按照下流的微服务能够接受的速度来放行请求，避免服务压力过大。</p><p>在SpringCloud中网关的实现包括两种：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。</p><h2 id="3-2-gateway快速入门"><a href="#3-2-gateway快速入门" class="headerlink" title="3.2.gateway快速入门"></a>3.2.gateway快速入门</h2><p>下面，我们就演示下网关的基本路由功能。基本步骤如下：</p><ol><li>创建SpringBoot工程gateway，引入网关依赖</li><li>编写启动类</li><li>编写基础配置和路由规则</li><li>启动网关服务进行测试</li></ol><h3 id="1）创建gateway服务，引入依赖"><a href="#1）创建gateway服务，引入依赖" class="headerlink" title="1）创建gateway服务，引入依赖"></a>1）创建gateway服务，引入依赖</h3><p>创建服务：</p><p><img src="/posts/460c1130/image-20210714210919458.png" alt="image-20210714210919458"></p><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--网关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--nacos服务发现依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2）编写启动类"><a href="#2）编写启动类" class="headerlink" title="2）编写启动类"></a>2）编写启动类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">SpringApplication.run(GatewayApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3）编写基础配置和路由规则"><a href="#3）编写基础配置和路由规则" class="headerlink" title="3）编写基础配置和路由规则"></a>3）编写基础配置和路由规则</h3><p>创建application.yml文件，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment"># 网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment"># 路由id，自定义，只要唯一即可</span></span><br><span class="line">          <span class="comment"># uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://userservice</span> <span class="comment"># 路由的目标地址 lb就是负载均衡，后面跟服务名称</span></span><br><span class="line">          <span class="attr">predicates:</span> <span class="comment"># 路由断言，也就是判断请求是否符合路由规则的条件</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 这个是按照路径匹配，只要以/user/开头就符合要求</span></span><br></pre></td></tr></table></figure><p>我们将符合<code>Path</code> 规则的一切请求，都代理到 <code>uri</code>参数指定的地址。</p><p>本例中，我们将 <code>/user/**</code>开头的请求，代理到<code>lb://userservice</code>，lb是负载均衡，根据服务名拉取服务列表，实现负载均衡。</p><h3 id="4）重启测试"><a href="#4）重启测试" class="headerlink" title="4）重启测试"></a>4）重启测试</h3><p>重启网关，访问<a href="http://localhost:10010/user/1时，符合`/user/**`规则，请求转发到uri：http://userservice/user/1，得到了结果：">http://localhost:10010/user/1时，符合`/user/**`规则，请求转发到uri：http://userservice/user/1，得到了结果：</a></p><p><img src="/posts/460c1130/image-20210714211908341.png" alt="image-20210714211908341"></p><h3 id="5）网关路由的流程图"><a href="#5）网关路由的流程图" class="headerlink" title="5）网关路由的流程图"></a>5）网关路由的流程图</h3><p>整个访问的流程如下：</p><p><img src="/posts/460c1130/image-20210714211742956.png" alt="image-20210714211742956"></p><p>总结：</p><p>网关搭建步骤：</p><ol><li><p>创建项目，引入nacos服务发现和gateway依赖</p></li><li><p>配置application.yml，包括服务基本信息、nacos地址、路由</p></li></ol><p>路由配置包括：</p><ol><li><p>路由id：路由的唯一标示</p></li><li><p>路由目标（uri）：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</p></li><li><p>路由断言（predicates）：判断路由的规则，</p></li><li><p>路由过滤器（filters）：对请求或响应做处理</p></li></ol><p>接下来，就重点来学习路由断言和路由过滤器的详细知识</p><h2 id="3-3-断言工厂"><a href="#3-3-断言工厂" class="headerlink" title="3.3.断言工厂"></a>3.3.断言工厂</h2><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件</p><p>例如Path=/user/**是按照路径匹配，这个规则是由</p><p><code>org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory</code>类来</p><p>处理的，像这样的断言工厂在SpringCloudGateway还有十几个:</p><div class="table-container"><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>After</td><td>是某个时间点后的请求</td><td>-  After=2037-01-20T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Before</td><td>是某个时间点之前的请求</td><td>-  Before=2031-04-13T15:14:47.433+08:00[Asia/Shanghai]</td></tr><tr><td>Between</td><td>是某两个时间点之前的请求</td><td>-  Between=2037-01-20T17:42:47.789-07:00[America/Denver],  2037-01-21T17:42:47.789-07:00[America/Denver]</td></tr><tr><td>Cookie</td><td>请求必须包含某些cookie</td><td>- Cookie=chocolate, ch.p</td></tr><tr><td>Header</td><td>请求必须包含某些header</td><td>- Header=X-Request-Id, \d+</td></tr><tr><td>Host</td><td>请求必须是访问某个host（域名）</td><td>-  Host=<strong>.somehost.org,</strong>.anotherhost.org</td></tr><tr><td>Method</td><td>请求方式必须是指定方式</td><td>- Method=GET,POST</td></tr><tr><td>Path</td><td>请求路径必须符合指定规则</td><td>- Path=/red/{segment},/blue/**</td></tr><tr><td>Query</td><td>请求参数必须包含指定参数</td><td>- Query=name, Jack或者-  Query=name</td></tr><tr><td>RemoteAddr</td><td>请求者的ip必须是指定范围</td><td>- RemoteAddr=192.168.1.1/24</td></tr><tr><td>Weight</td><td>权重处理</td></tr></tbody></table></div><p>我们只需要掌握Path这种路由工程就可以了。</p><h2 id="3-4-过滤器工厂"><a href="#3-4-过滤器工厂" class="headerlink" title="3.4.过滤器工厂"></a>3.4.过滤器工厂</h2><p>GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理：</p><p><img src="/posts/460c1130/image-20210714212312871.png" alt="image-20210714212312871"></p><h3 id="3-4-1-路由过滤器的种类"><a href="#3-4-1-路由过滤器的种类" class="headerlink" title="3.4.1.路由过滤器的种类"></a>3.4.1.路由过滤器的种类</h3><p>Spring提供了31种不同的路由过滤器工厂。例如：</p><div class="table-container"><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>AddRequestHeader</td><td>给当前请求添加一个请求头</td></tr><tr><td>RemoveRequestHeader</td><td>移除请求中的一个请求头</td></tr><tr><td>AddResponseHeader</td><td>给响应结果中添加一个响应头</td></tr><tr><td>RemoveResponseHeader</td><td>从响应结果中移除有一个响应头</td></tr><tr><td>RequestRateLimiter</td><td>限制请求的流量</td></tr></tbody></table></div><h3 id="3-4-2-请求头过滤器"><a href="#3-4-2-请求头过滤器" class="headerlink" title="3.4.2.请求头过滤器"></a>3.4.2.请求头过滤器</h3><p>下面我们以AddRequestHeader 为例来讲解。</p><blockquote><p><strong>需求</strong>：给所有进入userservice的请求添加一个请求头：Truth=itcast is freaking awesome!</p></blockquote><p>只需要修改gateway服务的application.yml文件，添加路由过滤即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span> </span><br><span class="line">        <span class="attr">filters:</span> <span class="comment"># 过滤器</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> <span class="comment"># 添加请求头</span></span><br></pre></td></tr></table></figure><p>当前过滤器写在userservice路由下，因此仅仅对访问userservice的请求有效。</p><h3 id="3-4-3-默认过滤器"><a href="#3-4-3-默认过滤器" class="headerlink" title="3.4.3.默认过滤器"></a>3.4.3.默认过滤器</h3><p>如果要对所有的路由都生效，则可以将过滤器工厂写到default下。格式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> </span><br><span class="line">        <span class="attr">uri:</span> <span class="string">lb://userservice</span> </span><br><span class="line">        <span class="attr">predicates:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/user/**</span></span><br><span class="line">      <span class="attr">default-filters:</span> <span class="comment"># 默认过滤项</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AddRequestHeader=Truth,</span> <span class="string">Itcast</span> <span class="string">is</span> <span class="string">freaking</span> <span class="string">awesome!</span> </span><br></pre></td></tr></table></figure><h3 id="3-4-4-总结"><a href="#3-4-4-总结" class="headerlink" title="3.4.4.总结"></a>3.4.4.总结</h3><p>过滤器的作用是什么？</p><p>① 对路由的请求或响应做加工处理，比如添加请求头</p><p>② 配置在路由下的过滤器只对当前路由的请求生效</p><p>defaultFilters的作用是什么？</p><p>① 对所有路由都生效的过滤器</p><h2 id="3-5-全局过滤器"><a href="#3-5-全局过滤器" class="headerlink" title="3.5.全局过滤器"></a>3.5.全局过滤器</h2><p>上一节学习的过滤器，网关提供了31种，但每一种过滤器的作用都是固定的。如果我们希望拦截请求，做自己的业务逻辑则没办法实现。</p><h3 id="3-5-1-全局过滤器作用"><a href="#3-5-1-全局过滤器作用" class="headerlink" title="3.5.1.全局过滤器作用"></a>3.5.1.全局过滤器作用</h3><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的；而GlobalFilter的逻辑需要自己写代码实现。</p><p>定义方式是实现GlobalFilter接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  处理当前请求，有必要的话通过&#123;<span class="doctag">@link</span> GatewayFilterChain&#125;将请求交给下一个过滤器处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exchange 请求上下文，里面可以获取Request、Response等信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain 用来把请求委托给下一个过滤器 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> Mono&lt;Void&gt;&#125; 返回标示当前过滤器业务结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在filter中编写自定义逻辑，可以实现下列功能：</p><ul><li>登录状态判断</li><li>权限校验</li><li>请求限流等</li></ul><h3 id="3-5-2-自定义全局过滤器"><a href="#3-5-2-自定义全局过滤器" class="headerlink" title="3.5.2.自定义全局过滤器"></a>3.5.2.自定义全局过滤器</h3><p>需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件：</p><ul><li><p>参数中是否有authorization，</p></li><li><p>authorization参数值是否为admin</p></li></ul><p>如果同时满足则放行，否则拦截</p><p>实现：</p><p>在gateway中定义一个过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.gateway.filters;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Order(-1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeFilter</span> <span class="keyword">implements</span> <span class="title class_">GlobalFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求参数</span></span><br><span class="line">        MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams();</span><br><span class="line">        <span class="comment">// 2.获取authorization参数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">auth</span> <span class="operator">=</span> params.getFirst(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.校验</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(auth)) &#123;</span><br><span class="line">            <span class="comment">// 放行</span></span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.拦截</span></span><br><span class="line">        <span class="comment">// 4.1.禁止访问，设置状态码</span></span><br><span class="line">        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);</span><br><span class="line">        <span class="comment">// 4.2.结束处理</span></span><br><span class="line">        <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-3-过滤器执行顺序"><a href="#3-5-3-过滤器执行顺序" class="headerlink" title="3.5.3.过滤器执行顺序"></a>3.5.3.过滤器执行顺序</h3><p>请求进入网关会碰到三类过滤器：当前路由的过滤器、DefaultFilter、GlobalFilter</p><p>请求路由后，会将当前路由过滤器和DefaultFilter、GlobalFilter，合并到一个过滤器链（集合）中，排序后依次执行每个过滤器：</p><p><img src="/posts/460c1130/image-20210714214228409.png" alt="image-20210714214228409"></p><p>排序的规则是什么呢？</p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong>。</li><li>GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。</li><li>当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。</li></ul><p>详细内容，可以查看源码：</p><p><code>org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator#getFilters()</code>方法是先加载defaultFilters，然后再加载某个route的filters，然后合并。</p><p><code>org.springframework.cloud.gateway.handler.FilteringWebHandler#handle()</code>方法会加载全局过滤器，与前面的过滤器合并后根据order排序，组织过滤器链</p><h2 id="3-6-跨域问题"><a href="#3-6-跨域问题" class="headerlink" title="3.6.跨域问题"></a>3.6.跨域问题</h2><h3 id="3-6-1-什么是跨域问题"><a href="#3-6-1-什么是跨域问题" class="headerlink" title="3.6.1.什么是跨域问题"></a>3.6.1.什么是跨域问题</h3><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li><p>域名不同： www.taobao.com 和 www.taobao.org 和 www.jd.com 和 miaosha.jd.com</p></li><li><p>域名相同，端口不同：localhost:8080和localhost8081</p></li></ul><p>跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题</p><p>解决方案：CORS，这个以前应该学习过，这里不再赘述了。不知道的小伙伴可以查看<a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><h3 id="3-6-2-模拟跨域问题"><a href="#3-6-2-模拟跨域问题" class="headerlink" title="3.6.2.模拟跨域问题"></a>3.6.2.模拟跨域问题</h3><p>找到课前资料的页面文件：</p><p><img src="/posts/460c1130/image-20210714215713563.png" alt="image-20210714215713563"></p><p>放入tomcat或者nginx这样的web服务器中，启动并访问。</p><p>可以在浏览器控制台看到下面的错误：</p><p><img src="/posts/460c1130/image-20210714215832675.png" alt="image-20210714215832675"></p><p>从localhost:8090访问localhost:10010，端口不同，显然是跨域的请求。</p><h3 id="3-6-3-解决跨域问题"><a href="#3-6-3-解决跨域问题" class="headerlink" title="3.6.3.解决跨域问题"></a>3.6.3.解决跨域问题</h3><p>在gateway服务的application.yml文件中，添加下面的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment"># 。。。</span></span><br><span class="line">      <span class="attr">globalcors:</span> <span class="comment"># 全局的跨域处理</span></span><br><span class="line">        <span class="attr">add-to-simple-url-handler-mapping:</span> <span class="literal">true</span> <span class="comment"># 解决options请求被拦截问题</span></span><br><span class="line">        <span class="attr">corsConfigurations:</span></span><br><span class="line">          <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span></span><br><span class="line">            <span class="attr">allowedOrigins:</span> <span class="comment"># 允许哪些网站的跨域请求 </span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;http://localhost:8090&quot;</span></span><br><span class="line">            <span class="attr">allowedMethods:</span> <span class="comment"># 允许的跨域ajax的请求方式</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;GET&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;POST&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;PUT&quot;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&quot;OPTIONS&quot;</span></span><br><span class="line">            <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span> <span class="comment"># 允许在请求中携带的头信息</span></span><br><span class="line">            <span class="attr">allowCredentials:</span> <span class="literal">true</span> <span class="comment"># 是否允许携带cookie</span></span><br><span class="line">            <span class="attr">maxAge:</span> <span class="number">360000</span> <span class="comment"># 这次跨域检测的有效期</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper</title>
      <link href="/posts/b829b66a.html"/>
      <url>/posts/b829b66a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第-1-章-Zookeeper入门"><a href="#第-1-章-Zookeeper入门" class="headerlink" title="第 1 章  Zookeeper入门"></a>第 <strong>1</strong> 章  Zookeeper入门</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a><strong>1.1</strong> 概述</h2><p>Zookeeper 是一个开源的分布式的，为分布式应用提供协调服务的 Apache 项目。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/posts/b7e144d1.html"/>
      <url>/posts/b7e144d1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wzll</title>
      <link href="/posts/386a367.html"/>
      <url>/posts/386a367.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="/posts/386a367/image-20221117095742741.png" alt="image-20221117095742741"></p><p>超几何分布&amp;二项分布&amp;破风分布</p><p><img src="/posts/386a367/image-20221117100210811.png" alt="image-20221117100210811"></p><p>连续性分布函数</p><p><img src="/posts/386a367/image-20221117110754155.png" alt="image-20221117110754155"></p><p><img src="/posts/386a367/image-20221115214030337.png" alt="image-20221115214030337"></p><p><img src="/posts/386a367/image-20221117150000269.png" alt="image-20221117150000269">  </p><p><img src="/posts/386a367/image-20221117151359763.png" alt="image-20221117151359763"></p><p><img src="/posts/386a367/image-20221117152728590.png" alt="image-20221117152728590"></p><p><img src="/posts/386a367/image-20221117155652415.png" alt=" "></p><p><img src="/posts/386a367/image-20221117160127604.png" alt="image-20221117160127604"></p><p><img src="/posts/386a367/image-20221117160234452.png" alt="image-20221117160234452"></p><p><img src="/posts/386a367/image-20221117160243639.png" alt="image-20221117160243639"></p><hr><p><img src="/posts/386a367/image-20221117160518179.png" alt="image-20221117160518179"></p><p><img src="/posts/386a367/image-20221117161045514.png" alt="image-20221117161045514"></p><p><img src="/posts/386a367/image-20221117202143320.png" alt="image-20221117202143320"></p><p>$ git remote add origin <a href="https://gitee.com/zltrouvaille/hosekeeper.git">https://gitee.com/zltrouvaille/hosekeeper.git</a></p><p>$ git pull</p><p>$ git push -u -f origin master<img src="/posts/386a367/Home.png" alt="Home"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>netcomp</title>
      <link href="/posts/f8c08006.html"/>
      <url>/posts/f8c08006.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>单指令流&amp;数据流</li></ul><h2 id="计算机硬件的基本组成"><a href="#计算机硬件的基本组成" class="headerlink" title="计算机硬件的基本组成"></a>计算机硬件的基本组成</h2><p><img src="/posts/f8c08006/image-20221108103959226.png" alt="image-20221108103959226"></p><p><img src="/posts/f8c08006/image-20221103101736653.png" alt="image-20221103101736653"></p><p><img src="/posts/f8c08006/image-20221103101853691.png" alt="image-20221103101853691"></p><p>​                                                                                              外设</p><ul><li>M:存储中某存储单元（存储体</li><li>M(MAR)取存储单元中的数据</li><li>OP(IR): 取操作码</li><li>Ad(IR): 取地址吗</li><li><p><img src="/posts/f8c08006/image-20221103104632546.png" alt="image-20221103104632546"></p></li><li><p>指令周期的不同：判断他MDR是放在IR还是ACC</p></li></ul><p>编译程序&amp; 解释程序</p><h2 id="计算机系统的层次结构"><a href="#计算机系统的层次结构" class="headerlink" title="计算机系统的层次结构"></a>计算机系统的层次结构</h2><p><img src="/posts/f8c08006/image-20221103110823381.png" alt="image-20221103110823381"></p><p><img src="/posts/f8c08006/image-20221103110926438.png" alt="image-20221103110926438"></p><p>.exe是机器语言的</p><ul><li><p>MAR 为32位，MDR为8位：总容量： 2^32 * 8 bit = 4GB</p></li><li><p>脉冲信号：站到的频率 ，1/cpu时钟周期主频越高越快</p></li><li>CPI：一条指令所需要的时钟周期也不一样</li><li>IPS: 每秒执行多少条指令</li><li>FLOPS ： 每秒执行多少次浮点运算</li><li>K千，M百万，G十亿，T万亿（速率</li><li><img src="/posts/f8c08006/image-20221103160033401.png" alt="image-20221103160033401"></li></ul><p><img src="/posts/f8c08006/image-20221103160729208.png" alt="image-20221103160729208"></p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><ul><li><p>进制的转化</p><p><img src="/posts/f8c08006/image-20221103162655650.png" alt="image-20221103162655650"></p></li></ul><p>小数乘法无法取整就是</p><h2 id="BCD码"><a href="#BCD码" class="headerlink" title="BCD码"></a>BCD码</h2><h3 id="8421码：0000-1001"><a href="#8421码：0000-1001" class="headerlink" title="8421码：0000-1001"></a>8421码：0000-1001</h3><ul><li>每四位就是十进制位</li><li>如果结果没在定义中（10-15）（1010-10010 ）</li><li>就需要加上0110修正</li></ul><h3 id="余三码是8421码加上0011"><a href="#余三码是8421码加上0011" class="headerlink" title="余三码是8421码加上0011"></a>余三码是8421码加上0011</h3><ul><li>无权吗</li></ul><h3 id="2421码："><a href="#2421码：" class="headerlink" title="2421码："></a>2421码：</h3><ul><li>改变权值定义</li><li>0-4最高位是0    5-9最高位是1 </li><li><img src="/posts/f8c08006/image-20221103181749051.png" alt></li></ul><p><img src="/posts/f8c08006/image-20221103181956609.png" alt="image-20221103181956609"></p><p><img src="/posts/f8c08006/image-20221103185811586.png" alt="image-20221103185811586"></p><h2 id="定点数"><a href="#定点数" class="headerlink" title="定点数"></a>定点数</h2><ul><li>无符号数：整个机器字长的全部二进制位均为数值位（只能是整数</li><li>有符号（最高位符号位<ul><li><img src="/posts/f8c08006/image-20221103190623241.png" alt="image-20221103190623241"></li><li>定点整数    </li><li>定点小数<ul><li>-0 的补码就是原码的补码零只有一种表现形式</li><li>1，0000000表示-2^7(比源码多表示一个树)</li></ul></li></ul></li><li>移码只能表示整数（符号位取反，比较大小</li></ul><p><img src="/posts/f8c08006/image-20221103191814073.png" alt="image-20221103191814073"></p><h2 id="原码补码移码的作用"><a href="#原码补码移码的作用" class="headerlink" title="原码补码移码的作用"></a>原码补码移码的作用</h2><ul><li>模运算的性质<ul><li>x = qm + r</li></ul></li><li>8it的  看作模2^8</li><li>减法看作加法运算（|a| + b = mod) 这里 -a 和 加  b相同<ul><li>mod - |a|  =  b   </li><li><img src="/posts/f8c08006/image-20221103193718874.png" alt="image-20221103193718874">  </li></ul></li></ul><h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><ul><li>长整数变短整数（直接截断</li><li>short —- unsigned short （ 直接不变给 但是   无符号和有符号   </li><li>都是无符号就扩展</li></ul><h2 id="大小端模式"><a href="#大小端模式" class="headerlink" title="大小端模式"></a>大小端模式</h2><ul><li>大端方式：适合人阅读</li><li>小端方式：便于机器处理： 他要从小加</li></ul><h2 id="边界对齐"><a href="#边界对齐" class="headerlink" title="边界对齐"></a>边界对齐</h2><ul><li>访问只需要一次访存</li><li><p><img src="/posts/f8c08006/image-20221103204114217.png" alt="image-20221103204114217"></p><h2 id="电路的基本原理"><a href="#电路的基本原理" class="headerlink" title="电路的基本原理"></a>电路的基本原理</h2></li></ul><p>​    </p><p><img src="/posts/f8c08006/image-20221104085147541.png" alt="image-20221104085147541"></p><p><img src="/posts/f8c08006/image-20221104085222157.png" alt="image-20221104085222157"></p><p><img src="/posts/f8c08006/image-20221104085238083.png" alt="image-20221104085238083"> </p><ul><li>加法器的运算<ul><li>一位加法器</li><li><img src="/posts/f8c08006/image-20221104085657528.png" alt="image-20221104085657528"></li><li>串行加法器</li><li><img src="/posts/f8c08006/image-20221104090325427.png" alt="image-20221104090325427"></li><li>串行仅为的并行加法器</li><li><img src="/posts/f8c08006/image-20221104090304187.png" alt="image-20221104090304187"></li></ul></li></ul><h1 id="第三章存储器"><a href="#第三章存储器" class="headerlink" title="第三章存储器"></a>第三章存储器</h1><p><img src="/posts/f8c08006/image-20221104092637923.png" alt="image-20221104092637923"></p><ul><li>主存到辅存：解决了主存不够的</li><li><p>Cache-主存：解决了速度不匹配的问题</p></li><li><p>三种存储方式</p></li></ul><ol><li><p><strong>读写任何一个存储单元所需的时间都一样，与存在的物理位置没关系</strong></p></li><li><p><strong>顺序存储，（磁带），时间—-位置</strong></p></li><li><strong>直接存取存储器，前两者的特点都有，先选取所在的区域，在按顺序存取</strong></li><li><strong>块表存储器： 按照内容查找</strong></li></ol><ul><li>信息的可更改性质：<ul><li>读写</li><li>只读（也有写的，麻烦</li></ul></li><li>可保存行：<ul><li>易失性存储器</li><li>非容易失去  </li></ul></li><li><p>信息读取</p><ul><li>破坏性读取：DRAM（需要重写</li><li>非破坏性：SRAM</li></ul></li><li><p>存储器的性能指标</p></li></ul><ol><li>存取容量：存储字数*字长</li><li>单位成本：美味价格=总成本/总容量</li><li>存储速度：数据传输率=数据的宽度/存储周期<ol><li>存储周期：<img src="/posts/f8c08006/image-20221104172443877.png" alt="image-20221104172443877"></li></ol></li></ol><p><img src="/posts/f8c08006/image-20221104172615409.png" alt="image-20221104172615409"></p><h2 id="主存储器的基本组成："><a href="#主存储器的基本组成：" class="headerlink" title="主存储器的基本组成："></a>主存储器的基本组成：</h2><h3 id="动态RAM"><a href="#动态RAM" class="headerlink" title="动态RAM"></a>动态RAM</h3><ul><li>MOS: 可以用电控制的： 电压加到一定的值  就通了   半导体</li><li>给电容充电</li></ul><p><strong>MOS</strong></p><p><img src="/posts/f8c08006/image-20221104173251450.png" alt="image-20221104173251450"></p><p><img src="/posts/f8c08006/image-20221104174123726.png" alt="image-20221104174123726"></p><p><img src="/posts/f8c08006/image-20221104174503669.png" alt="image-20221104174503669"></p><p>常见的描述： 8K<em> 8位  即：2^13</em>8bit</p><ul><li>寻址（算数左移两位</li><li><p><img src="/posts/f8c08006/image-20221104192401838.png" alt="image-20221104192401838"></p></li><li><p>DRAM:（上一小节就是DRAM</p><ul><li>栅极电容 </li><li>复用技术：<img src="/posts/f8c08006/image-20221104200427177.png" alt="image-20221104200427177"></li><li>刷新：</li><li><img src="/posts/f8c08006/image-20221104200044664.png" alt="image-20221104200044664"></li></ul></li></ul><h3 id="（双稳态触发器，静态RAM"><a href="#（双稳态触发器，静态RAM" class="headerlink" title="（双稳态触发器，静态RAM"></a>（双稳态触发器，静态RAM</h3><ul><li><img src="/posts/f8c08006/image-20221104194831545.png" alt="image-20221104194831545"> </li></ul><p>DRAM&amp;SRAM</p><p><img src="/posts/f8c08006/image-20221104200501980.png" alt="image-20221104200501980"></p><h2 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h2><span class="p center cyan h1">ROM</span><div class="tabs" id="bios同样是主存"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bios同样是主存-1">同样是主存</button></li><li class="tab"><button type="button" data-href="#bios同样是主存-2">了解各种ROM</button></li><li class="tab"><button type="button" data-href="#bios同样是主存-3">总结</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bios同样是主存-1"><p>也是主存，同样分配地址，虽然是ROM但是开机用</p><p><img src="/posts/f8c08006/image-20221104210513073.png" alt="image-20221104210513073"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bios同样是主存-2"><p><strong>了解各种的ROM</strong></p><p><strong><img src="/posts/f8c08006/image-20221104204554426.png" alt="image-20221104204554426"></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bios同样是主存-3"><p><strong>本届回顾</strong></p><p><strong><img src="/posts/f8c08006/image-20221104210600178.png" alt="image-20221104210600178"></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="主存和cpu-的-连接"><a href="#主存和cpu-的-连接" class="headerlink" title="主存和cpu 的 连接"></a>主存和cpu 的 连接</h2><span class="p center cyan h1">主存和cpu 的 连接</span><div class="tabs" id="主存和cpu-的-连接"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#主存和cpu-的-连接-1">字扩展</button></li><li class="tab"><button type="button" data-href="#主存和cpu-的-连接-2">字位同时扩展</button></li><li class="tab"><button type="button" data-href="#主存和cpu-的-连接-3">补充译码器</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="主存和cpu-的-连接-1"><p><strong>利用了非门（地址是连续的</strong></p><p><strong>n条线</strong> 就会有2^n个选片信号</p><p><img src="/posts/f8c08006/image-20221104213336084.png" alt="image-20221104213336084"></p><p><strong>因为译码器全是1 全是0  </strong></p><p><img src="/posts/f8c08006/image-20221104214445196.png" alt="image-20221104214445196"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主存和cpu-的-连接-2"><p><img src="/posts/f8c08006/image-20221104220150887.png" alt="image-20221104220150887"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="主存和cpu-的-连接-3"><p><img src="/posts/f8c08006/image-20221104220931967.png" alt="image-20221104220931967"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="双端口RAM"><a href="#双端口RAM" class="headerlink" title="双端口RAM"></a>双端口RAM</h2><p><img src="/posts/f8c08006/image-20221105132301794.png" alt="image-20221105132301794"></p><ol><li>需要两组完全独立的数据线</li><li>可以遇到的4种情况<ol><li>可以<ol><li>两个端口同时对不同的地址单元存取数据</li><li>对同一地址读数据</li></ol></li><li>不可以i：<ol><li>同时写同一地址</li><li>同一地址一个读一个写</li></ol></li></ol></li></ol><h2 id="多体并行存储器"><a href="#多体并行存储器" class="headerlink" title="多体并行存储器"></a>多体并行存储器</h2><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">高位交叉编址</button></li><li class="tab"><button type="button" data-href="#test4-2">地位交叉编址</button></li><li class="tab"><button type="button" data-href="#test4-3">总</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>高位代表的是选择哪个内存条、</strong></p><p><img src="/posts/f8c08006/image-20221105133510907.png" alt="image-20221105133510907"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>低位选哪个内存条</strong></p><p><img src="/posts/f8c08006/image-20221105133518929.png" alt="image-20221105133518929"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p>都有各自的读写控制，地址寄存器，数据寄存器</p><p><strong><img src="/posts/f8c08006/image-20221105143139384.png" alt="image-20221105133554337"></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="多模块存储器"><a href="#多模块存储器" class="headerlink" title="多模块存储器"></a>多模块存储器</h2><p><img src="/posts/f8c08006/image-20221105143011718.png" alt="image-20221105143011718"></p><p>只有一个读写控制，地址寄存器，数据寄存器</p><p>只能每次读m个字</p><p>速度也是 一个周期可以读取4个r</p><p><img src="/posts/f8c08006/image-20221108102805262.png" alt="image-20221108102805262"></p><h2 id="Cache（就是利用的SRAM"><a href="#Cache（就是利用的SRAM" class="headerlink" title="Cache（就是利用的SRAM"></a>Cache（就是利用的SRAM</h2><ul><li>就是哪一段频繁访问就把他放在Cache里面    </li></ul><ul><li><p>局部性原理（放在Cache原理</p><ul><li><p>空间局部性：</p><ul><li>很可能使用实用信息的临近信息</li></ul></li><li><p>时间局部性：</p><ul><li>在最近的未来要使用的信息可能是现在正在使用的信息</li></ul></li></ul></li><li><p>命中率：</p><ul><li>CPU</li></ul></li></ul><p><img src="/posts/f8c08006/image-20221106144811330.png" alt="image-20221106144811330"></p><p>​                             </p><ul><li>例题：<ul><li><img src="/posts/f8c08006/image-20221106145003769.png" alt="image-20221106145003769"></li></ul></li></ul><p><strong>将主存的存储空间分块，Cache和主存是以块位单位交换的</strong></p><p>主存地址可拆分为（主存块号，块内地址）的形式</p><h2 id="主存和Cache的映射关系"><a href="#主存和Cache的映射关系" class="headerlink" title="主存和Cache的映射关系"></a>主存和Cache的映射关系</h2><p><img src="/posts/f8c08006/image-20221106150615434.png" alt="image-20221106150615434"></p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">全相联映射</button></li><li class="tab"><button type="button" data-href="#test4-2">直接映射</button></li><li class="tab"><button type="button" data-href="#test4-3">组相联映射</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><img src="/posts/f8c08006/image-20221107160448085.png" alt="image-20221107160448085"></p><ol><li><p>主存地址的前22位，对比Cache中所块的表记</p></li><li><p>若匹配有效位位1，则Cache命中，访问块内地址为001110的单元</p></li><li>若未命中或有效位=0，则正常访问主存</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><img src="/posts/f8c08006/image-20221107160508324.png" alt="image-20221107160508324">只能放在固定位置 </p><p>位置=主存号%Cache总快数</p><p>2^n</p><p>末尾的n可以省略</p><ol><li>根据后n为确定Cache行</li><li>若主存号的前19为与Cache表示匹配且有效位=1，则Cache命中，访问块内地址位001110的单元</li><li>若未命中或者有效位等于0，则正常访问主存</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><img src="/posts/f8c08006/image-20221107160524852.png" alt="image-20221107160524852"></p><ol><li>根据主存号的后2位确定所属分祝号</li><li>若前20位与分组中某个表记匹配且有效位=1</li><li>则Cache命中，访问块内地址位001110的单元</li><li>有点集中</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Cache的替换问题"><a href="#Cache的替换问题" class="headerlink" title="Cache的替换问题"></a>Cache的替换问题</h2><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">随机算法</button></li><li class="tab"><button type="button" data-href="#test4-2">先进先出算法</button></li><li class="tab"><button type="button" data-href="#test4-3">近期最少使用的算法(LRU</button></li><li class="tab"><button type="button" data-href="#test4-4">最不经常使用算法（LFU</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>如果位置满了，随机选择一个位置替换，命中率低</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong><img src="/posts/f8c08006/image-20221106154835780.png" alt="image-20221106154835780">   </strong></p><p><img src="/posts/f8c08006/image-20221106155133411.png" alt="image-20221106155133411"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-4"><ol><li>访问一次，计数器加一次</li><li>替换最少的</li><li>有相同的计数器FIFO（先进先出的算法替换</li><li>不如l’RU，有可能增长的非常大，不好替换</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Cache写策略"><a href="#Cache写策略" class="headerlink" title="Cache写策略"></a>Cache写策略</h2><p><img src="/posts/f8c08006/image-20221106160840891.png" alt="image-20221106160840891"></p><h2 id="页式存储器"><a href="#页式存储器" class="headerlink" title="页式存储器"></a>页式存储器</h2><p>比如一个应用程序很大，可以给他分好多，不必要在连续的地方存储，灵活</p><ul><li>虚地址&amp;实际地址</li></ul><p><img src="/posts/f8c08006/image-20221106163423565.png" alt="image-20221106163423565"></p><ul><li>逻辑页号—-主存块号</li></ul><p><img src="/posts/f8c08006/image-20221106163504348.png" alt="image-20221106163504348"></p><ul><li>地址变换过程</li></ul><p><img src="/posts/f8c08006/image-20221106164600723.png" alt="image-20221106164600723"></p><ul><li>总结</li><li><p><img src="/posts/f8c08006/image-20221106165151916.png" alt="image-20221106165151916"></p></li><li><p>存储层次</p></li><li><img src="/posts/f8c08006/image-20221106170656926.png" alt="image-20221106170656926"></li></ul><h3 id="段式虚拟存储器"><a href="#段式虚拟存储器" class="headerlink" title="段式虚拟存储器"></a>段式虚拟存储器</h3><ul><li>拆分功能模块</li><li>对应的分段</li></ul><h1 id="第七章-指令操作"><a href="#第七章-指令操作" class="headerlink" title="第七章 指令操作"></a>第七章 指令操作</h1><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">零地址指令</button></li><li class="tab"><button type="button" data-href="#test4-2">一地址指令</button></li><li class="tab"><button type="button" data-href="#test4-3">二地址指令</button></li><li class="tab"><button type="button" data-href="#test4-4">三地址指令</button></li><li class="tab"><button type="button" data-href="#test4-5">四12地址指令</button></li><li class="tab"><button type="button" data-href="#test4-6">分类</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>全是指令的地址</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>三个是指令地址，其他是源操作数</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>二个是指令地址，其他是源操作数</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-4"><p><strong>一个是指令地址，其他是源操作数</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-5"><p><strong>一个是指令地址，其他是源操作数</strong></p><p><img src="/posts/f8c08006/image-20221107103929973.png" alt="image-20221107103929973"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-6"><p><strong><img src="/posts/f8c08006/image-20221107104038807.png" alt="image-20221107104038807"></strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="指令-按指令长度分类"><a href="#指令-按指令长度分类" class="headerlink" title="指令-按指令长度分类"></a>指令-按指令长度分类</h2><p>指令字长：一条指令的总长度（可能会变</p><p>机器字长：cpu进行一次整数运算所能处理的二进制数据的位数（通常 和ALU直接相关</p><p>存储字长：一个存储单元中的二进制代码数（和MDR位数相同</p><p>半字长指令，单字长指令，双字长指令，</p><ul><li><p>分类】</p><ul><li>按指令是否可变<ul><li>定长指令子结构</li><li>变长指令字结构：指令长度不同</li></ul></li><li>按操作码是否可变分 类：<ul><li>定长</li><li>可变</li></ul></li></ul></li><li><p>按操作类型分类（指令分类</p></li><li><p><img src="/posts/f8c08006/image-20221107105358052.png" alt="image-20221107105358052"></p></li></ul><h2 id="扩展操作码"><a href="#扩展操作码" class="headerlink" title="扩展操作码"></a>扩展操作码</h2><p>给下面留着，</p><p>自定义长  </p><p>举例<img src="/posts/f8c08006/image-20221107110907980.png" alt="image-20221107110907980"></p><p>不允许短码是长吗的前缀</p><h2 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h2><p><img src="/posts/f8c08006/image-20221107160639395.png" alt="image-20221107160639395"></p><h2 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h2><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">基址寻址</button></li><li class="tab"><button type="button" data-href="#test4-2">变址寄存器</button></li><li class="tab"><button type="button" data-href="#test4-3">基址&变址复合寻址</button></li><li class="tab"><button type="button" data-href="#test4-4">相对寻址</button></li><li class="tab"><button type="button" data-href="#test4-5">堆栈寻址</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>面向操作系统</strong></p><p><strong><img src="/posts/f8c08006/image-20221107161823936.png" alt="image-20221107161823936"></strong></p><p>我们程序员不能修改，由操作系统工作</p><p>编制浮动扩大</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>面向用户</strong></p><p><img src="/posts/f8c08006/image-20221107162419493.png" alt="image-20221107162419493"> </p><p>可以由用户修改，IX偏移量自己修改，基 不能    地址</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><img src="/posts/f8c08006/image-20221107165731309.png" alt="image-20221107165731309"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-4"><p><img src="/posts/f8c08006/image-20221107165510006.png" alt="image-20221107165510006"> <strong>一个是指令地址，其他是源操作数</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-5"><p>硬堆栈：寄存器</p><p><img src="/posts/f8c08006/image-20221107181901778.png" alt="image-20221107181901778"></p><p>软堆栈：内存里</p><p>访存一次</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="指令系统-1"><a href="#指令系统-1" class="headerlink" title="指令系统"></a>指令系统</h2><p><img src="/posts/f8c08006/image-20221107183106529.png" alt="image-20221107183106529"></p><p>CLSC :</p><ul><li>库，复杂</li></ul><p>RISC：</p><ul><li>简单</li></ul><h1 id="第五章CPU的功能和基本结构"><a href="#第五章CPU的功能和基本结构" class="headerlink" title="第五章CPU的功能和基本结构"></a>第五章CPU的功能和基本结构</h1><ol><li>指令控制，操作控制，时间控制，数据加工，中断处理（特殊请求，异常情况先进性处理，保留本次的进程，加载完在进行 。 </li></ol><h2 id="运算器的基本结构"><a href="#运算器的基本结构" class="headerlink" title="运算器的基本结构"></a>运算器的基本结构</h2><ol><li>MUX选择</li></ol><p><img src="/posts/f8c08006/image-20221108094032832.png" alt="image-20221108094032832"></p><ol><li>内部总线的方式(结构简单，容易实现，但传输存在较多的冲突，性能较低吧 )</li></ol><p><img src="/posts/f8c08006/image-20221108100009458.png" alt="image-20221108100009458">     </p><ul><li>控制器的基本结构</li><li><img src="/posts/f8c08006/image-20221108100758296.png" alt="image-20221108100758296"></li></ul><p><img src="/posts/f8c08006/image-20221108100942666.png" alt="image-20221108100942666"> </p><p><img src="/posts/f8c08006/image-20221108101046983.png" alt="image-20221108101046983"></p><p>总结 </p><h2 id="指令周期"><a href="#指令周期" class="headerlink" title="指令周期"></a>指令周期</h2><p>指令周期：从主存中每次取一条并执行，全部时间</p><p>指令周期用若干机器周期表示，机器周期又叫CPU周期</p><p>一个机器周期又包含若干时钟周期 （节拍，T周期，cpu时钟周期，CPU最基本基本单位</p><p><img src="/posts/f8c08006/image-20221108101503749.png" alt="image-20221108101503749"> </p><p><strong>间接寻址就需要多一个周期</strong></p><p><img src="/posts/f8c08006/image-20221108101912597.png" alt="image-20221108101912597"></p><p><strong>不同指令的指令周期不同</strong></p><p><img src="/posts/f8c08006/image-20221108103057706.png" alt="image-20221108103057706"></p><p><strong>指令周期流程</strong></p><p><img src="/posts/f8c08006/image-20221108103359864.png" alt="image-20221108103359864">   </p><p><strong>取值周期</strong></p><p><img src="/posts/f8c08006/image-20221108103903849.png" alt="image-20221108103903849"></p><p><strong>间址周期</strong></p><p><img src="/posts/f8c08006/image-20221108105534044.png" alt="image-20221108105534044"></p><p>单指令周期：</p><p>相同的指令周期，对于那些较短的，会浪费</p><p>多指令周期：可选用不同的时钟周期完成（需要复杂的硬件设计</p><p>流水线方案：</p><p>每一个时钟周期启动一条指令，尽量让多条指令同时运行，各自处不同的执行步骤中，指令之间并行执行</p><h2 id="指令流水"><a href="#指令流水" class="headerlink" title="指令流水"></a>指令流水</h2><ul><li>定义： 每个阶段用到的硬件不一样，</li><li>执行凡是：<ul><li>顺序执行</li><li>一次重叠方式</li><li>二次执行方式</li></ul></li></ul><p><img src="/posts/f8c08006/image-20221108183753732.png" alt="image-20221108183753732"></p><ul><li></li><li><p>流水线的表示方法：</p><ul><li><img src="/posts/f8c08006/image-20221108184159159.png" alt="image-20221108184159159"></li></ul></li><li></li><li><p>流水线的性能指标：</p><ul><li>吞吐率</li></ul><p><img src="/posts/f8c08006/image-20221108183836535.png" alt="image-20221108183836535"></p><ul><li>加速比</li><li><p><img src="/posts/f8c08006/image-20221108183927171.png" alt="image-20221108183927171"></p></li><li><p>效率：流水线设备利用率</p><ul><li>面积的占比   极限是1</li></ul></li></ul></li></ul><h2 id="机器周期的设置"><a href="#机器周期的设置" class="headerlink" title="机器周期的设置"></a>机器周期的设置</h2><p>imm：立即寻码</p><p><img src="/posts/f8c08006/image-20221109091904744.png" alt="image-20221109091904744"></p><h3 id="影响流水的因素"><a href="#影响流水的因素" class="headerlink" title="影响流水的因素"></a>影响流水的因素</h3><ol><li>结构相关（资源冲突<ol><li><img src="/posts/f8c08006/image-20221109092046029.png" alt="image-20221109092046029"></li></ol></li><li>数据冲突：<ol><li><img src="/posts/f8c08006/image-20221109092147254.png" alt="image-20221109092147254"></li></ol></li><li>控制相关：<ol><li><img src="/posts/f8c08006/image-20221109092310332.png" alt="image-20221109092310332"></li></ol></li></ol><h1 id="第六章系统总线"><a href="#第六章系统总线" class="headerlink" title="第六章系统总线"></a>第六章系统总线</h1><h2 id="总线概述"><a href="#总线概述" class="headerlink" title="总线概述"></a>总线概述</h2><ul><li>基本概念：</li><li><img src="/posts/f8c08006/image-20221117203757201.png" alt="image-20221117203757201"></li><li>分时共享的公共细心得传递 </li><li>按照数据传输的方式：串行和并行</li><li>由于干扰问题，速度不一定比串行快</li></ul><p><img src="/posts/f8c08006/image-20221109102332601.png" alt="image-20221109102332601"></p><ul><li>按总线的功能分类：<ul><li>片内总线：<ul><li>cpu芯片内部寄存器与寄存器之间，寄存器与ALU之间得公共连接线</li></ul></li><li>系统总线<img src="/posts/f8c08006/image-20221109102713696.png" alt="image-20221109102713696"></li><li>系统总线的结构：<ul><li>单总线结构：<ul><li><img src="/posts/f8c08006/image-20221117204604273.png" alt="image-20221117204604273"></li></ul></li><li>双总线结构：<ul><li><img src="/posts/f8c08006/image-20221117204711329.png" alt="image-20221117204711329"></li><li><img src="/posts/f8c08006/image-20221117204840969.png" alt="image-20221117204840969"></li></ul></li></ul></li></ul></li></ul><p>总结：</p><p><img src="/posts/f8c08006/image-20221117204901594.png" alt="image-20221117204901594"></p><h2 id="总线的性能指标"><a href="#总线的性能指标" class="headerlink" title="总线的性能指标"></a>总线的性能指标</h2><p>​       <img src="/posts/f8c08006/image-20221117210511101.png" alt="image-20221117210511101"></p><p><img src="/posts/f8c08006/image-20221117210646498.png" alt="image-20221117210646498"> </p><p><img src="/posts/f8c08006/image-20221117210932429.png" alt="image-20221117210932429"></p><p><img src="/posts/f8c08006/image-20221117211551781.png" alt="image-20221117211551781"></p><h2 id="总线的四个阶段"><a href="#总线的四个阶段" class="headerlink" title="总线的四个阶段"></a>总线的四个阶段</h2><p><img src="/posts/f8c08006/image-20221117215436816.png" alt="image-20221117215436816"></p><ul><li>同步通信<img src="/posts/f8c08006/image-20221117215406648.png" alt="image-20221117215406648"><img src="/posts/f8c08006/image-20221117215859765.png" alt="image-20221117215859765"></li><li>异步通信<img src="/posts/f8c08006/image-20221117215932493.png" alt="image-20221117215932493"><img src="/posts/f8c08006/image-20221117215748456.png" alt="image-20221117215748456"></li><li>半同步通信<ul><li><img src="/posts/f8c08006/image-20221117220121804.png" alt="image-20221117220121804"></li></ul></li><li>分离式通信<ul><li><img src="/posts/f8c08006/image-20221117220251688.png" alt="image-20221117220251688"></li></ul></li></ul><p><img src="/posts/f8c08006/image-20221117220412201.png" alt="image-20221117220412201"></p><h1 id="输入和输出系统"><a href="#输入和输出系统" class="headerlink" title="输入和输出系统"></a>输入和输出系统</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><img src="/posts/f8c08006/image-20221118102509755.png" alt="image-20221118102509755"></p><p><img src="/posts/f8c08006/image-20221118103604952.png" alt="image-20221118103604952"></p><p><img src="/posts/f8c08006/image-20221118102732886.png" alt="image-20221118102732886"></p><p><img src="/posts/f8c08006/image-20221118103004204.png" alt="image-20221118103004204"></p><p>通道： </p><p><img src="/posts/f8c08006/image-20221118103508154.png" alt=" "></p><h2 id="输出设备"><a href="#输出设备" class="headerlink" title="输出设备"></a>输出设备</h2><p><strong><img src="/posts/f8c08006/image-20221118110205520.png" alt="image-20221118110205520"> </strong></p><p><img src="/posts/f8c08006/image-20221118112226080.png" alt="image-20221118112226080"></p><p><img src="/posts/f8c08006/image-20221118112627203.png" alt="image-20221118112627203"></p><ol><li>程序查询方式：<ol><li><img src="/posts/f8c08006/image-20221118114034157.png" alt="image-20221118114034157"></li></ol></li></ol><p><img src="/posts/f8c08006/image-20221118114236510.png" alt="image-20221118114236510">  </p><h2 id="DMA控制器"><a href="#DMA控制器" class="headerlink" title="DMA控制器"></a>DMA控制器</h2><p><img src="/posts/f8c08006/image-20221118123944560.png" alt="image-20221118123944560"></p><p><img src="/posts/f8c08006/image-20221118124753953.png" alt="image-20221118124753953"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>network</title>
      <link href="/posts/608487bc.html"/>
      <url>/posts/608487bc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><ul><li><p>源自网络层的数据可靠的传输到相邻的节点的目标网络层。其主要目的是加强物理层出书原始比特流的功能，将物理层提供可能出错的物理连接改造成逻辑上无差错的数据链路</p></li><li><p>功能：</p></li></ul><ol><li>无确认无连接，无确认无连接，有确认面向连接的服务</li></ol><h2 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h2><ul><li>最大传送单元：MTU</li><li>作用帧定界<ul><li>帧首部-数据部分（ip数据报）从v -帧尾部分</li></ul></li></ul><ol><li>字符计数法</li><li>字符填充法<ol><li>SOH-EOT</li><li>在前面添加ESC</li></ol></li><li>零比特填充法：<ol><li>01111110—-01111110</li><li>5“1“1”0“</li></ol></li><li>违规编法：<ol><li>曼彻斯特编码：<ol><li>起高高—-终低低</li></ol></li></ol></li></ol><h2 id="差错检测-冗余编码"><a href="#差错检测-冗余编码" class="headerlink" title="差错检测(冗余编码)"></a>差错检测(冗余编码)</h2><ol><li>奇偶校验：<ol><li>在前面添加校验码  （鸡：如果是4，添加1）、</li></ol></li><li>CRC循环冗余码（检测<ol><li>用同一个除数</li><li>FCS帧检验序列/冗余码</li><li>同0异1（接近于1）还是不可靠传输</li></ol></li><li>海明码：（纠错—-单比特错<ol><li>2^r&gt;=k+r+1 r(冗余码)<ol><li>校验码：1，2，4，8..</li><li>数据插空</li><li>放在2^( i-1)</li></ol></li><li>二进制位和他们异或的结果就是实际值</li><li><img src="/posts/608487bc/image-20221103183419746-16675499197721.png" alt="image-20221103183419746"></li></ol></li></ol><h2 id="流量控制-可靠传输"><a href="#流量控制-可靠传输" class="headerlink" title="流量控制(可靠传输)"></a>流量控制(可靠传输)</h2><ul><li>点对点的（确认帧</li></ul><ol><li><p>停止-等待协议</p><ol><li>=1</li></ol></li><li><p>滑动窗口协议：</p><ol><li><p>退后n帧协议（GBN</p><ol><li>发送窗口&gt;1，接受窗口=1</li></ol></li><li><p>选择重传协议（SR</p><p>1 &gt;1,&gt;1</p></li></ol></li></ol><ul><li><p>ACK确认帧</p></li><li><p>停止等待</p><ul><li>超时计时器（自动重传</li><li>保留副本（重发用</li><li>数据帧和确认帧必须编号 </li></ul></li><li>信道利用率太低(l/c)/t<ul><li>l:t内发送的l数据</li><li>c发送数据传输率</li><li>t发送周期</li></ul></li></ul><h2 id="介质访问控制"><a href="#介质访问控制" class="headerlink" title="介质访问控制"></a>介质访问控制</h2><p>点对点：广域网</p><p>广播式链路：局域网</p><pre><code>1. 总线型1. 星型</code></pre><p>静态划分信道：</p><ol><li>多路复用：不发生冲突<ol><li>信道划分访问控制（复用 </li><li>FDM：频分多路复用</li><li>TDM：时分多路复用（STDM 统计时分复用</li><li>WDM：波分多路复用（光的</li><li>CMD：码分多路复用<ol><li>多个站点同时发送数据的时候，要求各个站点芯片序列相互正交</li><li>先行相加</li><li>合并的数据和源站规格化内积</li></ol></li></ol></li><li>动态分 配信道<ol><li>轮询访问：<ol><li>两者结合：不发生冲突</li><li>特殊格式的MAC控制帧</li><li>同一时刻只有一个节点独占信道</li><li>令牌开销，等待延迟，单点故障（会断</li></ol></li><li>随机访问 (MAC协议）：发生冲突<ol><li>ALOHA协议：<ol><li>不见同信道，不按时键槽发送，随时重发</li></ol></li><li>时隙ALOHA协议：<ol><li>控制想发就发的随意性</li></ol></li><li>CSMA协议：（载波监听多路访问协议<ol><li>cs：载波建通/监听：发送数据时要检测总线上是否有其他计算机在发送数据</li><li>MA：多点接入，表示许多计算机一多点接入的方式连接到一根总线上</li><li>坚持思想：如果忙就一直监听，直到空闲马上传输，若果碰撞等待一定的时间在监听</li></ol></li><li>非坚持CSMA：<ol><li>如果忙就等待一定的时间再进行监听</li></ol></li><li>p-坚持CSMA：<ol><li>空闲则p概率直接传输，不必等待：概率1-p等待下一个时间操在传输</li><li>忙则的等待随机事件在监听</li><li>缺点：发生冲后还是坚持把数据帧发送完</li></ol></li><li>CSMA/CA：无线局域网<ol><li>检测空闲：发送RTS 包括发送端地址，接收端地址，下分数据持续发送时间等信息，信道忙着等待</li><li>接收到响应CTS才能发送，同时预约信道告知其他站点自己要穿多久数据</li><li>接收端收到数据后，将用CRC检验数据是否正确，正确则响应ACK</li><li>若收到ACK进行，，没有： 则一直冲产值规定重发次为止16次（采用二进制指数退避算法确定堆积的推迟时间）</li><li>RTS/CTS帧   解决隐蔽站的问题  </li></ol></li><li>CSMA/CD:<ol><li>载波侦听，每个站检测总线上是否有其他计算机在发送</li><li>总线型网络</li><li>碰撞检测 ：（半双工网络）</li></ol></li></ol></li></ol></li></ol><h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><ul><li>信道划分介质访问控制</li><li>多路复用<ul><li>网络负载重： 公平，共享信道效率高</li><li>轻： 共享信道效率低</li></ul></li><li>随机MAC协议<ul><li>重：产生冲突</li><li>轻：共享信道效率高</li></ul></li></ul><p>IEEE 802：指定标准</p><p>​    802.3 csma/cd</p><p>​    802.5 :令牌环</p><p>​    802.11 ：无线局域网</p><p>​    </p><p>LLC: 负责识别网络层协议，进行封装，为网络层服务</p><p>MAC：数据帧封装和装卸，帧的寻址和识别，接受和发送，链路的管理，差错控制。屏蔽了不同差异</p><h3 id="以太网"><a href="#以太网" class="headerlink" title="以太网"></a>以太网</h3><ul><li>使用CSMA/CD（载波监听多路访问及冲突检测）</li></ul><h2 id="HDLC-amp-PPP协议"><a href="#HDLC-amp-PPP协议" class="headerlink" title="HDLC&amp;PPP协议"></a>HDLC&amp;PPP协议</h2><ul><li><p>只支持全双工协议</p><ul><li>lcp:身份验证功能</li><li><img src="/posts/608487bc/image-20221102211948049-16675499197722.png" alt="image-20221102211948049"></li></ul></li><li><p>帧格式</p></li><li>面向字节的</li><li><img src="/posts/608487bc/image-20221102212007167-16675499197733.png" alt="image-20221102212007167"></li></ul><p><img src="/posts/608487bc/image-20221102212512315-16675499197734.png" alt="image-20221102212512315"></p><p><img src="/posts/608487bc/image-20221102212536844-16675499197735.png" alt="image-20221102212536844"></p><h1 id="第四章-网络层"><a href="#第四章-网络层" class="headerlink" title="第四章  网络层"></a>第四章  网络层</h1><p> ·</p>]]></content>
      
      
      
        <tags>
            
            <tag> 专业课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javasript</title>
      <link href="/posts/javasript.html"/>
      <url>/posts/javasript.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="BOM"><a href="#BOM" class="headerlink" title="## BOM"></a>## BOM</h1><ul><li>Math.floor(Math.random) <ul><li>四舍五入小数部分</li></ul></li><li>prompt<ul><li>屏幕上显示输入框</li></ul></li></ul><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><ul><li><p>location.href()获取地址</p><ul><li>location.replave()不可以后退的跳转</li><li>location.assign() 可以后退的跳转</li><li>reload：刷新</li></ul></li><li><p>navigator对象：</p><ul><li>userAgent：他的操作系统</li></ul></li><li><p>window.onload: 在所有的dom全都加载完了运行了</p></li><li>onresize： 改变窗口大小运行函数</li><li>window.scroll : 滚动距离</li></ul><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="获取元素的方式"><a href="#获取元素的方式" class="headerlink" title="获取元素的方式"></a>获取元素的方式</h2><ul><li>document.head   获取head</li><li>document.body   获取body</li><li>document.documenteElement</li><li>.getElememtbyid 只会遇到第一个</li><li>getEbycls     是一个伪数组</li><li>items.innerHTML 重新赋值</li><li>getElementsByTagName:接受所有的li</li><li>element.getElementsByTagName(‘标签名’)</li><li>document.getElementsByClassName(‘’)：根据类名返回</li><li>querySlevtor获取第一个盒子的选择器</li><li></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySlector</span>(<span class="string">&#x27;.inner&#x27;</span>);</span><br><span class="line">inner.<span class="property">innerHTML</span> _- <span class="string">&#x27;&lt;a href=&quot;#&quot;&gt;百度&lt;/a&gt;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> create = <span class="variable language_">document</span>.<span class="title function_">querySlector</span>(<span class="string">&#x27;.create&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> a  = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">create.<span class="title function_">appendChild</span>(a);</span><br><span class="line"></span><br><span class="line">arr.<span class="property">push</span> (添加元素)更快</span><br><span class="line">arr.<span class="title function_">jooin</span>(<span class="string">&#x27;&#x27;</span>): 把数组转化为字符串</span><br></pre></td></tr></table></figure><h2 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h2><ul><li>element.属性值(内置的)</li><li>element.getAttribute(属性值)自己添加的</li><li>element.setAttribute(class比较特殊就是写的class)</li></ul><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><ol><li>元素节点</li><li>文字节点</li><li>console.dir(打印)</li></ol><ul><li>获取父节点<ul><li>元素.parentNode(亲爸爸） 如果找不到就返回为空;</li></ul></li><li>获取子节点<ul><li>元素.childNodes获取所有的孩子节点（文本和元素等等</li><li>获取所有的子元素节点<ul><li>元素.children</li><li>元素.firstElementChild</li><li>元素.lastElementChild IE 9 以上才能用</li><li>children[0] children[lenth-1] </li></ul></li></ul></li><li>寻找兄弟节点<ul><li>div.nextSibling（文本和元素等等 下一个</li><li>div.previousSibling（文本和元素等等 上一个</li><li>div.nextElementSibling(下一个元素节点)</li><li>div.previousElementSibling(上一个元素节点) </li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = element;</span><br><span class="line"><span class="keyword">while</span> ( el = el.<span class="property">nextSibling</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(el.<span class="property">nodeType</span> === <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> el;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li><p>创建节点：    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>添加节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>.<span class="title function_">q</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">ul.<span class="title function_">appendChild</span>(li);<span class="comment">//详单与push</span></span><br></pre></td></tr></table></figure></li><li><p>指定元素的前面</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul.<span class="title function_">insertBefore</span>(节点,ul.<span class="property">children</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ul.<span class="property">removeChild</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>: <span class="string">&#x27;sss&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">12</span> ,</span><br><span class="line">    <span class="attr">se</span>: <span class="string">&#x27;nan&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        方法体</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Object</span>();创建新对象<span class="comment">//obj.对应的属性名</span></span><br></pre></td></tr></table></figure><h2 id="事件的高级事件"><a href="#事件的高级事件" class="headerlink" title="事件的高级事件"></a>事件的高级事件</h2><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><p>function fn() {</p><p>}fn();</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"> &#123;&#125;</span>))()<span class="comment">//不需要调用立即执行</span></span><br></pre></td></tr></table></figure><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(函数)方便使用</span><br><span class="line">$(div)获取的jQuery对象                               </span><br></pre></td></tr></table></figure><p>相互转换 </p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascipt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaweb</title>
      <link href="/posts/javaweb.html"/>
      <url>/posts/javaweb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>World wide web 万维网</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><ul><li>数据库：文件夹</li><li>表：文件</li><li>数据</li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>​                                    ——结构化查询语言</p><ul><li>可以操作所有语言关系型数据库</li><li>每一种数据库操作方式存在不一样的地方</li></ul><ol><li>格式</li></ol><ul><li>不区分大小写</li><li>注释格式—加空格或#多行注释/**/</li></ul><h2 id="DDl"><a href="#DDl" class="headerlink" title="DDl"></a>DDl</h2><h3 id="操作数据库"><a href="#操作数据库" class="headerlink" title="操作数据库"></a>操作数据库</h3><ul><li>CRUD</li></ul><ol><li><p>c(Create): </p></li><li><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2></li><li><p>R(Retrieve): 查询调查所有数据库名称</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">show</span> <span class="keyword">create</span> database  文件夹名字</span><br><span class="line"><span class="number">2.</span> <span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> db1(如果不存在就创建)</span><br><span class="line"><span class="number">3.</span> <span class="keyword">show</span> databases(产看所有的数据库)</span><br><span class="line"><span class="number">4.</span> <span class="keyword">create</span> database db3 <span class="type">character</span> <span class="keyword">set</span> gbk;创建字符集为gbk的</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> <span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> db4 <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>   1.alter database 数据库名称 character set 字符集名称</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">drop</span> database db3;</span><br><span class="line"><span class="number">2.</span> <span class="keyword">drop</span> database if <span class="keyword">exists</span> dab4;(判断是否存在，然后删除)</span><br></pre></td></tr></table></figure><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">select</span> database(); <span class="operator">-</span>查询正字使用的数据库</span><br><span class="line"><span class="number">2.</span> use db1<span class="comment">---使用数据库</span></span><br></pre></td></tr></table></figure><h3 id="操作表"><a href="#操作表" class="headerlink" title="操作表"></a>操作表</h3><ol><li><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2></li></ol>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="operator">*</span> <span class="keyword">show</span> tables<span class="comment">----查询所有表的名称。</span></span><br><span class="line"><span class="operator">*</span> <span class="keyword">desc</span> 表名。<span class="comment">---查询表的结构</span></span><br></pre></td></tr></table></figure><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span> <span class="type">int</span> : 整数类型 <span class="operator">*</span> age <span class="type">int</span>，</span><br><span class="line"><span class="operator">*</span> <span class="keyword">double</span> : 小数类型 <span class="operator">*</span> score <span class="keyword">double</span>(<span class="number">5</span>,<span class="number">2</span>)<span class="number">999.99</span></span><br><span class="line"><span class="operator">*</span> <span class="type">date</span> : 日期，只包含年月日</span><br><span class="line"><span class="operator">*</span> datetime : 还包括HH:MM:SS</span><br><span class="line"><span class="operator">*</span> t imestamp如果不赋值 或者赋值<span class="keyword">null</span>择本机时间</span><br></pre></td></tr></table></figure><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span> 复制<span class="keyword">create</span> <span class="keyword">table</span> bd1 <span class="keyword">like</span> db2表;</span><br><span class="line"><span class="operator">*</span> <span class="keyword">drop</span> <span class="keyword">table</span> 表名字</span><br><span class="line"><span class="operator">*</span> <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表明</span><br></pre></td></tr></table></figure><h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名<span class="comment">---新的表名 rename to 新的表名字；</span></span><br><span class="line">   </span><br><span class="line">​<span class="comment">--------修改表名</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="keyword">alter</span><span class="comment">---更改变动的意思</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span>  表名 chareacter <span class="keyword">set</span> 字符集名称；修改字符集名称 </span><br><span class="line">   </span><br><span class="line">​<span class="comment">--------修改字符集</span></span><br><span class="line">     </span><br><span class="line">   </span><br><span class="line">​<span class="comment">--------添加列</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表明     change 列名 新列名   新数据类型</span><br><span class="line">   </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表明 modify 类名 新数据类型</span><br><span class="line">   </span><br><span class="line">​<span class="comment">--------修改名称类类型 </span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">alter</span> <span class="keyword">table</span> 表明 <span class="keyword">drop</span> 列名</span><br><span class="line">   </span><br><span class="line">​<span class="comment">---------删除列</span></span><br></pre></td></tr></table></figure><h2 id="客户端图形化工具"><a href="#客户端图形化工具" class="headerlink" title="客户端图形化工具"></a>客户端图形化工具</h2><h2 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h2><ol><li><h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h2></li><li><p>```SQL</p><pre><code>insert into 表名(列名1，列名2...列名n)  values(值1，值2...值n)；或者insert into 表名 values(相同类型数据，相同类型数据，相同类型数据，不知道的写null)；</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 查询</span><br><span class="line"></span><br><span class="line">```SQL</span><br><span class="line">select * from 表名</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;删除id为<span class="number">1</span>的记录</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student ;全部删除<span class="operator">/</span><span class="operator">/</span>费时，在内部自己一条一条删除</span><br><span class="line"></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> student 删除表，在创建名字一样的，效率更高</span><br></pre></td></tr></table></figure><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p>updata 表名 set 列名1 = 值1，列名2 = 值二 where id = n+； </p><p>如果不加条件 所有的信息都会被改</p><h2 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h2><p>查询表中的记录</p><p>select * from 表名；</p><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><ol><li>多个字段的查询</li></ol><ul><li>select 字段名，字段名2from表名；可以用* 代表 </li></ul><ol><li>去除重复</li></ol><ul><li>distinct</li></ul><ol><li>计算列</li></ol><ul><li>四则运算</li><li>ifnull(表达式1，表达式2)： 表达式一判断是否为null表达式二替换值，null参与计算，计算结果都为null</li></ul><ol><li>as：as可以省略</li><li></li></ol><p>select name,age from student   —— 查询的列表name，age</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">*</span> <span class="keyword">select</span> <span class="keyword">distinct</span> address student</span><br><span class="line"><span class="operator">*</span> <span class="keyword">select</span> distict address , name   student <span class="operator">/</span><span class="operator">/</span> address和name 的值必须都相等  </span><br><span class="line"><span class="operator">*</span> <span class="keyword">select</span> name,math,english,math <span class="operator">+</span> english <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">*</span> <span class="keyword">select</span> name,math,english,math <span class="operator">+</span> ifnull(english,<span class="number">0</span>),<span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">*</span> <span class="keyword">select</span> name,math,english,math <span class="operator">+</span> ifnull(english,<span class="number">0</span>) <span class="keyword">As</span> 总分, <span class="keyword">from</span> student;<span class="operator">/</span><span class="operator">/</span> 可以不写<span class="keyword">as</span>但是要加上一个或者多个空格</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">where</span>子句后跟的 </span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> studetn <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">22</span> <span class="keyword">or</span> age <span class="operator">=</span><span class="number">104</span>; <span class="comment">---- 查询值等于这些的</span></span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">IN</span> (<span class="number">12</span>,<span class="number">3</span>,<span class="number">4</span>);      <span class="operator">-</span></span><br><span class="line">  <span class="operator">*</span> <span class="keyword">null</span>不能用等号判断       </span><br><span class="line"></span><br><span class="line"><span class="operator">*</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> English <span class="keyword">is</span> <span class="keyword">null</span>；查询等于<span class="keyword">null</span>的</span><br><span class="line">  <span class="operator">*</span> <span class="keyword">not</span> <span class="keyword">is</span> <span class="keyword">null</span> 不等于<span class="keyword">null</span>的</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> <span class="keyword">like</span></span><br><span class="line"><span class="comment">/*查询人姓名*/</span></span><br><span class="line"><span class="operator">*</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;ma%&#x27;</span>;<span class="comment">-- 姓马的</span></span><br><span class="line"><span class="string">&#x27;_化%&#x27;</span><span class="comment">-- 第二个字是化的人</span></span><br><span class="line"><span class="string">&#x27;%马%&#x27;</span><span class="comment">-- 名字中包含马的人</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student wher name <span class="keyword">like</span> <span class="string">&#x27;___&#x27;</span>; <span class="comment">-- 三个下划线三个字</span></span><br></pre></td></tr></table></figure><ol><li>查询语句</li></ol><ul><li><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3></li><li><p>语法 order by 句子</p><ul><li>order by 排序字段  拍寻方式，排序字段  拍寻方式，。。。；</li></ul></li><li>排序方式：<ul><li>asc： 默认 升序</li><li>desc：降序 </li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> 默认的<span class="comment">-- 升序</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">desc</span><span class="comment">-- 降序;</span></span><br></pre></td></tr></table></figure><h3 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h3><ul><li><p>将一列的纵向计算</p></li><li><p>cout:  计算个数</p></li><li><p>min：计算最小值</p><ul><li>select max(math) from student;</li></ul></li><li><p>max：计算最大值</p></li><li><p>sum：计算和</p></li><li><p>select sum(math) from student;</p></li><li><p>avg计算平均值</p><ul><li>select avg (math) from student ;</li></ul><p>计算时 排除null的 值</p></li></ul><ol><li>如果有null     </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(ifnull(english,<span class="number">0</span>)) <span class="keyword">from</span> student</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student 所有的</span><br></pre></td></tr></table></figure><h3 id="分组语句"><a href="#分组语句" class="headerlink" title="分组语句"></a>分组语句</h3><ul><li>group by 分组字段<ul><li>分组之后查询的字段：分组或者聚合函数</li><li><ul><li>select sex, AVG(math) from student group by  sex;  </li><li>SELECT score , AVG(age),COUNT(age) FROM student WHERE age &gt; 13 GROUP BY score;  </li></ul></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> score , <span class="built_in">AVG</span>(age),<span class="built_in">COUNT</span>(age) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">13</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> score <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(age) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> score , <span class="built_in">AVG</span>(age),<span class="built_in">COUNT</span>(age)  人数 <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">13</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> score <span class="keyword">HAVING</span> 人数 <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 要大于13 的数据分组 分组的人数要大于1才显示</span></span><br></pre></td></tr></table></figure><p>where和having的区别</p><ul><li>where在分组之前限定，如果不满足田间不参与分组， having在分组之后限定，不满足条件不会被查询出来</li></ul><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ol><li>limit 开始索引， 每页查询的条数</li></ol><ul><li>select * from student limit 0,3;—-第一页</li><li>select * from student limit 3,3;—第二页</li></ul><ol><li><p>公式 ： 开始的索引 = (当前的页码 - 1) * 每页显示的条数</p></li><li><p>limit 是  mysQL分页是一个方言</p></li></ol><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li>对表中的数据进行限定，保证数据的正确性</li><li>分类：<ol><li>主键约束：primary 可以</li><li>非空约束 ： 农田null</li><li>唯一约束：unique</li><li>外键约束：foreign key</li></ol></li></ul><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><ol><li><p>创建表时创建约束</p><pre><code>    <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span># 创建表时添加</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> stu IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">NAME <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify name <span class="type">varchar</span>(<span class="number">20</span>); <span class="comment">-- 清除这种约束</span></span><br><span class="line"></span><br><span class="line"># 创建后添加</span><br><span class="line"><span class="number">2.</span><span class="keyword">alter</span> <span class="keyword">table</span>  stu modify naem <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure></code></pre></li></ol><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><ul><li>unique</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span># 创建表时添加唯一约束</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> suu (</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">phone <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">UNIQUE</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> suu <span class="keyword">DROP</span> INDEX phone;<span class="comment">-- 删除约束 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> suu modify phone <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line"><span class="number">2.</span> # 在表创建后添加约束(存在相同的数 就不能添加了)</span><br></pre></td></tr></table></figure><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><p>primary key</p><ol><li><p>注意</p><ol><li>含义：非空且唯一</li><li>一个表只能有一个字段为主键</li><li>唯一标识</li></ol></li><li><p>在创建表是，添加主键约束</p></li></ol>   <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> stu (id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">                 name <span class="type">varchar</span>(<span class="number">20</span>));</span><br><span class="line">                 </span><br></pre></td></tr></table></figure><ol><li>```sql<br>alter table stu modify id int primary key;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">删除主键</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">alter table stu drop primary key  </span><br></pre></td></tr></table></figure></li></ol><h2 id="自动增长："><a href="#自动增长：" class="headerlink" title="自动增长："></a>自动增长：</h2><ol><li><p>创建自动增长</p><ol><li><p>```sql<br>1.# 在创建表时<br>create table stu (</p><pre><code>id int primary key auto_increment,name varchar(20));auto_increment # 自己定义的主键，添加数据时给主键赋值null，则自动增长,只会看上一个的值</code></pre><ol><li>alter table stu modify id int auto_increment;     </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 删除自动增长</span><br><span class="line"></span><br><span class="line">   1. ```sql</span><br><span class="line">      alter table stu modify id int;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><ul><li>foreign key</li></ul><ol><li><p>在创建表时，可以添加外键</p><ul><li><p>语法：</p><ul><li><p>create table 表名(</p><p>—</p><p>外键列</p><p>constraint 外键名称  references 主表名称（主表列名称）)</p><p><img src="/posts/javaweb/Users\10717\AppData\Roaming\Typora\typora-user-images\image-20220429222954422.png" alt="image-20220429222954422"></p><p><img src="/posts/javaweb/image-20220429223004206.png" alt="image-20220429223004206"></p><p><img src="/posts/javaweb/image-20220429223129391.png" alt="image-20220429223129391"></p><p><img src="/posts/javaweb/Users\10717\AppData\Roaming\Typora\typora-user-images\image-20220429223207503.png" alt="image-20220429223207503"></p></li></ul></li></ul></li></ol><p><img src="/posts/javaweb/image-20220429223247918.png" alt="image-20220429223247918"></p><p>添加的时候员工为其他 就不行</p><h3 id="级联的操作"><a href="#级联的操作" class="headerlink" title="级联的操作"></a>级联的操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> employee <span class="keyword">add</span> <span class="keyword">constraint</span> emp_dept <span class="keyword">foreign</span> key</span><br><span class="line">(dep_id) <span class="keyword">references</span> department(id) <span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span> cascade</span><br><span class="line"><span class="number">1.</span> 分类</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span>  cascade <span class="comment">-- 级联更新</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span>  cascade <span class="comment">-- 级联删除</span></span><br></pre></td></tr></table></figure><h2 id="数据库的设计"><a href="#数据库的设计" class="headerlink" title="数据库的设计"></a>数据库的设计</h2><ol><li>多表之间的关系<ol><li>一个yi<ul><li>可以在任意一方添加外键，让外键唯一</li></ul></li><li>一对多<ul><li>部门和员工</li><li>一个部门有多个部门，一个员只能对应一个部门买买买</li></ul></li><li>多对多<ul><li>学生对课程</li><li>借助第第三张表，中间包含两个字段，这两个字段作为第三张表的外键，关联其他两张表</li></ul></li></ol></li></ol><h3 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h3><p>第次磁规范</p><ul><li>设计数据库时，遵守规矩</li></ul><ul><li>第一范式<ul><li>每一列都是不可分割的原子项 <ul><li>存在的问题，冗余的太多</li><li>数据添加崔在问题</li><li>删除也对在问题</li></ul></li></ul></li><li>第二范式<ul><li>a—&gt;b,通过a的属性值确定b的b依赖a（学号，课程名称） ———分数</li><li>完全依赖，（学号，课程名称） ———分数</li><li>部分依赖————组中的成员可以确定</li><li>传递依赖<ul><li>如学号==系名，系名==系主任</li></ul></li><li>主属性；非主属性</li></ul></li><li>第三范式<ul><li></li></ul></li></ul><h2 id="数据库的备份和还原"><a href="#数据库的备份和还原" class="headerlink" title="数据库的备份和还原"></a>数据库的备份和还原</h2><ol><li>命令行：<ul><li>语法<ul><li>mysqldump -u’用户名 -p密码    数据库的名称 &gt; 保存路径</li><li>还原：<ul><li>登录数据库</li><li>创建数据库</li><li>使用数据库</li><li>执行文件<ul><li>source 文件路径</li></ul></li></ul></li></ul></li></ul></li></ol><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p><img src="/posts/javaweb/image-20220502140314660.png" alt="image-20220502140314660" style="zoom:150%;"></p><p><img src="/posts/javaweb/image-20220502140727114.png" alt="image-20220502140727114"></p><ol><li><ul><li>隐式内连接select * from emp， dept where emp.id = dept.id;</li><li>显示内连接</li></ul></li><li><p>外连接</p><ol><li><p>左外链接：</p><ul><li>语法：select 字段列表 from 表1 left [outer] join 表二 on 条件；</li><li>左表所有数据以及其交集的部分</li></ul></li><li><p>右外连接：</p></li><li><p>子查询 </p><ol><li>```sql<br>select <em> from emp where emp.salary =  (select max(salary) form emp);<br>select </em> from emp where emp.salary &lt; ( select avg(    salary )from emp);<br>select * from emp where dept_id in (3,2); <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">      2. ![image-20220502142232683](javaweb/image-20220502142232683.png)</span><br><span class="line"></span><br><span class="line">![image-20220502143823099](javaweb/image-20220502143823099.png)</span><br><span class="line"></span><br><span class="line">查询员工入职信息</span><br><span class="line"></span><br><span class="line">![image-20220502144210434](javaweb/image-20220502144210434.png)</span><br><span class="line"></span><br><span class="line">## 事务</span><br><span class="line"></span><br><span class="line">事务同时成功町是失败</span><br><span class="line"></span><br><span class="line">1. 开启事务--start transaction</span><br><span class="line">2. 提交事务--commit</span><br><span class="line">3. 回滚事务--rollback</span><br><span class="line">4. mysql自动提交</span><br><span class="line">   1. 手动提交</span><br><span class="line">      1. 需要先开启事务，在提交 </span><br><span class="line">   2. 自动提交：</span><br><span class="line">      1. mysql就是自动提交的</span><br><span class="line">      2. oracle是手动提交一条dml的增删改语句会自动提交</span><br><span class="line">   3. 查看事务的提交方式：select @@autocommit;</span><br><span class="line">   4. 修改默认的提交方式：set @@autocommit = 0；</span><br><span class="line"></span><br><span class="line">2. 事务的四大特征：</span><br><span class="line">   1. 原子性:同时成功，同时失败</span><br><span class="line">   2. 持久性：当事务提交或回滚后  ，数据库会持久化保存</span><br><span class="line">   3. 隔离性：多个事物之间。相互独立</span><br><span class="line">   4. 一直性：事务 操作前后，数据的总量不变</span><br><span class="line">3. 事务的隔离级别</span><br><span class="line">   1. 脏读：一个事务读取到没有提交的数据</span><br><span class="line">   2. 不可重复读：咋同一个事务中两次读取的数据不一样</span><br><span class="line"></span><br><span class="line">read uncommitted:读未提交</span><br><span class="line"></span><br><span class="line">read committed:（oracle默认） 读已提交</span><br><span class="line"></span><br><span class="line">repeatable read : mysql默认可重复读</span><br><span class="line"></span><br><span class="line">serializable:1. 串行化</span><br><span class="line"></span><br><span class="line">锁表，当另一个事务对这个表完成，另一个事务对这个表才进行</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">1. # 查询隔离级别</span><br><span class="line">select @@tx_isolation;</span><br><span class="line">2.# 设置隔离级别：</span><br><span class="line">set global transaction isolation level 级别字符</span><br><span class="line">重新打开才生效</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="DCL-管理用户，授权"><a href="#DCL-管理用户，授权" class="headerlink" title="DCL    管理用户，授权"></a>DCL    管理用户，授权</h2><ul><li>DBA：数据库管理员</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询用户： use myql;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;)</span><br><span class="line"><span class="number">2.</span> <span class="comment">-- 创建用户</span></span><br><span class="line"><span class="keyword">create</span> use <span class="string">&#x27;zhangsna&#x27;&#x27;@localhost identified by &#x27;</span><span class="number">123</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">CREATE USER &#x27;</span>li<span class="string">&#x27;@&#x27;</span>localhost<span class="string">&#x27;IDENTIFIED BY &#x27;</span><span class="number">123</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">-- 修改lisi用户密码为abc</span></span><br><span class="line"><span class="string">UPDATE USER SET PASSWORD = (&#x27;</span>ooo<span class="string">&#x27;) WHERE USER = &#x27;</span>li<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">SET PASSWORD FOR &#x27;</span><span class="keyword">user</span><span class="string">&#x27;@&#x27;</span>主机名<span class="string">&#x27; = PASSWORD(&#x27;</span><span class="number">888</span><span class="string">&#x27;);</span></span><br></pre></td></tr></table></figure><h3 id="忘记root密码"><a href="#忘记root密码" class="headerlink" title="忘记root密码"></a>忘记root密码</h3><ol><li>cmd—-&gt;net stop mysql 停止mysql服务<ol><li>管理员方式运行</li></ol></li><li>mysqld —- skip-grant -tables</li><li>打开新的cmd直接输入mysql命令</li><li>use mysql；</li><li>update user set password = password = password(‘你的系密码’) where use = ‘root’;</li><li>在任务管理器中停止mysql</li></ol><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><ol><li><p>查询权限</p><ol><li>show grants for ‘用户名’@主机名’</li></ol></li><li><p>授予权限</p><ol><li>grant 权限列表 on 数据库名称 . 表名 to ‘用户名’@’主机名’；(只能查询这个表)<ol><li>权限列表 select delete update</li></ol></li></ol></li><li>授予全部权限<ol><li>grant all on <em> . </em> to’zhang’@’localhost’;</li></ol></li><li>撤销权限<ol><li>revoke 权限列表 on 数据库名 . 表名 from ‘用户名’@’%’;</li></ol></li></ol><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>概念：java语言操作数据库，</p><p>java 数据库链接， Java语言操作数据库</p><p>(sun)公司操作所有关系型数据库规则</p><p>统一的java代码可以操作所有关系型数据库</p><p>每一个不同的数据库厂商，写的不同的实现类，提供数据库驱动jar包。我们可以使用这套接口编程，真正实现jar实现类</p><ol><li><ol><li>导入<ol><li>复制jar到项目的libs的目录下都可以</li><li>添加库</li></ol></li><li>注册 </li><li>获取数据库对象</li><li>定义sql</li><li>获取sql语句的对象</li><li>执行sql，接受返回值</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);<span class="comment">//自动注册</span></span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// DriverManager：驱动管理对象</span></span><br><span class="line"><span class="number">1.</span> 注册驱动</span><br><span class="line">    <span class="number">5</span>后可以省略注册步骤</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//connection：数据库链接对象</span></span><br><span class="line"> <span class="number">1.</span><span class="comment">/*</span></span><br><span class="line"><span class="comment"> url：语法：</span></span><br><span class="line"><span class="comment"> jdbc:mysql://ip地址(域名)：端口号/数据库名称</span></span><br><span class="line"><span class="comment">如果连接本地的,还是默认端口3306则可以简写jdbc:mysql:///数据库名称</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="number">2.</span><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 功能</span></span><br><span class="line"><span class="comment"> 1.获取执行sql对象</span></span><br><span class="line"><span class="comment"> statement createStatement();</span></span><br><span class="line"><span class="comment"> PrepareedStatement prepareedStatement();</span></span><br><span class="line"><span class="comment"> 2.管理事务:</span></span><br><span class="line"><span class="comment"> 开启事务void setAutoCommit(boolean autoCommit)参数为false</span></span><br><span class="line"><span class="comment"> 提交事务 commit()</span></span><br><span class="line"><span class="comment"> 回滚事务 rollback()</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    </span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update stu set name1 = 5200 where id = 12&quot;</span>; </span><br><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">//statement</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.执行sql</span></span><br><span class="line"><span class="comment">1. boolean execute(String sql):执行</span></span><br><span class="line"><span class="comment">2. int executeupdate(String sql):执行dml（增删改）和ddl</span></span><br><span class="line"><span class="comment">返回值：影响的行数;可以通过影响行数是否成功，大于0则成功</span></span><br><span class="line"><span class="comment">3.ResultSet execiteQuery(String sql) :执行dql(select)语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">       </span><br><span class="line"><span class="comment">//resultset : 结果集对象</span></span><br><span class="line"><span class="comment">//prepareedStatement：执行sql的对象</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br></pre></td></tr></table></figure><h3 id="ResultSet"><a href="#ResultSet" class="headerlink" title="ResultSet :"></a>ResultSet :</h3><ul><li><p>结果集对象，封装查询对象    </p><ul><li><p>next(): 有表象下移动一行</p></li><li><p>getxxx():获取数据</p><ul><li><p>代表数据类型 如： int getint(); String getString();</p></li><li><p>参数</p><ol><li>int : 代表列的标号，从一开始 如getString (1);</li><li>String : 代表列名称。 如 ： get(“account”);</li></ol></li><li><p>使用步骤：</p><ol><li><p>游标线下移动</p></li><li><p>判断是否有数据</p></li><li><p>获得数据、rs.next 返回boolen</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(rs.next)&#123;</span><br><span class="line">    判断是否有最后一行。</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul></li></ul><p>​                定义一个方法，查询emp表的数据将其封装为对象， 然后装载集合，返回</p><ol><li>定义emp类</li><li>定义方法 public list<emp> findall(){}</emp></li><li>实现方法 select * from emp;</li></ol><h3 id="jdbc工具"><a href="#jdbc工具" class="headerlink" title="jdbc工具"></a>jdbc工具</h3><ul><li>目的 ：简化书写</li><li>分析<ol><li>​    注册驱动也抽取</li><li>抽取一个方法获取连接对象<ol><li>需求，不想传递参数，还得保证工具类的通用性</li><li>通过配置文件解决<ol><li>uel=</li><li>user=</li><li>password=</li></ol></li></ol></li><li>抽泣一个方法释放资源</li></ol></li></ul><p>​        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc.ssss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jsbcunti</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/db1&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>); </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> jsbcunti.class.getClassLoader();</span><br><span class="line">            <span class="type">URL</span> <span class="variable">res</span> <span class="operator">=</span>  classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> res.getPath();</span><br><span class="line">            System.out.println(path);</span><br><span class="line">            pro.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(path));</span><br><span class="line"></span><br><span class="line">            url = pro.getProperty(url);</span><br><span class="line">            user = pro.getProperty(user);</span><br><span class="line">            password = pro.getProperty(password);</span><br><span class="line">            driver = pro.getProperty(driver);</span><br><span class="line">            Class.forName(driver);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Connection <span class="title function_">getconn</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs,Statement stmt, Connection conn)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> jdbc.ssss;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dddd.dome.Emp;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demod</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    List&lt;Emp&gt; list = <span class="keyword">new</span> <span class="title class_">demod</span>().findall();</span><br><span class="line">    System.out.println(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></span><br><span class="line"><span class="comment">//            conn = DriverManager.getConnection(&quot;jdbc:mysql:///db1&quot;, &quot;root&quot;, &quot;root&quot;);</span></span><br><span class="line">            conn = jsbcunti.getconn();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot; select * from stu&quot;</span>;</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            resul = stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (resul.next()) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resul.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resul.getString(<span class="string">&quot;巍峨&quot;</span>);</span><br><span class="line">                System.out.println(id + name);</span><br><span class="line">                emp = <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">                emp.setId(id);</span><br><span class="line">                emp.setName(name);</span><br><span class="line">                list.add(emp);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;  <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//            if (conn != null) &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    conn.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (stmt != null) &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    stmt.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (resul != null) &#123;</span></span><br><span class="line"><span class="comment">//                try &#123;</span></span><br><span class="line"><span class="comment">//                    resul.close();</span></span><br><span class="line"><span class="comment">//                &#125; catch (SQLException e) &#123;</span></span><br><span class="line"><span class="comment">//                    e.printStackTrace();</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">            jsbcunti.close(resul,stmt,conn);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">domt1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">fagg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">domt1</span>().login(username,password);</span><br><span class="line">        <span class="keyword">if</span> (fagg)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;shiba&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="literal">null</span> || password == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stat</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = jsbcunti.getconn();</span><br><span class="line">                    <span class="comment">//建立链接</span></span><br><span class="line">            stat = conn.createStatement();</span><br><span class="line">            <span class="comment">//获取执行对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = &#x27;&quot;</span>+username+<span class="string">&quot;&#x27; and password = &#x27;&quot;</span>+password+<span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">            rs = stat.executeQuery(sql);</span><br><span class="line">            <span class="comment">//执行查询</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jsbcunti.close(rs,stat,conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>PreparedStatement:执行sql的对象<ol><li>SQL诸如问题： <ol><li>a’ or ‘a’ =’a</li></ol></li><li>解决注入问题</li><li>参数使用占位符</li><li>步骤<ol><li>导入<ol><li>复制jar到项目的libs的目录下都可以</li><li>添加库</li></ol></li><li>注册 </li><li>获取数据库对象</li><li>定义sql<ol><li>select  * from user where username = ? and password = ?;</li></ol></li><li>获取sql语句的对象获取sql语句的对象 PrepareStatement Connection.prepareStatement(String sql )</li><li>给？赋值：<ol><li>方法：setxxx(参数1，参数2)<ol><li>参数一：？的位置编号从1开始</li><li>参数二：？的位置，值</li></ol></li></ol></li><li></li><li>执行sql，接受返回值</li><li>后期都会使用PrepareStatement</li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">domt1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">fagg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">domt1</span>().login(username,password);</span><br><span class="line">        <span class="keyword">if</span> (fagg)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登陆成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;shiba&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String username,String password)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="literal">null</span> || password == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="type">PreparedStatement</span> <span class="variable">stat1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = jsbcunti.getconn();</span><br><span class="line">                    <span class="comment">//建立链接</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取执行对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user where username = ? and password = ? &quot;</span>;</span><br><span class="line">            stat1 = conn.prepareStatement(sql);</span><br><span class="line">            stat1.setString(<span class="number">1</span>,username);</span><br><span class="line">            stat1.setString(<span class="number">2</span>,password);</span><br><span class="line"></span><br><span class="line">            rs = stat1.executeQuery();</span><br><span class="line">            <span class="comment">//执行查询</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            jsbcunti.close(rs,stat1,conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用JDBC控制事务"><a href="#用JDBC控制事务" class="headerlink" title="用JDBC控制事务"></a>用JDBC控制事务</h3><ol><li>事务：一个</li><li><p>事务同时成功町是失败</p><ol><li>开启事务—start transaction</li><li>提交事务—commit</li><li>回滚事务—rollback</li><li>mysql自动提交<ol><li>手动提交<ol><li>需要先开启事务，在提交 </li></ol></li><li>自动提交：<ol><li>mysql就是自动提交的</li><li>oracle是手动提交一条dml的增删改语句会自动提交</li></ol></li><li>查看事务的提交方式：select @@autocommit;</li><li>修改默认的提交方式：set @@autocommit = 0；</li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java开启事务</span></span><br><span class="line">coon.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">coon.commit; </span><br><span class="line">在<span class="keyword">catch</span>中回滚事务</span><br><span class="line">    注意<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    <span class="keyword">if</span> (conn != <span class="literal">null</span>)</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ul><li>就是一个容器，存放数据库链接的容器<ul><li>当系统初始化好了，容器被创建，容器中会申请一些链接</li><li>访问完了在归还</li></ul></li><li>好处<ul><li>节约资源</li><li>用户访问高效</li></ul></li><li>实现：<ol><li>标准接口：dataSource   javex.sql包下的<ol><li>方法：<ol><li>获取链接：getconnection();</li><li>归还链接Connection.close();</li></ol></li><li>一般我们不去实现它，数据库厂商去实现<ol><li>c3p0：池子</li><li>Druid:池子</li></ol></li></ol></li></ol></li></ul><h4 id="o3p0"><a href="#o3p0" class="headerlink" title="o3p0"></a>o3p0</h4><ol><li>导入    c3p0-0.9.5.2.jar和mchange-commons-java-0.2.12.jar不要忘记驱动jar包</li><li>定义配置文件：<ol><li>名称：c3p0.properties 或者c3p0-config.xml</li><li>路径：直接将文件放在src目录下即可</li></ol></li><li>创建核心对象，数据库连接对象 Combo’pooled’datasource</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line"><span class="comment">//不传就使用默认的  传就是用里面自己配制的、</span></span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line">            System.out.println(i+<span class="string">&quot;:&quot;</span>+ conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">ds1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>(<span class="string">&quot;otherc3p0&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;i &lt;= <span class="number">8</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds1.getConnection();</span><br><span class="line">            System.out.println(i+<span class="string">&quot;:&quot;</span>+ conn);</span><br></pre></td></tr></table></figure><ol><li><p>Druid 连接池</p><ol><li>导入jar包 druid-1.0.9.jar</li><li>定义配置文件<ol><li>特点.properties</li><li>可以叫任意名称，放在任意目录下</li><li>手动加载</li></ol></li><li>加载配置文件。Properties</li><li>获取对象：通过工厂类 DruidDataSOurceFactory<ol><li>properties 中的load方法是给new出来的 集合对象給值</li></ol></li><li>获取连接：getconnection</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> druiddome.class.getClassLoader().getResourceAsStream(<span class="string">&quot;druid.properties&quot;</span>);</span><br><span class="line">System.out.println(pro.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">pro.load(is);</span><br><span class="line">System.out.println(pro.getProperty(<span class="string">&quot;username&quot;</span>));</span><br><span class="line"><span class="type">DataSource</span> <span class="variable">ds</span> <span class="operator">=</span> DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ds.getConnection();</span><br><span class="line"><span class="comment">//获取连接池对象</span></span><br><span class="line">System.out.println(conn);</span><br></pre></td></tr></table></figure></li><li><p>定义工具类</p><ol><li>定义一个类 jdbcutils</li><li>提供静态代码块加载配置文件，初始化连接池对象</li><li>提供方法<ol><li>获取连接方法：通过数据库连接池后去链接</li><li>释放资源</li><li>获取连接池的方法</li></ol></li></ol></li></ol><h2 id="spring-JDBC：简化封装"><a href="#spring-JDBC：简化封装" class="headerlink" title="spring JDBC：简化封装"></a>spring JDBC：简化封装</h2><ul><li><p>Spring框架JDBC的简单封装。提供一个JDBCTemplate对象简化JDBC</p></li><li><p>步骤</p><ol><li><p>导入jar包</p></li><li><p>创建jdbcTemplate对象。依赖于数据源DataSource</p><p>*jdbcTemplate template = new jdbcTemplate(ds);</p></li><li><p>调用方法完成crud操作</p><ul><li>update():增删改语句</li><li>queryForMap():封装为map集合<ul><li>只能hi是一条</li></ul></li><li>queryForList：封装为list<ul><li>list中都是map元素</li></ul></li><li>query：查询结果<ul><li>query的参数： RowMapper<ul><li>一般是用BeanPropertyRowMapper的实现类。可以到javabean自动封装</li><li>new BeanPropertyRowMapper&lt;类&gt;(类型.class)</li></ul></li></ul></li><li>queryForObject：查询结果封装为对象</li></ul></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>(JDBCUtils.getsou());</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from stu where id = ?&quot;</span>;</span><br><span class="line">Map&lt;String,Object&gt; map = template.queryForMap(sql,<span class="number">1</span>);</span><br><span class="line">System.out.println(map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from stu &quot;</span>;</span><br><span class="line">    List&lt; Map&lt;String, Object&gt;&gt; list = template.queryForList(sql);</span><br><span class="line">    <span class="keyword">for</span>(Map&lt;String,Object&gt; st : list )</span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(st);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from stu&quot;</span>;</span><br><span class="line">        List &lt;Emp&gt; list = template.query(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Emp&gt;(Emp.class));</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list )&#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">            &#123;<span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from stu&quot;</span>;</span><br><span class="line">        List &lt;Emp&gt; list = template.query(sql,<span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;Emp&gt;(Emp.class));</span><br><span class="line">        <span class="keyword">for</span> (Emp emp : list )&#123;</span><br><span class="line">System.out.println(emp);&#125;</span><br><span class="line">template.queryForObject(sql, <span class="type">long</span>.class);<span class="comment">//聚合函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/posts/javaweb/image-20221015103830752.png" alt="-">   </p><p>.3+69978230.<img src="/posts/javaweb/image-20221015113845721.png" alt="image-20221015113845721"></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><ul><li>javaWeb ：<ul><li>使用java语言开发基于互联网的项目</li></ul></li><li>软件架构<ol><li>c/s：Client/Server 客户端/服务端<ol><li>本地客户端，远程服务器端</li><li>优点<ol><li>用户体验好</li></ol></li><li>缺点：<ol><li>开发，安装，部署，维护，麻烦</li></ol></li></ol></li><li>B/s：Browser/server<ol><li>只需要一个浏览器，用户通过不同的网址（url），客户访问不同的服务器端程序</li><li>优点<ol><li>开发，安装，部署，维护简单</li></ol></li><li>缺点<ol><li>如果应用过大，用户的体验会受过影响</li><li>对硬件要求高</li></ol></li></ol></li></ol></li></ul><h2 id="B-S架构详解"><a href="#B-S架构详解" class="headerlink" title="B/S架构详解"></a>B/S架构详解</h2><ul><li>资源分类： <ol><li>静态资源：<ul><li>静态网页开发的资源</li><li>特点：<ul><li>所有用户访问， 得到的结果都是一样的</li><li>如：文本，图片，音频，视频，HTML，CSS,JavaScript</li><li>如果请求静态资源，服务器直接给她静态资源，浏览器有内置解析引擎 </li></ul></li><li>使用动态网页及时发布的资源。<ul><li>特点： <ul><li>所有用户访问，得到的结果可能不一样。</li><li>如：jusp/servlet，psp，asp。。。</li><li>请求动态资源，服务器将执行动态资源，转化为静态资源，在发送给浏览器</li></ul></li></ul></li></ul></li></ol></li><li><p>静态资源：HTML：用于搭建基础网页，展示网页内容</p><ul><li>如：html，css，javaScript</li></ul></li><li><p>动态资源：每个用户访问相同资源后，得到的结果可能不一样。成为动态资源。动态资源被访问后，需要先转换为静态资源，在返回给浏览器</p><ul><li>如：servlet / jsp,php,asp</li><li>先转化为</li></ul></li><li><p>CSS:用于美化</p></li><li>javaScript：控制网页的元素，让网页有一些动态的效果    </li></ul><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><ol><li>概念：<ul><li>Hyper  Text Markup Language 超文本标记语言<ul><li>超文本<ul><li>用超链接的方式构造的网状文本</li></ul></li><li>标记语言<ul><li>由标签构成的语言。&lt;标签名称&gt;如html,xml</li><li>不是编程语言</li></ul></li></ul></li></ul></li><li>快速入门：<ul><li>语法<ol><li>html文档的后缀名.html.htm</li><li>标签分为<ol><li>围堵标签和结束标签<html>,</html></li><li>自闭标签： 开始i标签和结束标签在一起如<br></li></ol></li><li>标签可以嵌套<ol><li>不能混着，正确abba</li></ol></li><li>在开始标签中定义标签。属性是由键值对构成，值需要引号引起来单双都可以</li><li>html的标签 不区分大小写，建议是用小写</li></ol></li></ul></li></ol><ol><li><p>标签学习：</p><ol><li><p>文件标签：构成html最基本的标签</p><ul><li><p>html：html文档的根标签</p></li><li><p>head: 头标签 zhidinghtml文档的一些属性。引入外部资源</p></li><li><p>title：标题标签</p></li><li><p>body：体标签</p></li><li><p>&lt;!Doctype html&gt;：html5中定义该文档是html文档</p></li></ul></li><li><p>文本标签：</p><ul><li>注释：<!-- 注释内容--></li><li></li></ul></li><li><p>图片标签：</p><ol><li>&lt;img src = “./image/jiangwai_1.jpg”</li><li>../image/….. <!-- 默认./   ../时返回上级寻找--></li></ol></li><li><p>列表标签：</p><ul><li>有序列表<ul><li>ol：</li><li>ll：</li></ul></li><li>无序列表<ul><li>ul</li><li>li</li></ul></li></ul></li><li><p>链接标签：</p><ol><li>target:<ol><li>8y’y’ya:超链接_self在当前 <a href="网址" targhet="_self">点我</a></li><li>_在空白页打开<a href="网址" targhet="_blank">点我</a></li></ol></li></ol></li><li><p>div和span：</p><ul><li>div站一整行     </li><li>span：在一行显示</li></ul></li><li><p>语义化标签</p><p>*—-<hearder>头</hearder> <footer></footer></p></li><li><p>表格标签：</p><ol><li><ul><li>table 表格    </li></ul></li></ol><p><img src="/posts/javaweb/image-20220504211103839.png" alt="image-20220504211103839"></p><ol><li>使用table布局<tr><td></td></tr><tr></tr></li><li>使用表格的嵌套</li></ol></li><li><p>表单标签</p><ol><li>概念：<ol><li>采集用户输入的数据，用于和服务器交互<ol><li>from用于定义表单的采集用户的范围&lt;采集&gt;     <ol><li>action：提交数据的url</li><li>met od：提交方式<ol><li>get：在地址栏中显示<ol><li>长度会有限制</li></ol></li><li>post：会在地址栏中显示，封装在http中<ol><li>没有 ·</li></ol></li></ol></li></ol></li></ol></li><li>想要提交必须指定name属性</li></ol></li></ol></li></ol></li></ol><p>​                    用户名&lt;input name =”username&gt;”</p><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><p><img src="/posts/javaweb/image-20220507111424911-16673601179191.png" alt="image-20220507111424911"></p><p>范围越来越大</p><p>1不常用，23常用  3还可以写成&lt;style&gt;@import”css/a.css”;&lt;/style&gt;</p><h3 id="css-基本语法"><a href="#css-基本语法" class="headerlink" title="css 基本语法"></a>css 基本语法</h3><ul><li><p>格式</p><p>选择器{</p><p>属性名：属性值；</p><p>。。。。</p><p>}</p><ul><li>注意： 每一个属性后都要加上；</li></ul></li><li><p>选择器： 筛选具有相同特征</p><ul><li><p>基本选择器</p><ol><li><p>id选择器 == 建议id值唯一  <style>#id{color = red}</style></p><ol><li><div id></div></li></ol></li><li><p>元素选择器</p><ol><li>id选择器优先级高于元素选择器</li></ol></li></ol></li></ul></li></ul><pre><code> 3. 类选择器        1. .class&#123;属性值&#125;</code></pre><ul><li><p>扩展选择器</p><ol><li><p>选择所有元素</p><ol><li>*{}</li></ol></li><li><p>并集选择器：</p><ul><li>选择器1，选择器 2{}</li></ul></li><li><p>子选择器：删选选择器1元素下的选择器2元素</p><ol><li>语法：选择器1 选择器2{}</li></ol></li><li><p>父类选择器</p><p>​    选择器1&lt;选择器2{} 给选择器1 增添样子</p></li><li><p>属性选择器：选择元素名称，属性名 = 属性值的元素</p><ol><li>语法：元素名称[属性名= 属性值]</li></ol></li><li><p>伪类选择器： 选择一些元素据有的状态</p><ul><li>语法：元素：{}</li><li><p>如<a></a></p><ul><li><p>状态：</p><ul><li>link： 初始化状态</li><li>visited：被访问过的</li><li>active</li><li><p>hover悬浮状态</p><pre><code>    内边距默认影响状态</code></pre></li></ul></li></ul></li></ul></li></ol></li></ul><ul><li>margin：外边距</li><li>padding 内边距</li><li>浮动faoat浮动：right，left</li></ul><p>设置盒子属性：border-box；</p><h2 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h2><ul><li>一门客户端脚本语言<ul><li>运行在酷虎浏览器中的，每个浏览器都有JavaScript的解析引擎</li><li>脚本语言：不需要编译就可以被浏览器执行了</li></ul></li><li>功能：<ul><li>可以来增强用户和html页面交互过程，可以来控制html元素，让页面有动态效果，增强用户体验</li><li>表单的校验</li><li>网络速度慢</li><li>表单就会传到服务端去，</li><li></li></ul></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>alert(“内容”)在页面上弹出框框(可以放在任意地方，但是有一定的执行顺序)</p><ul><li>阻塞式的不点确定不能加载以下的东西</li><li>通过src属性引入外部的js文件</li></ul><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>Java 就是强类型语言</p><ol><li><p>原始数据类型：</p><ul><li><p>number：数字。证书/小数/NaN</p></li><li><p>string：字符串。 字符/字符串”abc”</p></li><li><p>boolean: true 和false</p></li><li><p>null: 对象为空的占位符</p></li><li><p>undefined：未定义。如果一个变量没有给初始化值，会默认赋值为undefined</p></li></ul></li><li><p>变量</p><ul><li><p>弱类型的，开辟空间的时候不需要规定，可以任意改变，例如先开始记录的使int 可以改变成string</p></li><li><p>语法：</p><ul><li><p>var 变量名  = 初始化值</p></li><li><p>输出 document.write();</p></li><li><p>在页面上写document.write(num + “<br></p><p>“)</p><p>null 是object；</p></li></ul></li></ul></li></ol><ol><li><p>其余的都一样。</p></li><li><ol><li>=== 全等于 2. 3/4=0.75 这里根java不同</li></ol></li></ol><h4 id="其他类型-转为number"><a href="#其他类型-转为number" class="headerlink" title="其他类型 转为number"></a>其他类型 转为number</h4><p>+字符串 这是将字符串转换为number 如果字符串不能转为字符串则转换为NaN</p><p>NaN和任意操作都是NaN</p><h3 id="boolean转numbr："><a href="#boolean转numbr：" class="headerlink" title="boolean转numbr："></a>boolean转numbr：</h3><p>true是1；false是0</p><p>== 类型不同先转换  “123” == 123 的返回值是true  但是i如果是===就是false因为类型不同</p><p>var flag = true;</p><p>var f2 = false;</p><p>== 是进行类型转换  === 只要是类型不同就返回false</p><p>不写var就是全局变量</p><h3 id="其他类型转Boolean"><a href="#其他类型转Boolean" class="headerlink" title="其他类型转Boolean"></a>其他类型转Boolean</h3><ol><li>number： 0或NaN为家的，其他为真</li><li>string：除了空字符都是true所以if（obj.length 和obj） </li><li>null&amp;undefined： null和undefine是false</li><li>对象：所有对相对都是true<ol><li>var date = new Date();</li><li>if() {}</li></ol></li></ol><p>var a = 3 &gt; 4 ? 1:0;输出的是0</p><h2 id="js的特殊语法"><a href="#js的特殊语法" class="headerlink" title="js的特殊语法"></a>js的特殊语法</h2><ol><li>一行只有一条语句，则可以省略；</li><li>var b = 4;</li><li>可以用关键字var<ul><li>用：定义的变量是局部变量</li><li>不用：定义的变量是全局变量</li></ul></li></ol><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;table  align = &#x27;center&#x27;&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> ( <span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;td&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(i + <span class="string">&quot;*&quot;</span>+j + <span class="string">&quot;=&quot;</span>+(i*j)+<span class="string">&quot;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/td&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;/tr&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">align</span> = <span class="string">&#x27;center&#x27;</span>&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="Function对象"><a href="#Function对象" class="headerlink" title="Function对象"></a>Function对象</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1. Function：函数（方法）对象</span><br><span class="line"> 1. 创建：</span><br><span class="line">     1. 1. var fun = new Function (形式参数列表，方法体)</span><br><span class="line">     2. function fun2(形式参数)&#123;&#125;（形式参数的类型不用写）</span><br><span class="line">     3. var 方法名 = function(形式参数列表)&#123;方法体&#125;</span><br><span class="line"> 2. 方法：</span><br><span class="line"> 3. 属性：</span><br><span class="line">     1. length形式参数的个数</span><br><span class="line">     2. </span><br><span class="line"> 4. 特点：</span><br><span class="line">     1. 方法定义时，类型不用写</span><br><span class="line">     2. 名字重名会覆盖</span><br><span class="line">     3. 在js中，方法的调用至于方法的名称有关，和参数列表无关</span><br><span class="line">     4.在方法生猛中有一个隐藏的内置对象(数组),arguments，封装所有的实际参数</span><br><span class="line"> 5. 调用：</span><br><span class="line"> 6. </span><br><span class="line">2. </span><br></pre></td></tr></table></figure><h4 id="array"><a href="#array" class="headerlink" title="array"></a>array</h4><p>Array:数组对象</p><pre><code> 1. 创建      1. 1. var arr = new Array(元素列表)；      2. var arr = new Array(默认长度);      3. var arr = [元素列表]； 2. 方法      1. length长度      2. join(指定分隔符)拼接成字符串 3. 属性 4. 特点      1. 数组长度可变      1. 数组的类型不的规定</code></pre><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><ol><li><p>创建</p><p>var date = new Date();</p></li><li><p>方法</p><ol><li>```javascript<br>返回本地的格式的date.toLocaleDateString()<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   2. date.getTime();获取毫秒值</span><br><span class="line"></span><br><span class="line">#### Math</span><br><span class="line"></span><br><span class="line"> 1. 创建</span><br><span class="line">  1. * 特点： Math对象不用创建对象，直接调用其中的方法Math.f方法名();</span><br><span class="line"> 2. 方法</span><br><span class="line">  1. random(：返回 0 —— 1之间的随机数含0不含1 包含小数；</span><br><span class="line">  2. round(3.14) = 四舍五入 3</span><br><span class="line">  3. ceil(3.14) = 进行上舍入 4</span><br><span class="line">  4. floor(3.14) = 对下取舍   3</span><br><span class="line"></span><br><span class="line">1-100的随机数</span><br><span class="line"></span><br><span class="line">```s</span><br><span class="line">var num = Math.floor((Math.random() * 100) + 1);</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="RegExp-正则表达式对象"><a href="#RegExp-正则表达式对象" class="headerlink" title="RegExp:正则表达式对象"></a>RegExp:正则表达式对象</h4><ol><li><p>正则表达式：定义字符串的组成规则</p><pre><code>1. 单个字符：[]    1. 如[a] [ab] [a-z] [A-Z]    * 特殊符号代表特殊含义的单个字符：          * \d:单个字符[0-9]      * \w:[a-zA-Z0-9_]    2. 量词符号：    * ？：表示出现0或1次    * *：0或多次    * +：1或多次    * &#123;m,n&#125;: 表示m &lt;= x &lt;= n      * m 如果缺省：&#123;,n&#125;:最多n次      * n如果缺省：&#123;m,&#125; 最少m次    3. 开始结束符号    * ^ :开始    * $:结束2.正则对象：1. 创建   1. var reg = new RegExp(&quot;正则表达式&quot;)；&quot;^\\w&#123;6,12&#125;$&quot;   2. var reg = /正则表达式/；/^\w&#123;6,12&#125;\d$/;2. 方法   1. test(参数)：验证指定的字符串是否符合正则定义的规范</code></pre></li></ol><h4 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h4><pre><code> 1. 特点： 全局对象，这个Golbal中封装的方法不需要对象就可以直接调用。方法名（）； 2. 方法      1. encodeRI():url编码      2. decodeRI():url解码      3. endodeURIComponent():url 编码编码的字符更多，英语都能编码      4. decodeURIComponent():url 解码      5. parseInt(): 将字符串转为数字          1. 注意判断每一个字符是是否数字，直到不是数字为止吗，将前面的数字转换为nember      6. isNaNc 如果是NaN就返回true；六亲不认，连自己都不忍。NaN参与的==比较全部为false      7. eval();将字符串script的用</code></pre><h3 id="DOM简单学习"><a href="#DOM简单学习" class="headerlink" title="DOM简单学习"></a>DOM简单学习</h3><ul><li><p>功能： 控制html文档的内容</p></li><li><p>代码：获取页面标签(元素)对象那个Element</p><ul><li>document.getElementById(“id值”)：通过元素的id获取元素对象</li></ul></li><li><p>操作Element对象：</p><ul><li><p>设置属性值:</p><ul><li>明确获取的对象是哪一个？</li><li>查看API文档，赵其中有哪些属性可设置</li></ul></li><li><p>修改标签体内容：</p><ul><li>```<br>innerHTML<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 事件简单学习</span><br><span class="line"></span><br><span class="line">* 功能：某些组件被执行了某些操作后，触发某些代码的执行。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 如何绑定事件</span><br><span class="line">   1. 直接在html标签上，指定事件的属性（操作），属性值就是js代码</span><br><span class="line">       1. 事件onclick</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Bom:浏览器对象模型</span><br><span class="line"></span><br><span class="line">* 将浏览器个个组成部分封装为对象</span><br><span class="line">  * 浏览器对象</span><br><span class="line">  * window 浏览器窗口对象  重要包含 HIstory  and Location 包含body      DOM对象中Document对象</span><br><span class="line">  * 地址栏对象</span><br><span class="line">  * 历史记录对象 history</span><br><span class="line">  * 显示器屏幕（不重要） Screen</span><br><span class="line"></span><br><span class="line">#### Window:窗口对象</span><br><span class="line"></span><br><span class="line">  1. 创建</span><br><span class="line">  2. 方法</span><br><span class="line">   1. 与弹出框有关的方法：</span><br><span class="line">        1. alert()象是带有一段消息和一个确认消息的警告框</span><br><span class="line">        2. confirm() 显示确认和取消的两条</span><br><span class="line">             1. 确定，返回true</span><br><span class="line">             2. 取消，返回false</span><br><span class="line">        3. prompt() 可以显示提供用户的输入框</span><br><span class="line">             1. 返回值：获取用户输入的值</span><br><span class="line">   2. 与打开和关闭的方法：</span><br><span class="line">        1. close() 关闭浏览器</span><br><span class="line">        2. open() 打开新窗口</span><br><span class="line">   3.  与定时器有关的方式</span><br><span class="line">        1. setTimeout()  在指定的毫秒数后调用</span><br><span class="line">             * 参数：</span><br><span class="line">               * js代码或者方法对象</span><br><span class="line">               * 毫秒值 </span><br><span class="line">               * 返回一个Timeoutid</span><br><span class="line">             * 返回值：唯一标识，用于取消定时器</span><br><span class="line">        2. clearTimeout()取消由setTimeout()方法设置的timeout</span><br><span class="line">        3. setInterval() 按照指定的周期(一毫秒计)来调用函数或计算表达式</span><br><span class="line">        4. clearinterval()取消setInterval() 设置的timeout。</span><br><span class="line">  3. 属性</span><br><span class="line">   1. 获取其他BOM对象：</span><br><span class="line">      1. history: window.history === history</span><br><span class="line">      2. location:</span><br><span class="line">         1. 创建（获取）：</span><br><span class="line">            1. window.location</span><br><span class="line">            2. location</span><br><span class="line">         2. 方法：</span><br><span class="line">            * location.reload()  重新加载当前文档</span><br><span class="line">         3. 属性：</span><br><span class="line">            * location.href设置或者获取本网页的地址 </span><br><span class="line">      3. Nabigator</span><br><span class="line">      4. Screen</span><br><span class="line">  4. 特点</span><br><span class="line">   * WIndow对象那个不需要创建。Window.方法名();</span><br><span class="line">   * window引用可以省略。方法名();</span><br><span class="line"></span><br><span class="line">### Bootstrap：</span><br><span class="line"></span><br><span class="line">1. 概念： 一个前端开发的框架，Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷。</span><br><span class="line">* 框架:一个半成品软件，开发人员可以在框架基础上，在进行开发，简化编码。</span><br><span class="line">* 好处：</span><br><span class="line">1. 定义了很多的css样式和js插件。我们开发人员直接可以使用这些样式和插件得s到丰富的页面效果。</span><br><span class="line">2. 响应式布局。</span><br><span class="line">* 同一套页面可以兼容不同分辨率的设备。</span><br><span class="line"></span><br><span class="line">2. 快速入门</span><br><span class="line"></span><br><span class="line">  1. 下载Bootstrap</span><br><span class="line">  2. 在项目中将这三个文件夹复制</span><br><span class="line">  3. 创建html页面，引入必要的资源文件</span><br><span class="line"></span><br><span class="line">3. </span><br><span class="line"></span><br><span class="line">4. &lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">       &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">       &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">       &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">       &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">       &lt;title&gt;Bootstrap HelloWorld&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!-- Bootstrap --&gt;</span><br><span class="line">       &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">1. 响应式布局：</span><br><span class="line"></span><br><span class="line">2. 同一套页面可以兼容不同分辨率的设备。</span><br><span class="line"></span><br><span class="line">* 实现：依赖于栅格系统：将一行平均分成12个格子，可以指定元素占几个格子</span><br><span class="line">* 步骤：</span><br><span class="line">1. 定义容器。相当于之前的table、</span><br><span class="line">* 容器分类：</span><br><span class="line">1. container：两边留白</span><br><span class="line">2. container-fluid：每一种设备都是100%宽度</span><br><span class="line">2. 定义行。相当于之前的tr   样式：row</span><br><span class="line">3. 定义元素。指定该元素在不同的设备上，所占的格子数目。样式：col-设备代号-格子数目</span><br><span class="line">* 设备代号：</span><br><span class="line">1. xs：超小屏幕 手机 (&lt;768px)：col-xs-12</span><br><span class="line">2. sm：小屏幕 平板 (≥768px)</span><br><span class="line">3. md：中等屏幕 桌面显示器 (≥992px)</span><br><span class="line">4. lg：大屏幕 大桌面显示器 (≥1200px)</span><br><span class="line"></span><br><span class="line">* 注意：</span><br><span class="line">1. 一行中如果格子数目超过12，则超出部分自动换行。</span><br><span class="line">2. 栅格类属性可以向上兼容。栅格类适用于与屏幕宽度大于或等于分界点大小的设备。</span><br><span class="line">3. 如果真实设备宽度小于了设置栅格类属性的设备代码的最小值，会一个元素沾满一整行。</span><br><span class="line"></span><br><span class="line">1. 全局CSS样式：</span><br><span class="line">* 按钮：class=&quot;btn btn-default&quot;</span><br><span class="line">* 图片：</span><br><span class="line">*  class=&quot;img-responsive&quot;：图片在任意尺寸都占100%</span><br><span class="line">*  图片形状</span><br><span class="line">*  &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-rounded&quot;&gt;：方形</span><br><span class="line">*  &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-circle&quot;&gt; ： 圆形</span><br><span class="line">*  &lt;img src=&quot;...&quot; alt=&quot;...&quot; class=&quot;img-thumbnail&quot;&gt; ：相框</span><br><span class="line">* 表格</span><br><span class="line">* table</span><br><span class="line">* table-bordered</span><br><span class="line">* table-hover</span><br><span class="line">* 表单</span><br><span class="line">* 给表单项添加：class=&quot;form-control&quot; </span><br><span class="line">2. 组件：</span><br><span class="line">* 导航条</span><br><span class="line">* 分页条</span><br><span class="line">3. 插件：</span><br><span class="line">* 轮播图</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## DOM：</span><br><span class="line">* 概念： Document Object Model 文档对象模型</span><br><span class="line">* 将标记语言文档的各个组成部分，封装为对象。可以使用这些对象，对标记语言文档进行CRUD的动态操作</span><br><span class="line"></span><br><span class="line">* W3C DOM 标准被分为 3 个不同的部分：</span><br><span class="line"></span><br><span class="line">* 核心 DOM - 针对任何结构化文档的标准模型</span><br><span class="line">* Document：文档对象</span><br><span class="line">* Element：元素对象</span><br><span class="line">* Attribute：属性对象</span><br><span class="line">* Text：文本对象</span><br><span class="line">* Comment:注释对象</span><br><span class="line"></span><br><span class="line">* Node：节点对象，其他5个的父对象</span><br><span class="line">* XML DOM - 针对 XML 文档的标准模型</span><br><span class="line">* HTML DOM - 针对 HTML 文档的标准模型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 核心DOM模型：</span><br><span class="line">* Document：文档对象</span><br><span class="line">1. 创建(获取)：在html dom模型中可以使用window对象来获取</span><br><span class="line">1. window.document</span><br><span class="line">2. document</span><br><span class="line">2. 方法：</span><br><span class="line">1. 获取Element对象：</span><br><span class="line">1. getElementById()： 根据id属性值获取元素对象。id属性值一般唯一</span><br><span class="line">2. getElementsByTagName()：根据元素名称获取元素对象们。返回值是一个数组</span><br><span class="line">3. getElementsByClassName():根据Class属性值获取元素对象们。返回值是一个数组</span><br><span class="line">4. getElementsByName(): 根据name属性值获取元素对象们。返回值是一个数组</span><br><span class="line">2. 创建其他DOM对象：</span><br><span class="line">createAttribute(name)</span><br><span class="line">            createComment()</span><br><span class="line">            createElement()</span><br><span class="line">            createTextNode()</span><br><span class="line">3. 属性</span><br><span class="line">* Element：元素对象</span><br><span class="line">1. 获取/创建：通过document来获取和创建</span><br><span class="line">2. 方法：</span><br><span class="line">1. removeAttribute()：删除属性</span><br><span class="line">2. setAttribute()：设置属性</span><br><span class="line">* Node：节点对象，其他5个的父对象</span><br><span class="line">* 特点：所有dom对象都可以被认为是一个节点</span><br><span class="line">* 方法：</span><br><span class="line">* CRUD dom树：</span><br><span class="line">* appendChild()：向节点的子节点列表的结尾添加新的子节点。</span><br><span class="line">* removeChild()：删除（并返回）当前节点的指定子节点。</span><br><span class="line">* replaceChild()：用新节点替换一个子节点。</span><br><span class="line">* 属性：</span><br><span class="line">* parentNode 返回节点的父节点。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* HTML DOM</span><br><span class="line">1. 标签体的设置和获取：innerHTML</span><br><span class="line">2. 使用html元素对象的属性</span><br><span class="line">3. 控制元素样式</span><br><span class="line">1. 使用元素的style属性来设置</span><br><span class="line">如：</span><br><span class="line"> //修改样式方式1</span><br><span class="line">        div1.style.border = &quot;1px solid red&quot;;</span><br><span class="line">        div1.style.width = &quot;200px&quot;;</span><br><span class="line">        //font-size--&gt; fontSize</span><br><span class="line">        div1.style.fontSize = &quot;20px&quot;;</span><br><span class="line">2. 提前定义好类选择器的样式，通过元素的className属性来设置其class属性值。</span><br><span class="line"></span><br><span class="line">#### 事件监听机制</span><br><span class="line"></span><br><span class="line">* 概念：某些组件被执行某些惭怍，出发某些代码的执行；</span><br><span class="line"></span><br><span class="line">  * 事件：某些操作，如：单击，双击，键盘按下了 ，鼠标移动了</span><br><span class="line">  * 事件源：组件。如：按钮 文本输入框。。。</span><br><span class="line">  * 监听器：代码。</span><br><span class="line">  * 注册监听：将事件，事件源，监听器结合在一起。当时减员上发生了某个事件，则出发指向某个监听器代码</span><br><span class="line"></span><br><span class="line">* 常见的事件：</span><br><span class="line"></span><br><span class="line">  1. 点击事件：</span><br><span class="line"></span><br><span class="line">     1. onclick：单击</span><br><span class="line">     2. ondblclick：双击事件</span><br><span class="line"></span><br><span class="line">  2. 焦点事件</span><br><span class="line"></span><br><span class="line">     1. onblur：失去焦点</span><br><span class="line">     2. onfocus：获得焦点</span><br><span class="line"></span><br><span class="line">  3. 加载事件：</span><br><span class="line"></span><br><span class="line">     1. onload：一张页面或一张图像完成加载</span><br><span class="line"></span><br><span class="line">     2. ```javascript</span><br><span class="line">        window.onload.function()&#123;&#125;等页面加载在加载function方法</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol><li><p>鼠标事件：</p><ol><li>onmousedown 鼠标按钮被按下。<ul><li>定义方法时，定义一个形参，接受event对象</li><li>event对象button可以获取鼠标按键被点击了 </li></ul></li><li>onmouseup     鼠标按键被松开。</li><li>onmousemove 鼠标被移动。</li><li>onmouseover  鼠标移到某元素之上。</li><li>onmouseout 鼠标从某元素移开。</li></ol></li><li><p>键盘事件 ：</p><ol><li>onkeydown：某个键盘按键被按下。</li><li>onkeyup：     某个键盘按键被松开</li><li>onkeypress：某个键盘按键被松开。</li></ol></li><li><p>选择和改变</p><ol><li>onchange 域的内容被改变。</li><li>onselect   文本被选中。</li></ol></li><li><p>表单事件</p><ol><li>onsubmit：确认按钮被点击<ol><li>可以阻止表单的提交<ol><li>方法要返回false表单被主旨提交<ol><li>onclick = “fun()”</li></ol></li></ol></li></ol></li><li>onreset：重置按钮被点击</li></ol></li></ol></li></ul><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><ol><li>概念：Extensible Markup Language 可扩展标记语言<ul><li>可扩展：标签都是自定义的。<user> <student></student></user></li></ul></li><li>功能<ul><li>存储数据<ol><li>配置文件</li><li>在网络中传输</li></ol></li></ul></li><li>xml与html的区别 <ol><li>xml标签都是自定义的，html标签都是预定义的。</li><li>xml的语法严格，html’语法松散</li><li>xml存储数据的，html是只能是展示数据的</li></ol></li></ol><ul><li>w3c：万维网联盟</li></ul><ol><li><p>语法： ：</p><ul><li><p>基本语法：</p><pre><code>1. xml文档的后缀名：xml1. xml有且只有一个根标签1. xml第一行必须是文档声明1. 属性值必须引起来（单双都可以）1. 标签必须正确关闭1. qu分大小写</code></pre></li><li><p>快速入门：</p></li><li><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;1&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>12<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>nan<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span>=<span class="string">&#x27;2&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>zhangsan1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>121<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">gender</span>&gt;</span>nan1<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>组成部分：</p><ol><li><p>文档声明：</p><ol><li>&lt;?xml 属性列表 ?&gt;</li><li>属性列表：<ul><li>version:版本号</li><li>encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：——ISO-8859-1</li><li>standalone：是否独立<ul><li>取值：<ul><li>yes：不依赖其他文件</li><li>no：依赖其他文件</li></ul></li></ul></li></ul></li></ol></li><li><p>指令(了解)：结合css的</p><ul><li>&lt;?xml-stylesheet type=”text/css” href=”a.css” ?&gt;</li></ul></li><li><p>标签：标签名称自定义的</p><ul><li><p>规则：</p><ol><li><p>名称可以包含字母、数字以及其他的字符 </p></li><li><p>名称不能以数字或者标点符号开始 </p></li><li><p>名称不能以字母 xml（或者 XML、Xml 等等）开始 </p></li><li><p>名称不能包含空格 </p></li></ol></li></ul></li><li><p>属性：</p><ol><li>id属性值唯一</li></ol></li><li><p>文本</p><ol><li>CDATA区：该区域中数据回原样展示<ol><li>&lt;![CDATA[数据]]&gt;</li></ol></li></ol></li></ol></li></ul><ul><li><p>约束：规定xml文档的书写规则</p><ul><li><p>作为框架的使用者(程序员)：</p><ol><li>能够在xml中引入约束文档</li><li>能够简单的读懂约束文档</li></ol></li><li><p>分类：</p><ul><li><p>1.DTD：一种简单的约束技术</p><ul><li>引入dtd文档到xml文档中<ul><li>内部dtd：将约束规则定义在xml文档中</li><li>外部dtd：将约束的规则定义在外部的dtd文件中<ul><li>本地：&lt;!DOCTYPE 根标签名 SYSTEM “dtd文件的位置”&gt;不常用</li><li>网络：&lt;!DOCTYPE 根标签名 PUBLIC “dtd文件名字””dtd文件的位置”&gt;</li></ul></li></ul></li></ul></li><li><p>Schema一种复杂的约束技术：</p></li></ul></li></ul></li></ul><pre><code>  * 引入：              1.填写xml文档的根元素                      2.引入xsi前缀.  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;                      3.引入xsd文件命名空间.  xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;                      4.为每一个xsd约束声明一个前缀,作为标识  xmlns=&quot;http://www.itcast.cn/xml&quot;               &lt;students   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;                  xmlns=&quot;http://www.itcast.cn/xml&quot;                  xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;&gt;</code></pre><p>解析：操作xml文档，将文档中的数据读取到内存中</p><ul><li>操作xml文档<ol><li>解析(读取)：将文档中的数据读取到内存中</li><li>写入：将内存中的数据保存到xml文档中。持久化的存储</li></ol></li><li>解析xml的方式：<ol><li>DOM：将标记语言文档一次性加载进内存，在内存中形成一颗dom树<ul><li>优点：操作方便，可以对文档进行CRUD的所有操作</li><li>缺点：占内存</li></ul></li><li>SAX：逐行读取，基于事件驱动的。<ul><li>优点：不占内存。</li><li>缺点：只能读取，不能增删改</li></ul></li></ol></li><li>xml常见的解析器：<pre><code> 1. JAXP：sun公司提供的解析器，支持dom和sax两种思想 2. </code></pre></li></ul><h4 id="Jsoup："><a href="#Jsoup：" class="headerlink" title="Jsoup："></a>Jsoup：</h4><ul><li>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li></ul><ol><li>DOM4J：一款非常优秀的解析器</li><li>Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</li><li><p>PULL：Android操作系统内置的解析器，sax方式的。</p><ul><li>快速入门：<ul><li>步骤：<ol><li>导入jar包</li><li>获取Document对象</li><li>获取对应的标签Element对象</li><li>获取数据</li></ol></li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.获取DOcument对象，根据xml文档获取</span></span><br><span class="line"><span class="comment">//2.1获取student.xml的path</span></span><br><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> JsoupDemo1.class.getClassLoader().getResource(<span class="string">&quot;student.xml&quot;</span>).getPath();</span><br><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//获取元素对象 Element</span></span><br><span class="line"><span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">System.out.println(elements.size());</span><br><span class="line"><span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> elements.get(<span class="number">0</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> element.text();</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure><ul><li><p>对象的使用： </p><ol><li><p>Jsoup：工具类，可以解析html或xml文档，返回Document</p><ol><li>parse：解析html或xml文档，返回Document<ul><li>Parse（Filein , String charsetName):jiexixml或html文件的。</li><li>parser(String html) ：解析xml或html字符串</li><li>parse(URL url ,int timeoutmillis(时间)):通过网络路径获取指定的html或xml的文档对象</li></ul></li></ol></li><li><p>Document：文档对象。代表内存中的dom树</p><ul><li>获取Element对象<ul><li>getElementsByTag(String  tagName):根据标签名称获取元素对象集合</li><li>getElementsByAttribute(String key):</li><li>getElementsByAttributeValue(Sting key,String value):根据对应的属性名和属性值获取元素对象集合</li><li>getElementById(String id):根据id属性值获取唯一的element对象</li></ul></li></ul></li><li><p>Elements：元素ELement对象的集合。可以当作ArrayList<Element>来使用</Element></p></li><li><p>Element：元素对象</p><ol><li><p>获取子元素对象</p><ol><li><p>getElementsByTag(String  tagName):根据标签名称获取元素对象集合</p></li><li><p>getElementsByAttribute(String key):</p></li><li><p>getElementsByAttributeValue(Sting key,String value):根据对应的属性名和属性值获取元素对象集合</p></li><li><p>getElementById(String id):根据id属性值获取唯一的element对象</p></li></ol></li><li><p>获取属性值</p><ol><li>attr(Sting key)：根据属性名称获取属性值</li></ol></li><li><p>获取文本内容</p><ol><li>String test:(获取所有子标签纯文本内容)</li><li>String html:(获取其标签体所有内容b包括 子标签的字符串内容 和 文本内容)</li></ol></li></ol></li><li><p>Node：节点对象</p><ul><li>是Document和Element的父类</li></ul></li></ol></li></ul><p>快捷查询方式：</p><ol><li><p>selector：选择器</p><ol><li><p>使用的方法：Elements select(String cssQuery)</p><ul><li><p>语法：参考Selector类中定义的语法</p></li><li></li><li><p>```java<br>Elements elements = document.select(“name”);<br>System.out.println(elements);<br>System.out.println(“——-“);</p><p>System.out.println(document.select(“#1”));<br>//获取其user标签并且id属性值为1的age字标签<br>System.out.println(“——-“);</p><p>System.out.println(document.select(“user[id=’1’]”));<br>System.out.println(“——-“);</p><p>System.out.println(document.select(“user[id=’1’] age”));<br>System.out.println(document.select(“user[id=’1’] &gt; age”));</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. XPath：XPath即为XML路径语言，它是一种用来确定xml（标准通用标记语言的子集)文档中的某部分位置的语言</span><br><span class="line"></span><br><span class="line">   * 使用Jsoup的Xpath需要额外导入jar包 </span><br><span class="line">   * 查需w3cshool参考手册，使用xpath的语法完成查询</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//2.获取DOcument对象，根据xml文档获取</span><br><span class="line"> //2.1获取student.xml的path</span><br><span class="line"></span><br><span class="line"> String path = JsoupDemo5.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();</span><br><span class="line"> Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);</span><br><span class="line"> //获取元素对象 Element</span><br><span class="line"> //根据document对象创建JXDoucument对象</span><br><span class="line"> JXDocument jxDocument = new JXDocument(document);</span><br><span class="line"> //结合xpath语法查询</span><br><span class="line"> //查询所有user标签</span><br><span class="line"> List&lt;JXNode&gt; jxNodes = jxDocument.selN(&quot;//user&quot;);</span><br><span class="line"> for(JXNode jxNode: jxNodes)&#123;</span><br><span class="line">     System.out.println(jxNode);</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(&quot;--=--------&quot;</span><br><span class="line"> );</span><br><span class="line"> //查询所有user标签下的 name标签</span><br><span class="line"> List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(&quot;//user/name&quot;);</span><br><span class="line"> for(JXNode jxNode: jxNodes2)&#123;</span><br><span class="line">     System.out.println(jxNode); &#125;</span><br><span class="line"> //查询所有user标签下的 带有id属性的name标签</span><br><span class="line"> System.out.println(&quot;--=--------&quot;);</span><br><span class="line">List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(&quot;//user/name[@id]&quot;);</span><br><span class="line"> for(JXNode jxNode: jxNodes3)&#123;</span><br><span class="line">     System.out.println(jxNode);</span><br><span class="line"> &#125;</span><br><span class="line"> //查询所有user标签下的 带有id属性的name标签id = &#x27;1&#x27;;</span><br><span class="line"> System.out.println(&quot;--=--------&quot;);</span><br><span class="line"> List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(&quot;//user/name[@id = &#x27;13&#x27;]&quot;);</span><br><span class="line"> for(JXNode jxNode: jxNodes4)&#123;</span><br><span class="line">     System.out.println(jxNode);</span><br></pre></td></tr></table></figure></li></ul></li></ol></li></ol><h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><ul><li><p>网络通信三要素:</p><ul><li>IP：电子设备(计算机)在网络中的唯一标识。</li><li>端口：yi那个用程序在计算机中的唯一标识。0~65536</li><li>传输协议：规定了数据传输的规则<ol><li>tcp：安全协议，三次握手。速度稍慢</li><li>udp：不安全的协议。速度快</li></ol></li></ul></li><li><p>服务器：安装了服务器软件的计算机</p></li><li>服务器软件：接受用户的请求，处理请求，做出响应</li><li>web服务器软件：接受用户的请求，处理请求，做出响应<ul><li>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</li><li>web容器</li></ul></li></ul><ul><li><p>常见的java相关的web服务器软件：</p><ul><li>weblogic：oracle公司，大型的JavEE服务器 支持所有的javaee规范，收费的。</li><li>weSphere：IBM公司，大型的JavEE服务器 支持所有的javaee规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavEE服务器 支持所有的javaee规范，收费的。</li><li>Tomcat：Apanche基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。</li></ul></li><li><p>JavaEE：Java语言在企业级开发中使用的技术规范的总和，一定规定了13项大的规范</p></li><li><p>Tomcat：web服务器软件</p><ol><li><p>下载</p></li><li><p>安装：解压压缩包即可</p><ol><li>注意：安装目录建议不要有空格和中文</li></ol></li><li><p>卸载</p></li><li><p>启动：</p><ul><li><p>bin/startup.bat,双击运行该文件即可</p></li><li><p>访问：1. 浏览器输入：<a href="http://localhost:8080">http://localhost:8080</a> 回车访问自己</p><p>​            2.<a href="http://别人的ip:8080">http://别人的ip:8080</a> 访问别人</p></li></ul><ol><li><p>可能一闪而过：</p><ul><li><p>原因：没有正确配置JAVA_HOME环境变量</p></li><li><p>正确配置JAVA_HOME里面配置文件里面有这个名字</p></li></ul></li><li><p>启动报错：</p><ol><li><p>暴力：找到占用的端口号，并且找到对应的进程，杀死该进程</p><ul><li>netstat -ano8080对应的查询PID</li></ul></li><li><p>温柔：修改自身的端口号</p><ul><li><p>conf/server.xml</p></li><li><Connector port="8080" protocol="HTTP/1.1" connectiontimeout="20000" redirectport="8443"></Connector></li><li>一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。<ul><li>好处：在访问时，就不用输入端口号了</li></ul></li></ul></li></ol></li></ol></li><li><p>关闭：</p><ol><li>正常关闭：<ol><li>bin/shutdown.bat</li><li>ctrl+c</li></ol></li><li>强制关闭：<ol><li>直接点击x</li></ol></li></ol></li><li><p>配置</p><ul><li><p>部署项目的方式：</p><ol><li><p>直接将项目放到 webapps文件夹里即可</p><ul><li>/hello：项目的访问路径—&gt;虚拟目录</li><li>简化部署：将项目打包成一个war包，再将war包放在webapps目录下。<ul><li>war包会自动解压</li></ul></li></ul></li><li><p>配置conf/server.xml文件</p><p>​    在<Host>标签体中</Host></p><Context docbase="D:\hello" path="/hehe"><ul><li>docBase：项目存放的路径</li><li>path：虚拟路径</li></ul></Context></li><li><p>在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写</p><Context docbase="D:\hello"></Context></li></ol></li></ul></li></ol></li><li><p>静态项目和动态项目：</p><ul><li><p>目录结构：</p><ul><li><p>java动态项目的目录结构：</p><p>— 项目的根目录</p><p>​    — WEB-INF目录：</p><p>​            —web.xml：web项目的核心配置文件</p><p>​            —classes目录：防止字节码文件的目录</p><p>​            —lib目录：放置jarbao的</p></li></ul></li></ul></li><li><p>将TOmcat集成到IDEA中，并且创建JavaEE的项目，部署项目</p></li></ul><h2 id="Servlet：-server-applet"><a href="#Servlet：-server-applet" class="headerlink" title="Servlet： server applet"></a>Servlet： server applet</h2><ul><li>在运行的小程序 <ul><li>Servlet就是一个接口，定义了Java类被浏览器访问到(tomcat 识别)的柜子</li><li>将我们自定义的一个类，事项Sevlet接口，复写方法。</li></ul></li><li>快速入门：<ol><li>创建JavaEE项目</li><li>定义一个类，实现一个Servlet接口<ul><li>public class ServletDemo1 implements  Servlet(){</li><li>}</li></ul></li><li>实现接口中的抽象方法</li><li>配置Servlet</li></ol></li></ul><p>​    * 在web.xml下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;demo&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.example.demo.SevletDemo1&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;demo&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;demo&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><ul><li>执行原理：<ol><li>当服务器收到服务器的请求后，会i解析请求URL路径，获取访问的Servlet的资源路径</li><li>查找web.xml文件，是否有对应的<url-pattern>标签体内容</url-pattern></li><li>如果有，则在找到对应的<servlet-class>全类名</servlet-class></li><li>tomcat会将字节码文件加载进内存，并且创建其对象</li><li>调用其方法</li></ol></li><li>Sevlet中的生命周期：<ol><li>被创建：执行init方法，只执行一次<ul><li>Servlet什么时候被创建 ？<ol><li>默认情况下，第一次访问时，Servlet被创建</li><li>可以配置执行<Servlet>的创建时机。<ol><li>在<dervlet>标签下配置 <ol><li>第一次访问时，创建<ul><li><load-on-startup>的值为负数</load-on-startup></li></ul></li><li>在服务器启动时，创建<ul><li><load-on-startup>的为0或整数</load-on-startup></li></ul></li></ol></dervlet></li></ol></Servlet></li></ol></li><li>Servlet的init方法，只执行一次，说明一个Servlet在 内存中只存在一个对对象，Servlet时单例的<ul><li>多个用户同时访问时，可能存在线程安全问题。</li><li>解决：精良不要再Sevlet中定义成员变量。即使定义了成员变量，也不要对修改值</li></ul></li></ul></li><li>提供服务：执行service方法，执行多次<ul><li>每次访问Servlet时，Service方法都会被调用一次</li></ul></li><li>被销毁：执行destroy方法，执行一次<ul><li>Servlet被销毁时执行。服务器关闭时，Sevlet被销毁</li><li>只有服务器争创关闭，才会执行destroy方法。</li><li>destroy方法在Sevlet被销毁之前执行，一般用于释放资源</li></ul></li></ol></li></ul><h2 id="Servlet3-0："><a href="#Servlet3-0：" class="headerlink" title="Servlet3.0："></a>Servlet3.0：</h2><ul><li><p>好处：</p><ul><li>支持注解配置。可以不需要web.xml了。</li></ul></li><li><p>步骤：</p><ol><li><p>创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建</p></li><li><p>@WebServlet</p></li><li><p>```<br>String name() default “”;</p><p>String[] value() default {};</p><p>String[] urlPatterns() default {};</p><p>int loadOnStartup() default -1;</p><p>WebInitParam[] initParams() default {};</p><p>boolean asyncSupported() default false;</p><p>String smallIcon() default “”;</p><p>String largeIcon() default “”;</p><p>String description() default “”;</p><p>String displayName() default “”;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">  4. 工作空间项目  和  tomacat部署的web项目</span><br><span class="line">  </span><br><span class="line">     * tomcat真正访问的时&quot;tomcat部署的web项目&quot;，&quot;tomcat&quot;部署的web项目&quot;对应着&quot;工作空间项目&quot;的web目录下的所有资源</span><br><span class="line">     * WEB-INF目录下的资源不能被浏览器直接访问。</span><br><span class="line">  </span><br><span class="line">  5. 断点调试：使用“小虫子”dubug启动</span><br><span class="line">  </span><br><span class="line">  ![image-20220624161858415](javaweb/image-20220624161858415.png)</span><br><span class="line"></span><br><span class="line">Servlet访问路径</span><br><span class="line"></span><br><span class="line">1. urlpratten：Servlet访问路径</span><br><span class="line">   1. 一个SEvlet可以定义多个路径：@WebServbvlet(&#123; &quot;/d4&quot;,&quot;/dd4&quot;,&quot;/ddd4&quot;&#125;)</span><br><span class="line">   2. 路径定义的规则：</span><br><span class="line">      1. /xxx：路径匹配</span><br><span class="line">      2. /xxx/xxx：多层路径，目录结构</span><br><span class="line">      3. *.do:扩展名匹配</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## HTTP：</span><br><span class="line"></span><br><span class="line">* 概念：Hyper TextTransfer Protocol 超文本传输协议</span><br><span class="line"></span><br><span class="line">  * 传输协议：定义了，客户端和服务器端通信时，发送数据的格式</span><br><span class="line">  * 特点：</span><br><span class="line">    1. 基于TCP/IP的高级协议</span><br><span class="line">    2. 默认端口号：80</span><br><span class="line">       1. http://www.itcast.cn:</span><br><span class="line">    3. 基于请求/响应模型的：一次请求一次响应</span><br><span class="line">    4. 无状态的：每次请求之间相互独立，不能交互数据</span><br><span class="line">  * 历史版本：</span><br><span class="line">    * 1.0：每一次请求响应都会建立新的连接</span><br><span class="line">    * 1.1：服用连接</span><br><span class="line"></span><br><span class="line">* 请求消息数据格式</span><br><span class="line"></span><br><span class="line">  1. 请求行</span><br><span class="line">     * 请求方式  请求url 请求协议/版本</span><br><span class="line">     * GET/login.html HTTP/1.1</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    * 请求方式：</span><br><span class="line">      * HTTP协议有7种请求方式吗，常用的有两种</span><br><span class="line">        * GET：</span><br><span class="line">          1. 请求参数在请求行中</span><br><span class="line">          2. 请求的url长度有限制的</span><br><span class="line">          3. 不太安全</span><br><span class="line">        * post：</span><br><span class="line">          1. 请求参数在请求中</span><br><span class="line">          2. 请求的url长度没有限制</span><br><span class="line">          3. 相对安全   </span><br><span class="line"></span><br><span class="line">  1. 请求头</span><br><span class="line">     * 请求头名称：请求头值</span><br><span class="line">     * 常见的请求头：</span><br><span class="line">       * User-Agent：浏览器高送服务器，我访问你使用的浏览器版本信息</span><br><span class="line">         * 可以在服务器端获取该头的信息，解决浏览器的兼容性问题</span><br><span class="line">       * Referer：http://localhost/login/html</span><br><span class="line">         * 告送服务器，我(当前请求)从哪里来？</span><br><span class="line">           * 作用：</span><br><span class="line">             1. 防盗链：</span><br><span class="line">             2. 统计工作：</span><br><span class="line">  2. 请求空行</span><br><span class="line">     * 空行，就是用于分割post请求体和请求头</span><br><span class="line">  3. 请求体</span><br><span class="line">     * 封装post请求消息的请求参数的</span><br><span class="line"></span><br><span class="line">  * 字符串格式</span><br><span class="line"></span><br><span class="line">  GET /login.html HTTP/1.1</span><br><span class="line">  Host: localhost</span><br><span class="line">  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0</span><br><span class="line">  Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">  Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">  Accept-Encoding: gzip, deflate, br</span><br><span class="line">  Connection: keep-alive</span><br><span class="line">  Cookie: Idea-b8888820=59bbd55c-ee25-42d3-b256-7594767ad0a4</span><br><span class="line">  Upgrade-Insecure-Requests: 1</span><br><span class="line">  Sec-Fetch-Dest: document</span><br><span class="line">  Sec-Fetch-Mode: navigate</span><br><span class="line">  Sec-Fetch-Site: none</span><br><span class="line">  Sec-Fetch-User: ?1</span><br><span class="line">  If-Modified-Since: Fri, 24 Jun 2022 08:16:30 GMT</span><br><span class="line">  If-None-Match: W/&quot;253-1656058590425&quot;</span><br><span class="line"></span><br><span class="line">* 响应消息数据格式</span><br><span class="line"></span><br><span class="line">## Request：</span><br><span class="line"></span><br><span class="line"> 1. request对象和response对象的原理</span><br><span class="line"></span><br><span class="line">    1. request和response对象是由服务器创建的。我们来使用它们</span><br><span class="line">        2. request对象是来获取请求消息 ，response对象时来设置响应消息</span><br><span class="line"></span><br><span class="line"> 2. request：对象继承体系结构：</span><br><span class="line"></span><br><span class="line">    1. ServletRequest --接口</span><br><span class="line"></span><br><span class="line">        ​|继承</span><br><span class="line"></span><br><span class="line">        2. HttpServletRequest -- 接口</span><br><span class="line"></span><br><span class="line">        ​|       实现</span><br><span class="line"></span><br><span class="line">        3. org.apache.cataline.connector.RequestFacade 类(tomcat)</span><br><span class="line"></span><br><span class="line"> 3. request功能：</span><br><span class="line"></span><br><span class="line">    1. 获取请求消息</span><br><span class="line"></span><br><span class="line">       1. 获取请求行数据</span><br><span class="line"></span><br><span class="line">          * GET /demo1?name=zhangsan  HTTP/1.1</span><br><span class="line"></span><br><span class="line">          * 方法：</span><br><span class="line"></span><br><span class="line">            1. 获取请求方式：GET</span><br><span class="line">               * String getMethod()</span><br><span class="line">            2. (*)获取虚拟目录：/</span><br><span class="line">               * String getContestPath()</span><br><span class="line">            3. 获取Servlet路径：/demo1</span><br><span class="line">               * String getServletPath()</span><br><span class="line">            4. 获取get方式请求参数：name=zhangsan</span><br><span class="line">               * String getQueryString()</span><br><span class="line">            5. (*)获取请求URI：</span><br><span class="line">               * String getRequestURI() : /虚拟路径/demo1</span><br><span class="line">               * StringBUffer getRequestURL() :http://localhost/虚拟路径/demo1</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            * URL：统一资源定位符：http://localhost/day/虚拟路径/demo 中华人民共和国</span><br><span class="line"></span><br><span class="line">            * URI：统一资源标识符：/虚拟目录/demo1    共和国</span><br><span class="line"></span><br><span class="line">            6. 获取协议及版本：HTTP/1.1</span><br><span class="line"></span><br><span class="line">            * String getProtocol()</span><br><span class="line"></span><br><span class="line">            7.  获取客户机的IP地址：</span><br><span class="line"></span><br><span class="line">            * String getRemoteAddr()</span><br><span class="line"></span><br><span class="line">       2. 获取请求头数据</span><br><span class="line"></span><br><span class="line">          * 方法：</span><br><span class="line">            * String getHeader(String name):通过请求头的名称获取请求头的值</span><br><span class="line">            * Enumeration&lt;Sting&gt;  getHeaderNames():获取所有的请求头名称</span><br><span class="line"></span><br><span class="line">       3. 获取请求体数据：</span><br><span class="line"></span><br><span class="line">          * 请求体：只有POST请求方式，才有请求体，在请求体重封装了POST请求的请求参数</span><br><span class="line">          * 步骤：</span><br><span class="line">            1. 获取流对象</span><br><span class="line">               * BufferedReader getReader() : 获取字符输入流，只能操作字符数据</span><br><span class="line">               * ServletInputStream getInputStream() : 获取字节输入流，可以操作所有数据类型</span><br><span class="line">            2. 再从流对象中拿数据</span><br><span class="line"></span><br><span class="line">    2. 其他功能：</span><br><span class="line"></span><br><span class="line">       1. 获取请求参数通用方式</span><br><span class="line">       1. String getParameter(String name ):根据参数名称获取参数值</span><br><span class="line">       2. String[] getParameterValues(String name):根据参数名称获取参数值的数组 hobby=xx&amp;hobby=game</span><br><span class="line">       3. Enumeration&lt;String&gt; getParameterNames():获取所有请求的参数名称</span><br><span class="line">       4. Map&lt;String,String[]&gt; getParameterMap():获取所有参数的map集合</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">       * 中文乱码问题：</span><br><span class="line">         * get方式：tomcat 8 已经将get方式乱码问题解决了</span><br><span class="line">         * post方式：会乱码</span><br><span class="line">           * 解决在获取参数前，设置request的编码request.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line"></span><br><span class="line">       2. 请求转发：一种在服务器内部的资源跳转方式</span><br><span class="line">          1. 步骤：</span><br><span class="line">             1. 通过request对象获取请求转发器对象：RequestDispatcher getRequestDispatcher(String path)</span><br><span class="line">             2. 使用RequestDispatcher对象进行转发：forward(ServletRequest request, ServletResponse response)</span><br><span class="line">          2. 特点：</span><br><span class="line">             1. 浏览器地址栏路径不发生变化</span><br><span class="line">             2. 只能转发到当前服务器内部资源中。</span><br><span class="line">             3. 转发是一次请求</span><br><span class="line"></span><br><span class="line">       3. 共享数据：</span><br><span class="line">          * 域对象：一个有作用范围的对象，可以在范围内共享数据</span><br><span class="line">          * request域：代表一次请求的范围，一般用于请求转发的多个资源中共享数据</span><br><span class="line">          * 方法：</span><br><span class="line">            1. void setAttribut(String name, Object obj):存储数据</span><br><span class="line">            2. Object getAttitude(String name):通过获取值</span><br><span class="line">            3. void removeAttribute(String name):通过键移除键值对</span><br><span class="line">       4. 获取ServletContext：</span><br><span class="line">          * ServletContext getSerbletContext()</span><br><span class="line"></span><br><span class="line">## 案例：用户登录</span><br><span class="line"></span><br><span class="line">* 用户登录案例需求：</span><br><span class="line"></span><br><span class="line">  1. 编写login.html登陆页面</span><br><span class="line"></span><br><span class="line">     ​username &amp; pasword 两个输入框</span><br><span class="line"></span><br><span class="line">  2. 使用Druid数据库连接池技术，操作mysql，day14数据库中user表</span><br><span class="line"></span><br><span class="line">  3. 使用JdbcTemplate技术封装JDBC</span><br><span class="line"></span><br><span class="line">  4. 登陆成功跳转到SuccessServlet展示：登陆成功用户名，欢迎您</span><br><span class="line"></span><br><span class="line">  5. 登录失败跳转到FailServlet展示：登陆失败，用户名或密码错误</span><br><span class="line"></span><br><span class="line">1. login.html中form表单的action路径 的写法</span><br><span class="line"></span><br><span class="line">   * 虚拟目录+Servlet的资源路径</span><br><span class="line"></span><br><span class="line">2. BeanUtils工具类，简化数据封装</span><br><span class="line"></span><br><span class="line">   * 用于封装JavaBean的</span><br><span class="line"></span><br><span class="line">     1. JavaBean：标准的Java类</span><br><span class="line"></span><br><span class="line">        1. 要求：</span><br><span class="line">           1. 类必须被public修饰</span><br><span class="line">           2. 必须提供空参的构造器</span><br><span class="line">           3. 成员变量必须使用private修饰</span><br><span class="line">           4. 提供公共setter和getter方法</span><br><span class="line">        2. 功能：封装数据</span><br><span class="line"></span><br><span class="line">     2. 概念：</span><br><span class="line"></span><br><span class="line">        1. 成员变量：</span><br><span class="line"></span><br><span class="line">        2. 属性：setter和getter方法截取后的产物</span><br><span class="line"></span><br><span class="line">           例如：getUsername() --&gt; Username --&gt;username(这是属性值)</span><br><span class="line"></span><br><span class="line">     3. 方法：</span><br><span class="line"></span><br><span class="line">        1. setProperty</span><br><span class="line">        2. getProper</span><br><span class="line">        3. populate(Object obj , Map map):将map集合的键值对信息封装到对应的JavaBean对象中</span><br><span class="line"></span><br><span class="line">## Response</span><br><span class="line"></span><br><span class="line">1. 请求消息：客户端发给服务器端的数据</span><br><span class="line">   * 数据格式：</span><br><span class="line">     1. 请求行</span><br><span class="line">     2. 请求头</span><br><span class="line">     3. 请求空行</span><br><span class="line">     4. 请求体</span><br><span class="line">2. 响应消息：服务器端送给客户端的数据</span><br><span class="line">   * 数据格式</span><br><span class="line">     1. 相应行：</span><br><span class="line">        1. 组成：协议/版本 响应状态码 状态码描述</span><br><span class="line">        2. 响应状态码：服务器高送客户端浏览器本次请求和响应的一个状态</span><br><span class="line">           1. 状态码都是3位数字</span><br><span class="line">           2. 分类：</span><br><span class="line">               1. 1xx：服务器就收客户端消息，蛋没有接受完成，等待一段时间后，发送1xx多状态码</span><br><span class="line">               2. 2xx：成功。代表200</span><br><span class="line">               3. 3xx：重定向。代表：302(重定向)，304(访问缓存)</span><br><span class="line">               4. 4xx：客户端错误</span><br><span class="line">                   * 代表：</span><br><span class="line">                     * 404(请求路径没有对应消息)</span><br><span class="line">                     * 405:请求方式没有对应的doxxx方法</span><br><span class="line">               5. 5xx：服务器端错误。代表：500(服务器内部出现异常)</span><br><span class="line">        3. 响应头：</span><br><span class="line">           1. 格式：头名称：值</span><br><span class="line">           2. 常见的响应头：</span><br><span class="line">              1. Content-Type：服务器告送客户端段本次响应体数据格式以及编码格式</span><br><span class="line">              2. Content-disposition：服务器告送客户端以什么格式打开响应体数据</span><br><span class="line">                 * 值：：</span><br><span class="line">                   * in-line：默认值，在当前页面内打开</span><br><span class="line">                   * attachment；filenme=xxx：以附件形式打开响应体。文件下载</span><br><span class="line">        4. 相应空行 </span><br><span class="line">        5. 响应体:真实的传输数据</span><br><span class="line"></span><br><span class="line">## Response对象</span><br><span class="line"></span><br><span class="line"> * 功能：设置响应消息</span><br><span class="line"></span><br><span class="line">   1. 设置响应行</span><br><span class="line"></span><br><span class="line">      1. 格式：HTTP/1.1 200 ok</span><br><span class="line">      2. 设置状态码：setStatus(int sc)</span><br><span class="line"></span><br><span class="line">   2. 设置响应头:setHeader(String name, String value)</span><br><span class="line"></span><br><span class="line">   3. 设置响应体:</span><br><span class="line"></span><br><span class="line">      * 使用步骤：</span><br><span class="line"></span><br><span class="line">        1. 获取输出流</span><br><span class="line"></span><br><span class="line">           * 字符输出流；PrintWriter getWriter()</span><br><span class="line"></span><br><span class="line">           * 字节输出流：ServletOutputStream getoutputStream  </span><br><span class="line"></span><br><span class="line">        2. 使用输出流，将数据输出到客户端浏览器</span><br><span class="line"></span><br><span class="line"> * 案例：</span><br><span class="line"></span><br><span class="line">   1. 完成重定向</span><br><span class="line"></span><br><span class="line">      * 重定向：资源跳转的方式</span><br><span class="line"></span><br><span class="line">      * 代码实现：(其实是两个方法，先告送302，在设置响应头)</span><br><span class="line"></span><br><span class="line">        * response.sendRedirect(&quot;/day15/responseDemo2&quot;);</span><br><span class="line"></span><br><span class="line">      * 重定向的特点：redirect</span><br><span class="line"></span><br><span class="line">        1. 地址栏发生变化</span><br><span class="line">        2. 重定向可以访问其他站点(d服务器)的资源</span><br><span class="line">        3. 转发是一次请求，可以使用request对象来共享数据</span><br><span class="line"></span><br><span class="line">      * 转发的特点：forward</span><br><span class="line"></span><br><span class="line">        1. 转发地址栏路径不变</span><br><span class="line">        2. 转发只能访问当前服务器下的资源</span><br><span class="line">        3. 转发一次请求，可以使用request对象来共享数据</span><br><span class="line"></span><br><span class="line">      * forward 和 redirect 区别</span><br><span class="line"></span><br><span class="line">      * 路径写法：</span><br><span class="line"></span><br><span class="line">        1. 路径分类：</span><br><span class="line"></span><br><span class="line">           1. 相对路径：</span><br><span class="line"></span><br><span class="line">              1. ./ 当前路径</span><br><span class="line">              2.  ../上级路径</span><br><span class="line"></span><br><span class="line">           2. 绝对路径：</span><br><span class="line"></span><br><span class="line">              1. 如/day15/responseDemo2</span><br><span class="line"></span><br><span class="line">              2. 以/开头的路径</span><br><span class="line"></span><br><span class="line">                 规则：判断定义的路径是个谁用的？判断请求将来从哪儿来 </span><br><span class="line"></span><br><span class="line">                 * 给客户端浏览器使用：</span><br><span class="line"></span><br><span class="line">   2. 服务器输出字符数据到浏览器</span><br><span class="line"></span><br><span class="line">      * 步骤：</span><br><span class="line"></span><br><span class="line">        1. 获取字符输出流</span><br><span class="line">        2. 输出数据</span><br><span class="line"></span><br><span class="line">      * 注意：</span><br><span class="line"></span><br><span class="line">        * 乱码问题：</span><br><span class="line"></span><br><span class="line">          1. PrintWriter pw = response.getWriter();获取的流的默认编码是ISO-8859-1</span><br><span class="line">          2. 设置该流道德默认编码</span><br><span class="line">          3. 告送浏览器响应体使用的编码</span><br><span class="line"></span><br><span class="line">          // 简单的形式，设置编码，是在获取流之前设置</span><br><span class="line"></span><br><span class="line">          response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">   3. 服务器输出字节数据到浏览器</span><br><span class="line"></span><br><span class="line">      * 步骤；</span><br><span class="line">        1. 获取字节输出流</span><br><span class="line">        2. 输出图片</span><br><span class="line"></span><br><span class="line">   4. 验证码</span><br><span class="line"></span><br><span class="line">      1. 本质：图片</span><br><span class="line">      2. 目的：防止恶意表单注册</span><br><span class="line"></span><br><span class="line">## ServletContext对象</span><br><span class="line"></span><br><span class="line">1. 概念： 代表整个web应用，可以和程序的容器(服务器)来通信</span><br><span class="line"></span><br><span class="line">2. 获取：</span><br><span class="line"></span><br><span class="line">   1. 通过request对象获取</span><br><span class="line"></span><br><span class="line">      request. </span><br><span class="line"></span><br><span class="line">3. 功能：</span><br><span class="line"></span><br><span class="line">   1. 获取MIME类型：</span><br><span class="line">      * MIME类型：在护栏网通信过程中定义的一种文件数据类型</span><br><span class="line">        * 格式：大类型/小类型 text/html   image/jpeg</span><br><span class="line">      * 获取：String 个体MineType(String file)</span><br><span class="line">   2. 与对象： 共享数据</span><br><span class="line">      1. setAttribute(String name, Object value)</span><br><span class="line">      2. getAttribute(String name)</span><br><span class="line">      3. removeAttribute(String name)</span><br><span class="line">      4. servletContext对象范围：所有用户所有请求的数据</span><br><span class="line">   3. 获取文件的真实(服务器)路径</span><br><span class="line">      1. 方法：String getRealPath (String Path)</span><br><span class="line">         1. String b = context.getRealPath(&quot;/b.txt&quot;)//web目录下资源访问</span><br><span class="line">         2. String b = context.getRealPath(&quot;/WEB-INF/c.txt&quot;)//WEB-INF目录下资源访问</span><br><span class="line">         3. String b = context.getRealPath(&quot;/WEB-INF/classes/a.txt&quot;)//src目录下资源访问</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 案例:</span><br><span class="line"></span><br><span class="line">1. 定义页面，编辑超链接href属性，只想Servlet，传递资源名称filename</span><br><span class="line">2. 定义Servlet</span><br><span class="line">   1. 获取文件名称</span><br><span class="line">   2. 使用字节输入流加载文件进内存</span><br><span class="line">   3. 指定response的响应头：content-disposition：attachment；filename=xxx</span><br><span class="line">   4. 将数据写到response输出流</span><br><span class="line"></span><br><span class="line">* 问题：</span><br><span class="line">  * 中文文件问题</span><br><span class="line">    * 解决思路：</span><br><span class="line">      1. 获取客户端使用的浏览器版本信息</span><br><span class="line">      2. 根据不同的版本信息，设置filename的编码方式不同</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 会话技术：</span><br><span class="line"></span><br><span class="line">1. 会话： 一次绘画中包含多次请求和响应。</span><br><span class="line">   * 一次会话：浏览器第一次给服务器资源发送请求，建立会话，知道有一方断开为止</span><br><span class="line">2. 共呢个：在一次绘画的范围内多次请求，共享数据</span><br><span class="line">3. 方式：</span><br><span class="line">   1. 客户端会话技术：Cookie</span><br><span class="line">   2. 客户端会话技术：Session</span><br><span class="line"></span><br><span class="line">### Cookie：</span><br><span class="line"></span><br><span class="line">1. 客户端会话技术，将数据保存到客户端</span><br><span class="line"></span><br><span class="line">2. 使用步骤：</span><br><span class="line"></span><br><span class="line">   1. 创建Cookie对象，绑定数据</span><br><span class="line">      * new Cookie(String name, String value)</span><br><span class="line">   2. 发送Cookie对象</span><br><span class="line">      * response.addCookie(Cokie cookie)</span><br><span class="line"></span><br><span class="line">   3. 获取Cookie，拿到数据</span><br><span class="line"></span><br><span class="line">   * Cookie[] request.getcookies()</span><br><span class="line"></span><br><span class="line"> 3. 实现原理</span><br><span class="line"></span><br><span class="line">    * 基于响应头set-cookie和请求头cookie实现</span><br><span class="line"></span><br><span class="line">    1. ![image-20220629100803516](javaweb/image-20220629100803516.png)</span><br><span class="line"></span><br><span class="line"> 4. cookie的细节</span><br><span class="line"></span><br><span class="line">     1. 一次可不可以发送多个cookie？</span><br><span class="line">        * 可以</span><br><span class="line">        * 可以创建多个Cookie对象，使用respond调用多次addCookie方法发送cookie即可。</span><br><span class="line">        </span><br><span class="line">         2. cookie在浏览器中保存多长时间？</span><br><span class="line">         1. 默认情况下，当浏览器关闭后，Cookie数据被销毁</span><br><span class="line">         2. 持久化存储：</span><br><span class="line">         * setMaxAge(int seconds)</span><br><span class="line">           1. 证书：将Cookie数据写到硬盘的文件中。持久化储存。cookie存活时间。</span><br><span class="line">           2. 负数默认值。</span><br><span class="line">           3. 零：删除cookie信息</span><br><span class="line">         3. cookie能不能存中文？</span><br><span class="line">         * 能</span><br><span class="line">         4. cookie获取范围多大？</span><br><span class="line">         1. 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享</span><br><span class="line">            * 默认情况下cookie不能共享</span><br><span class="line">            * setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录</span><br><span class="line">              * 如果要共享，则可以将path设置为&quot;/&quot;</span><br><span class="line">         2. 不同的tomcat服务器间cookie共享问题？</span><br><span class="line">            * setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享</span><br><span class="line">              * setDomain(&quot;.baidu.com&quot;),那么tieba.baidu.com和news.baidu.com中dookie中可以共享</span><br><span class="line"></span><br><span class="line">   5. Cookie的特点和作用</span><br><span class="line"></span><br><span class="line">      1. cookie存储数据在客户端浏览器</span><br><span class="line">                        2. 浏览器对单个cookie的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)</span><br><span class="line"></span><br><span class="line">      * 作用：</span><br><span class="line">        * 在不登陆的情况下，完成服务器对客户端的身份识别</span><br><span class="line">        * cookie一般用于存储少量的不太敏感的数据</span><br><span class="line"></span><br><span class="line">   6. 案例 ：记住上次访问时间</span><br><span class="line"></span><br><span class="line">      1. 需求：</span><br><span class="line">              1. 访问一个Servlet，如果是第一次访问，则提示：你好，欢迎回来，首次访问</span><br><span class="line">              2. 再次访问，欢迎回来，你上次访问的时间是字符串</span><br><span class="line">                        2. 分析：</span><br><span class="line">              1. 可以采用Cookie来完成</span><br><span class="line">              2. 在服务器中的Servlet判断是否有一个名为lastTime的cookie</span><br><span class="line">                 1. 有：不是第一次访问</span><br><span class="line">                    1. 响应数据：欢迎回来，您上次访问时间为：2018年6月10日11：50：20</span><br><span class="line">                    2. 写回Cookie：lastTime=20186月10日时间</span><br><span class="line">                 2. 没有：</span><br><span class="line">                    1. 响应数据：您好，欢迎你首次访问</span><br><span class="line">                    2. 写回Cookie：lastTime=时间</span><br><span class="line"></span><br><span class="line">1. 概念：</span><br><span class="line">   * Java Server Pages：java服务器端页面</span><br><span class="line">     * 可以理解为：一个特殊的页面，其中可以指定定义html标签，游客一定java代码</span><br><span class="line">     * 用于简化书写！！！ </span><br><span class="line">2. 原理</span><br><span class="line">   * JSP本质上就是一个Servlet</span><br><span class="line">3. JSP的脚本：JSP定义Java代码的方式</span><br><span class="line">   1. &lt;% 代码 %&gt; : 定义的java代码，在service方法中。service方法中可以定义什么，该脚本 中就可以定义什么。</span><br><span class="line">   2. &lt;%! 代码 %&gt; : 定义的java代码，在jsp转换后的java类的成员位置。</span><br><span class="line">   3. &lt;%= 代码 %&gt;: 定义的java代码，会输出到页面上。输出语句中可以定义社么，该脚本中就可以定义什么。</span><br><span class="line">4. JSP的内置对象：</span><br><span class="line">   * 在jsp也面中不需要获取和创建，可以直接使用的对象</span><br><span class="line">   * jsp一共有9个内置对象。</span><br><span class="line">   * 几天学习3个：</span><br><span class="line">     * request</span><br><span class="line">     * response</span><br><span class="line">     * out：字符输出对象。可以将数据输出到页面上和response.getWriter()类似</span><br><span class="line">       * response.getWriter()和out.write()的区别：</span><br><span class="line">         * 在tomcat做出相应之前，像会找到response缓冲区数据，再找out缓冲区数据</span><br><span class="line"></span><br><span class="line">## Session:</span><br><span class="line"></span><br><span class="line"> 1. 概念：服务器端绘画技术，在一次会话多次请求之间共享数据，将数据保存在服务器端的对象内。HttpSession</span><br><span class="line"></span><br><span class="line"> 2. 快速入门：</span><br><span class="line"></span><br><span class="line">    1. 获取HttpSession对象：</span><br><span class="line"></span><br><span class="line">       HttpSession session = request.getSession();</span><br><span class="line"></span><br><span class="line">    2. 使用HttpSession对象：</span><br><span class="line"></span><br><span class="line">       1. Object getAttribute(String name)</span><br><span class="line">       2. void setAttribute(String name, Object value)</span><br><span class="line">       3. v oid removeAttribute(String name)</span><br><span class="line"></span><br><span class="line"> 3. 原理</span><br><span class="line"></span><br><span class="line">    * Session的实现是依赖于Cookie</span><br><span class="line"></span><br><span class="line"> 4. 细节：</span><br><span class="line"></span><br><span class="line">    1. 当客户端关闭后，服务器不关闭，量词获取session是否为同一个？</span><br><span class="line"></span><br><span class="line">       * 默认情况下。不是。</span><br><span class="line">       * 如果需要相同，则可以闯将Cookie，键为JSESSIONID，设置最大存活时间，让coookie持久化保存。</span><br><span class="line">         *  Cookie c = new Cookie(&quot;JSESSIONID&quot;,session.getId());</span><br><span class="line">         * c.setMaxAge(60*60);</span><br><span class="line">         * response.addCookie(c);</span><br><span class="line"></span><br><span class="line">    2. 客户端不关闭，服务器关闭后，两次获取的SESSION是同一个马？</span><br><span class="line"></span><br><span class="line">       * 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作</span><br><span class="line">         * session的钝化：</span><br><span class="line">           * 在服务器正常关闭之前，将session对象序列化到硬盘上</span><br><span class="line">         * session的活化：</span><br><span class="line">           * 在服务器启动后，将session文件转化为内存中的session对象即可</span><br><span class="line"></span><br><span class="line">    3. session什么时候被销毁？</span><br><span class="line"></span><br><span class="line">       1. 服务器关闭</span><br><span class="line"></span><br><span class="line">       2. session对象调用invalidate().</span><br><span class="line"></span><br><span class="line">       3. session默认失效时间30分钟</span><br><span class="line"></span><br><span class="line">          ​选择性配置修改</span><br><span class="line"></span><br><span class="line">          &lt;session-config&gt;</span><br><span class="line"></span><br><span class="line">          ​&lt;session-timeout&gt;30&lt;?session-timeout&gt;</span><br><span class="line"></span><br><span class="line">          &lt;/session-config&gt;</span><br><span class="line"></span><br><span class="line"> 5.  session的特点</span><br><span class="line"></span><br><span class="line">        1. session用于储存一次绘画的多次请求的数据，存在服务器端</span><br><span class="line">        2. session可以存储任意类型，任意大小的数据</span><br><span class="line"></span><br><span class="line">​session与Cookie的区别：</span><br><span class="line"></span><br><span class="line">1. session存储数据在服务器端，Cookie在客户端</span><br><span class="line">2. session没有数据大小限制，Cookie有</span><br><span class="line">3. session数据安全，Cookie相对于不安全 </span><br><span class="line"></span><br><span class="line">1. JSP:</span><br><span class="line">1. 指令</span><br><span class="line">2. 注释</span><br><span class="line">3. 内置对象</span><br><span class="line"></span><br><span class="line">2. MVC开发模式</span><br><span class="line">3. EL表达式</span><br><span class="line">4. JSTL标签</span><br><span class="line">5. 三层架构</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## JSP:</span><br><span class="line">1. 指令</span><br><span class="line">* 作用：用于配置JSP页面，导入资源文件</span><br><span class="line">* 格式：</span><br><span class="line">&lt;%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %&gt;</span><br><span class="line">* 分类：</span><br><span class="line">1. page： 配置JSP页面的</span><br><span class="line">* contentType：等同于response.setContentType()</span><br><span class="line">1. 设置响应体的mime类型以及字符集</span><br><span class="line">2. 设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）</span><br><span class="line">* import：导包</span><br><span class="line">* errorPage：当前页面发生异常后，会自动跳转到指定的错误页面</span><br><span class="line">* isErrorPage：标识当前也是是否是错误页面。</span><br><span class="line">* true：是，可以使用内置对象exception</span><br><span class="line">* false：否。默认值。不可以使用内置对象exception</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. include： 页面包含的。导入页面的资源文件</span><br><span class="line">* &lt;%@include file=&quot;top.jsp&quot;%&gt;</span><br><span class="line">3. taglib： 导入资源</span><br><span class="line">* &lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span><br><span class="line">* prefix：前缀，自定义的</span><br><span class="line">2. 注释:</span><br><span class="line">1. html注释：</span><br><span class="line">&lt;!-- --&gt;:只能注释html代码片段</span><br><span class="line">2. jsp注释：推荐使用</span><br><span class="line">&lt;%-- --%&gt;：可以注释所有</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 内置对象</span><br><span class="line">* 在jsp页面中不需要创建，直接使用的对象</span><br><span class="line">* 一共有9个：</span><br><span class="line">变量名真实类型作用</span><br><span class="line">* pageContextPageContext当前页面共享数据，还可以获取其他八个内置对象</span><br><span class="line">* requestHttpServletRequest一次请求访问的多个资源(转发)</span><br><span class="line">* sessionHttpSession一次会话的多个请求间</span><br><span class="line">* applicationServletContext所有用户间共享数据</span><br><span class="line">* responseHttpServletResponse响应对象</span><br><span class="line">* pageObject当前页面(Servlet)的对象  this</span><br><span class="line">* outJspWriter输出对象，数据输出到页面上</span><br><span class="line">* configServletConfigServlet的配置对象</span><br><span class="line">* exceptionThrowable异常对象</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## MVC：开发模式</span><br><span class="line">1. jsp演变历史</span><br><span class="line">1. 早期只有servlet，只能使用response输出标签数据，非常麻烦</span><br><span class="line">2. 后来又jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中即写大量的java代码，有写html表，造成难于维护，难于分工协作</span><br><span class="line">3. 再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性</span><br><span class="line"></span><br><span class="line">2. MVC：</span><br><span class="line">1. M：Model，模型。JavaBean</span><br><span class="line">* 完成具体的业务操作，如：查询数据库，封装对象</span><br><span class="line">2. V：View，视图。JSP</span><br><span class="line">* 展示数据</span><br><span class="line">3. C：Controller，控制器。Servlet</span><br><span class="line">* 获取用户的输入</span><br><span class="line">* 调用模型</span><br><span class="line">* 将数据交给视图进行展示</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 优缺点：</span><br><span class="line">1. 优点：</span><br><span class="line">1. 耦合性低，方便维护，可以利于分工协作</span><br><span class="line">2. 重用性高</span><br><span class="line"></span><br><span class="line">2. 缺点：</span><br><span class="line">1. 使得项目架构变得复杂，对开发人员要求高</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## EL表达式</span><br><span class="line">1. 概念：Expression Language 表达式语言</span><br><span class="line">2. 作用：替换和简化jsp页面中java代码的编写</span><br><span class="line">3. 语法：$&#123;表达式&#125;</span><br><span class="line">4. 注意：</span><br><span class="line">* jsp默认支持el表达式的。如果要忽略el表达式</span><br><span class="line">1. 设置jsp中page指令中：isELIgnored=&quot;true&quot; 忽略当前jsp页面中所有的el表达式</span><br><span class="line">2. \$&#123;表达式&#125; ：忽略当前这个el表达式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. 使用：</span><br><span class="line">1. 运算：</span><br><span class="line">* 运算符：</span><br><span class="line">1. 算数运算符： + - * /(div) %(mod)</span><br><span class="line">2. 比较运算符： &gt; &lt; &gt;= &lt;= == !=</span><br><span class="line">3. 逻辑运算符： &amp;&amp;(and) ||(or) !(not)</span><br><span class="line">4. 空运算符： empty</span><br><span class="line">* 功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0</span><br><span class="line">* $&#123;empty list&#125;:判断字符串、集合、数组对象是否为null或者长度为0</span><br><span class="line">* $&#123;not empty str&#125;:表示判断字符串、集合、数组对象是否不为null 并且 长度&gt;0</span><br><span class="line">2. 获取值</span><br><span class="line">1. el表达式只能从域对象中获取值</span><br><span class="line">2. 语法：</span><br><span class="line">1. $&#123;域名称.键名&#125;：从指定域中获取指定键的值</span><br><span class="line">* 域名称：</span><br><span class="line">1. pageScope--&gt; pageContext</span><br><span class="line">2. requestScope --&gt; request</span><br><span class="line">3. sessionScope --&gt; session</span><br><span class="line">4. applicationScope --&gt; application（ServletContext）</span><br><span class="line">* 举例：在request域中存储了name=张三</span><br><span class="line">* 获取：$&#123;requestScope.name&#125;</span><br><span class="line"></span><br><span class="line">2. $&#123;键名&#125;：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line">​</span><br><span class="line">​3. 获取对象、List集合、Map集合的值</span><br><span class="line">​1. 对象：$&#123;域名称.键名.属性名&#125;</span><br><span class="line">​* 本质上会去调用对象的getter方法</span><br><span class="line">​</span><br><span class="line">​2. List集合：$&#123;域名称.键名[索引]&#125;</span><br><span class="line">​</span><br><span class="line">​3. Map集合：</span><br><span class="line">​* $&#123;域名称.键名.key名称&#125;</span><br><span class="line">​* $&#123;域名称.键名[&quot;key名称&quot;]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 隐式对象：</span><br><span class="line">* el表达式中有11个隐式对象</span><br><span class="line">* pageContext：</span><br><span class="line">* 获取jsp其他八个内置对象</span><br><span class="line">* $&#123;pageContext.request.contextPath&#125;：动态获取虚拟目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​</span><br><span class="line">## JSTL</span><br><span class="line">1. 概念：JavaServer Pages Tag Library  JSP标准标签库</span><br><span class="line">* 是由Apache组织提供的开源的免费的jsp标签&lt;标签&gt;</span><br><span class="line"></span><br><span class="line">2. 作用：用于简化和替换jsp页面上的java代码</span><br><span class="line"></span><br><span class="line">3. 使用步骤：</span><br><span class="line">1. 导入jstl相关jar包</span><br><span class="line">2. 引入标签库：taglib指令：  &lt;%@ taglib %&gt;</span><br><span class="line">3. 使用标签</span><br><span class="line"></span><br><span class="line">4. 常用的JSTL标签</span><br><span class="line">1. if:相当于java代码的if语句</span><br><span class="line">1. 属性：</span><br><span class="line">            * test 必须属性，接受boolean表达式</span><br><span class="line">                * 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容</span><br><span class="line">                * 一般情况下，test属性值会结合el表达式一起使用</span><br><span class="line">    2. 注意：</span><br><span class="line">        * c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签</span><br><span class="line">2. choose:相当于java代码的switch语句</span><br><span class="line">1. 使用choose标签声明         相当于switch声明</span><br><span class="line">        2. 使用when标签做判断         相当于case</span><br><span class="line">        3. 使用otherwise标签做其他情况的声明    相当于default</span><br><span class="line"></span><br><span class="line">3. foreach:相当于java代码的for语句</span><br><span class="line"></span><br><span class="line">5. 练习：</span><br><span class="line">* 需求：在request域中有一个存有User对象的List集合。需要使用jstl+el将list集合数据展示到jsp页面的表格table中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 三层架构：软件设计架构</span><br><span class="line">1. 界面层(表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互</span><br><span class="line">2. 业务逻辑层：处理业务逻辑的。</span><br><span class="line">3. 数据访问层：操作数据存储文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 案例：用户信息列表展示</span><br><span class="line">1. 需求：用户信息的增删改查操作</span><br><span class="line">2. 设计：</span><br><span class="line">1. 技术选型：Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat</span><br><span class="line">2. 数据库设计：</span><br><span class="line">create database day17; -- 创建数据库</span><br><span class="line">use day17;    -- 使用数据库</span><br><span class="line">create table user(   -- 创建表</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20) not null,</span><br><span class="line">gender varchar(5),</span><br><span class="line">age int,</span><br><span class="line">address varchar(32),</span><br><span class="line">qqvarchar(20),</span><br><span class="line">email varchar(50)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">3. 开发：</span><br><span class="line">1. 环境搭建</span><br><span class="line">1. 创建数据库环境</span><br><span class="line">2. 创建项目，导入需要的jar包</span><br><span class="line"></span><br><span class="line">2. 编码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. 测试</span><br><span class="line">5. 部署运维</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Filter:过滤器</span><br><span class="line"></span><br><span class="line"> * 神户中的过滤器：净水器，空气净化器，土匪</span><br><span class="line"> * 当访问服务器端的资源时，过滤器可以将请求拦截下来，完成一些特殊功能。</span><br><span class="line">   * 一般用于完成通过操作。如：登录验证，统一编码处理，敏感字符过滤</span><br><span class="line"></span><br><span class="line">2. 快速入门：</span><br><span class="line"></span><br><span class="line">   1. 步骤：</span><br><span class="line">      1. 定义一个类，实现接口Filter</span><br><span class="line">      2. 复写方法</span><br><span class="line"></span><br><span class="line">3. 过滤器细节：</span><br><span class="line"></span><br><span class="line">   1. web.xml配置</span><br><span class="line"></span><br><span class="line">   2. 过滤器执行流程</span><br><span class="line"></span><br><span class="line">   3. 过滤器的生命周期方法</span><br><span class="line"></span><br><span class="line">      1. init：在服务器创建时 执行一次</span><br><span class="line">      2. doFiletrt：每一次请求资源拦截执行</span><br><span class="line">      3. destroy：正常关闭</span><br><span class="line"></span><br><span class="line">   4. 过滤器配置详解</span><br><span class="line"></span><br><span class="line">      * 拦截路径配置：</span><br><span class="line">        1. 具体资源路径：/index.jsp只有访问index.jsp资源时，过滤器才会被执行</span><br><span class="line">        2.  拦截目录：/user/*  访问/user下所有资源是， 过滤器执行</span><br><span class="line">        3. 后缀名拦截：*.jsp</span><br><span class="line">        4. 拦截所有 ：/*</span><br><span class="line">      * 拦截方式：资源被访问的方式 </span><br><span class="line">        * 注解配置：</span><br><span class="line">          * 设置dispatcherTypes属性</span><br><span class="line">            1. REQUEST:默认值，request</span><br><span class="line">            2. FRWARD:转发到拦截路径，拦截</span><br><span class="line">            3. INCLUDE:</span><br><span class="line">            4. ERROR：</span><br><span class="line">            5. ASYNC：</span><br><span class="line"></span><br><span class="line">   5. 过滤器链</span><br><span class="line"></span><br><span class="line">      1. 根据名字一个一个比较如 dom2&lt;dom1</span><br><span class="line">      2. dom1 先执行</span><br><span class="line"></span><br><span class="line">   7. ```</span><br><span class="line">      &lt;filter&gt;</span><br><span class="line">          &lt;filter-name&gt;demo2&lt;/filter-name&gt;</span><br><span class="line">          &lt;filter-class&gt;com.example.filter.demo2&lt;/filter-class&gt;</span><br><span class="line">      &lt;/filter&gt;</span><br><span class="line">      &lt;filter-mapping&gt;</span><br><span class="line">          &lt;filter-name&gt;demo2&lt;/filter-name&gt;</span><br><span class="line">          过滤路径</span><br><span class="line">          &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">      &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="增强对象的模式："><a href="#增强对象的模式：" class="headerlink" title="增强对象的模式："></a>增强对象的模式：</h2><ol><li>代理某模式： <ul><li>概念：</li></ul><ol><li>真是对象：被代理的对象</li><li>代理对象：</li><li>代理模式：代理对象代理真是对象</li></ol><ul><li>实现方式：</li></ul><ol><li>静态代理：有一个类文件描述代理模式</li><li>动态代理：内存中形成代理类<ul><li>实现步骤：<ol><li>代理对象和真实对象实现相同接口</li><li>代理对象= Proxy.newProxyInstance();</li><li>使用代理对象调用方法。</li><li>增强方法</li></ol></li><li>增强方式：<ol><li>增强参数列表</li><li>增强返回值类型</li><li>增强方法体执行逻辑</li></ol></li></ul></li></ol></li></ol><h2 id="listener：监听器"><a href="#listener：监听器" class="headerlink" title="listener：监听器"></a>listener：监听器</h2><ul><li>概念web的三大组件之一。<ul><li>时间监听机制<ul><li>事件：一件事情</li><li>事件源：事件发生的地方</li><li>监听器：一个对象</li><li>注册监听：将事件，事件源，监听器绑定在一起。当事件源上发生某个事件后，执行监听器代码</li></ul></li><li>ServletContextListener：监听ServletContext对象的创建和销毁<ul><li>方法：<ul><li>void contextDstroyed(ServletContextEvent sce) :ServletContext对象被销毁之前会调用该方法</li><li>init创建</li></ul></li></ul></li><li>步骤：<ol><li>定义一个类，实现SevletContextListener接口</li><li>配置</li><li>注解@WebLisetener</li></ol></li></ul></li></ul><h1 id="JQuery-基础："><a href="#JQuery-基础：" class="headerlink" title="JQuery 基础："></a>JQuery 基础：</h1><ul><li>概念:一个javaScript框架。简化js开发<ul><li>JQuery对js封装</li><li>JavaScript框架：本质上就是一些js文件，封装了js的原生代码</li></ul></li></ul><ol><li><p>导入JQuery的js文件：导入min.js 文件</p></li><li><p>使用 </p><ol><li>var div1=$(“#div1”);</li><li>alert(div1.html());</li></ol></li><li><p>JQuery对象和JS对象的区别与转换</p><ol><li>JQuery对象咋操作方便</li><li>JQuery和js不通用</li><li>两者的相互转换<ol><li>jq—&gt;js:jq对象[索引] 或者 jq对象.get(索引)</li><li>js—&gt;jq:$(js对象)</li></ol></li></ol></li><li><p>选择器：筛选具有相似特征的标签</p></li><li><p>选择器：筛选具有相似特征的元素(标签)</p><ol><li><ol><li><p>基本操作学习：</p><ol><li>事件绑定<br>//1.获取b1按钮<br> $(“#b1”).click(function(){<pre><code> alert(&quot;abc&quot;);</code></pre>  });</li><li><p>入口函数<br>$(function () {</p><p> });<br>window.onload  和 $(function) 区别</p><ul><li>window.onload 只能定义一次,如果定义多次，后边的会将前边的覆盖掉<br> $(function)可以定义多次的。</li></ul></li><li><p>样式控制：css方法</p><p>// $(“#div1”).css(“background-color”,”red”);</p><pre><code>    $(&quot;#div1&quot;).css(&quot;backgroundColor&quot;,&quot;pink&quot;);</code></pre></li></ol></li></ol></li></ol></li></ol><pre><code>2. 分类    1. 基本选择器        1. 标签选择器（元素选择器）            * 语法： $(&quot;html标签名&quot;) 获得所有匹配标签名称的元素        2. id选择器             * 语法： $(&quot;#id的属性值&quot;) 获得与指定id属性值匹配的元素        3. 类选择器            * 语法： $(&quot;.class的属性值&quot;) 获得与指定的class属性值匹配的元素        4. 并集选择器：            * 语法： $(&quot;选择器1,选择器2....&quot;) 获取多个选择器选中的所有元素    2. 层级选择器        1. 后代选择器            * 语法： $(&quot;A B &quot;) 选择A元素内部的所有B元素                2. 子选择器            * 语法： $(&quot;A &gt; B&quot;) 选择A元素内部的所有B子元素    3. 属性选择器        1. 属性名称选择器             * 语法： $(&quot;A[属性名]&quot;) 包含指定属性的选择器        2. 属性选择器            * 语法： $(&quot;A[属性名=&#39;值&#39;]&quot;) 包含指定属性等于指定值的选择器        3. 复合属性选择器            * 语法： $(&quot;A[属性名=&#39;值&#39;][]...&quot;) 包含多个属性条件的选择器    4. 过滤选择器        1. 首元素选择器             * 语法： :first 获得选择的元素中的第一个元素        2. 尾元素选择器             * 语法： :last 获得选择的元素中的最后一个元素        3. 非元素选择器            * 语法： :not(selector) 不包括指定内容的元素        4. 偶数选择器            * 语法： :even 偶数，从 0 开始计数        5. 奇数选择器            * 语法： :odd 奇数，从 0 开始计数        6. 等于索引选择器            * 语法： :eq(index) 指定索引元素        7. 大于索引选择器             * 语法： :gt(index) 大于指定索引元素        8. 小于索引选择器             * 语法： :lt(index) 小于指定索引元素        9. 标题选择器            * 语法： :header 获得标题    5. 表单过滤选择器          1. 可用元素选择器                   * 语法： :enabled 获得可用元素              2. 不可用元素选择器                   * 语法： :disabled 获得不可用元素              3. 选中选择器                   * 语法： :checked 获得单选/复选框选中的元素              4. 选中选择器                   * 语法： :selected 获得下拉框选中的元素    5. DOM操作        1. 内容操作            1. html(): 获取/设置元素的标签体内容   &lt;a&gt;&lt;font&gt;内容&lt;/font&gt;&lt;/a&gt;  --&gt; &lt;font&gt;内容&lt;/font&gt;            2. text(): 获取/设置元素的标签体纯文本内容   &lt;a&gt;&lt;font&gt;内容&lt;/font&gt;&lt;/a&gt; --&gt; 内容            3. val()： 获取/设置元素的value属性值        2. 属性操作            1. 通用属性操作                1. attr(): 获取/设置元素的属性                2. removeAttr():删除属性                3. prop():获取/设置元素的属性                4. removeProp():删除属性                * attr和prop区别？                    1. 如果操作的是元素的固有属性，则建议使用prop                    2. 如果操作的是元素自定义的属性，则建议使用attr            2. 对class属性操作                1. addClass():添加class属性值                2. removeClass():删除class属性值                3. toggleClass():切换class属性                    * toggleClass(&quot;one&quot;):                         * 判断如果元素对象上存在class=&quot;one&quot;，则将属性值one删除掉。  如果元素对象上不存在class=&quot;one&quot;，则添加                4. css():        3. CRUD操作:            1. append():父元素将子元素追加到末尾                * 对象1.append(对象2): 将对象2添加到对象1元素内部，并且在末尾            2. prepend():父元素将子元素追加到开头                * 对象1.prepend(对象2):将对象2添加到对象1元素内部，并且在开头            3. appendTo():                * 对象1.appendTo(对象2):将对象1添加到对象2内部，并且在末尾            4. prependTo()：                * 对象1.prependTo(对象2):将对象1添加到对象2内部，并且在开头</code></pre><ol><li><p>after():添加元素到元素后边</p><pre><code>     * 对象1.after(对象2)： 将对象2添加到对象1后边。对象1和对象2是兄弟关系 6. before():添加元素到元素前边     * 对象1.before(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系 7. insertAfter()     * 对象1.insertAfter(对象2)：将对象2添加到对象1后边。对象1和对象2是兄弟关系 8. insertBefore()     * 对象1.insertBefore(对象2)： 将对象2添加到对象1前边。对象1和对象2是兄弟关系 9. remove():移除元素     * 对象.remove():将对象删除掉 10. empty():清空元素的所有后代元素。     * 对象.empty():将对象的后代元素全部清空，但是保留当前对象以及其属性节点</code></pre></li></ol><h2 id="JQuery高级"><a href="#JQuery高级" class="headerlink" title="JQuery高级"></a>JQuery高级</h2><ol><li><p>动画</p><ol><li><p>三种方式显示和隐藏元素</p><ol><li><p>默认显示和隐藏方式</p><ol><li><p>show([speed,[easing],[fn]])</p><ol><li>参数：<ol><li>speed：动画的速度。三个预定义的值(“slow”,”normal”, “fast”)或表示动画时长的毫秒数值(如：1000)</li><li>easing：用来指定切换效果，默认是”swing”，可用参数”linear”<ul><li>swing：动画执行时效果是 先慢，中间快，最后又慢</li><li>linear：动画执行时速度是匀速的</li></ul></li><li>fn：在动画完成时执行的函数，每个元素执行一次。</li></ol></li></ol></li><li><p>hide([speed,[easing],[fn]])</p></li><li>toggle([speed],[easing],[fn])</li></ol></li><li><p>滑动显示和隐藏方式</p><ol><li>slideDown([speed],[easing],[fn])</li><li>slideUp([speed,[easing],[fn]])</li><li>slideToggle([speed],[easing],[fn])</li></ol></li><li><p>淡入淡出显示和隐藏方式</p><ol><li>fadeIn([speed],[easing],[fn])</li><li>fadeOut([speed],[easing],[fn])</li><li>fadeToggle([speed,[easing],[fn]])</li></ol></li></ol></li></ol></li><li><p>遍历</p><ol><li>js的遍历方式<ul><li>for(初始化值;循环结束条件;步长)</li></ul></li><li><p>jq的遍历方式</p><ol><li><p>jq对象.each(callback)</p><ol><li><p>语法：<br> jquery对象.each(function(index,element){});</p><pre><code> * index:就是元素在集合中的索引 * element：就是集合中的每一个元素对象 * this：集合中的每一个元素对象</code></pre></li><li>回调函数返回值：<ul><li>true:如果当前function返回为false，则结束循环(break)。</li><li>false:如果当前function返回为true，则结束本次循环，继续下次循环(continue)</li></ul></li></ol></li><li>$.each(object, [callback])</li><li>for..of: jquery 3.0 版本之后提供的方式<br> for(元素对象 of 容器对象)</li></ol></li></ol></li><li><p>事件绑定</p><ol><li>jquery标准的绑定方式<ul><li>jq对象.事件方法(回调函数)；</li><li>注：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。<ul><li>表单对象.submit();//让表单提交</li></ul></li></ul></li><li>on绑定事件/off解除绑定<ul><li>jq对象.on(“事件名称”,回调函数)</li><li>jq对象.off(“事件名称”)<ul><li>如果off方法不传递任何参数，则将组件上的所有事件全部解绑</li></ul></li></ul></li><li><p>事件切换：toggle</p><ul><li><p>jq对象.toggle(fn1,fn2…)</p><ul><li>当单击jq对象对应的组件后，会执行fn1.第二次点击会执行fn2…..</li></ul></li><li><p>注意：1.9版本 .toggle() 方法删除,jQuery Migrate（迁移）插件可以恢复此功能。</p>   <script src="../js/jquery-migrate-1.0.0.js" type="text/javascript" charset="utf-8"></script></li></ul></li></ol></li><li><p>案例</p><ol><li><p>广告显示和隐藏<br> &lt;!DOCTYPE html&gt;<br> <html><br> <head></head></html></p><pre><code> &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;广告的自动显示与隐藏&lt;/title&gt; &lt;style&gt;     #content&#123;width:100%;height:500px;background:#999&#125; &lt;/style&gt;</code></pre> <!--引入jquery--><p> <script type="text/javascript" src="../js/jquery-3.3.1.min.js"></script><br> <script></p><pre><code> /*     需求：         1. 当页面加载完，3秒后。自动显示广告         2. 广告显示5秒后，自动消失。</code></pre><p> ​        分析：<br> ​            1. 使用定时器来完成。setTimeout (执行一次定时器)<br> ​                        2. 分析发现JQuery的显示和隐藏动画效果其实就是控制display<br> ​                        3. 使用  show/hide方法来完成广告的显示<br> ​               */</p><p> ​    //入口函数，在页面加载完成之后，定义定时器，调用这两个方法<br> ​    $(function () {<br> ​       //定义定时器，调用adShow方法 3秒后执行一次<br> ​       setTimeout(adShow,3000);<br> ​       //定义定时器，调用adHide方法，8秒后执行一次<br> ​        setTimeout(adHide,8000);<br> ​    });<br> ​    //显示广告<br> ​    function adShow() {<br> ​        //获取广告div，调用显示方法<br> ​        $(“#ad”).show(“slow”);<br> ​    }<br> ​    //隐藏广告<br> ​    function adHide() {<br> ​        //获取广告div，调用隐藏方法<br> ​        $(“#ad”).hide(“slow”);<br> ​    }</p></li></ol></li></ol><h1 id="AJAX："><a href="#AJAX：" class="headerlink" title="AJAX："></a>AJAX：</h1><p>1.概念：ASynchronous JavaScript  And XML </p><ol><li><p>异步：在不重新加载整个页面的时候更新部分网页：如：百度搜索框可以，输入想搜索的联想会发送提示。</p><ul><li>提升用户体验</li></ul></li><li><p>实现方法：</p><ol><li><p>原生的JS实现方法</p></li><li><p>JQeury实现方式（了解）  </p></li><li><p>//1.创建核心对象</p><pre><code>              var xmlhttp;              if (window.XMLHttpRequest)              &#123;// code for IE7+, Firefox, Chrome, Opera, Safari                  xmlhttp=new XMLHttpRequest();              &#125;              else              &#123;// code for IE6, IE5                  xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);              &#125;</code></pre></li></ol></li></ol><pre><code>  ​            //2. 建立连接  ​            /*  ​                参数：                      1. 请求方式：GET、POST                          * get方式，请求参数在URL后边拼接。send方法为空参                          * post方式，请求参数在send方法中定义                                          2. 请求的URL：                                              3. 同步或异步请求：true（异步）或 false（同步）  ​             */  ​            xmlhttp.open(&quot;GET&quot;,&quot;ajaxServlet?username=tom&quot;,true);  ​            //3.发送请求  ​            xmlhttp.send();  ​            //4.接受并处理来自服务器的响应结果  ​            //获取方式 ：xmlhttp.responseText  ​            //什么时候获取？当服务器响应成功后再获取  ​            //当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。  ​            xmlhttp.onreadystatechange=function()  ​            &#123;  ​                //判断readyState就绪状态是否为4，判断status响应状态码是否为200  ​                if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)  ​                &#123;  ​                   //获取服务器的响应结果  ​                    var responseText = xmlhttp.responseText;  ​                    alert(responseText);  ​                &#125;  ​            &#125;  2. JQeury实现方式         1. $.ajax()          * 语法：$.ajax(&#123;键值对&#125;);           //使用$.ajax()发送异步请求                 $.ajax(&#123;                     url:&quot;ajaxServlet1111&quot; , // 请求路径                     type:&quot;POST&quot; , //请求方式                     //data: &quot;username=jack&amp;age=23&quot;,//请求参数                     data:&#123;&quot;username&quot;:&quot;jack&quot;,&quot;age&quot;:23&#125;,                     success:function (data) &#123;                         alert(data);                     &#125;,//响应成功后的回调函数                     error:function () &#123;                         alert(&quot;出错啦...&quot;)                     &#125;,//表示如果请求响应出现错误，会执行的回调函数              ​       dataType:&quot;text&quot;//设置接受到的响应数据的格式                 &#125;);      2. $.get()：发送get请求          * 语法：$.get(url, [data], [callback], [type])              * 参数：                  * url：请求路径                  * data：请求参数                  * callback：回调函数                  * type：响应结果的类型      3. $.post()：发送post请求          * 语法：$.post(url, [data], [callback], [type])              * 参数：                  * url：请求路径                  * data：请求参数                  * callback：回调函数                  * type：响应结果的类型</code></pre><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ol><li><p>概念： JavaScript Object Notation        JavaScript对象表示法<br> Person p = new Person();<br> p.setName(“张三”);<br> p.setAge(23);<br> p.setGender(“男”);</p><p> var p = {“name”:”张三”,”age”:23,”gender”:”男”};</p><ul><li>json现在多用于存储和交换文本信息的语法</li><li>进行数据的传输</li><li>JSON 比 XML 更小、更快，更易解析。</li></ul></li><li><p>语法：</p><ol><li>基本规则<ul><li>数据在名称/值对中：json数据是由键值对构成的<ul><li>键用引号(单双都行)引起来，也可以不使用引号</li><li>值得取值类型：<ol><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中）    {“persons”:[{},{}]}</li><li>对象（在花括号中） {“address”:{“province”：”陕西”….}}</li><li>null</li></ol></li></ul></li><li>数据由逗号分隔：多个键值对由逗号分隔</li><li>花括号保存对象：使用{}定义json 格式</li><li>方括号保存数组：[]</li></ul></li><li><p>获取数据:</p><ol><li>json对象.键名</li><li>json对象[“键名”]</li><li>数组对象[索引]</li><li><p>遍历</p><pre><code>  //1.定义基本格式 var person = &#123;&quot;name&quot;: &quot;张三&quot;, age: 23, &#39;gender&#39;: true&#125;;</code></pre> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ps = [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>, <span class="string">&quot;gender&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">24</span>, <span class="string">&quot;gender&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;gender&quot;</span>: <span class="literal">false</span>&#125;];</span><br></pre></td></tr></table></figure></li></ol></li></ol><p>//获取person对象中所有的键和值</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="keyword">in</span> 循环</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> person)&#123;</span><br><span class="line">      <span class="comment">//这样的方式获取不行。因为相当于  person.&quot;name&quot;</span></span><br><span class="line">      <span class="comment">//alert(key + &quot;:&quot; + person.key);</span></span><br><span class="line">      <span class="title function_">alert</span>(key+<span class="string">&quot;:&quot;</span>+person[key]);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>​        </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取ps中的所有值</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ps.<span class="property">length</span>; i++) &#123;</span><br><span class="line">     <span class="keyword">var</span> p = ps[i];</span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> p)&#123;</span><br><span class="line">         <span class="title function_">alert</span>(key+<span class="string">&quot;:&quot;</span>+p[key]);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;g</span><br></pre></td></tr></table></figure><ol><li><p>JSON数据和Java对象的相互转换</p><ul><li>JSON解析器：<ul><li>常见的解析器：Jsonlib，Gson，fastjson，jackson</li></ul></li></ul><ol><li><p>JSON转为Java对象</p><ol><li>导入jackson的相关jar包</li><li>创建Jackson核心对象 ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换<ol><li>readValue(json字符串数据,Class)</li></ol></li></ol></li><li><p>Java对象转换JSON</p><ol><li><p>使用步骤：</p><ol><li><p>导入jackson的相关jar包</p></li><li><p>创建Jackson核心对象 ObjectMapper</p></li><li><p>调用ObjectMapper的相关方法进行转换</p><ol><li>转换方法：<ul><li>writeValue(参数1，obj):<pre><code>参数1：    File：将obj对象转换为JSON字符串，并保存到指定的文件中    Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中      OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</code></pre><ul><li>writeValueAsString(obj):将对象转为json字符串</li></ul></li></ul></li></ol></li></ol></li></ol></li></ol></li></ol><pre><code>            import com.fasterxml.jackson.databind.ObjectMapper;            import org.junit.Test;            import java.io.FileWriter;            import java.util.*;            public class JacksonTest &#123;            <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java对象转为JSON字符串</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1.创建Person对象</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">p</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    p.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    p.setAge(<span class="number">23</span>);</span><br><span class="line">    p.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建Jackson的核心对象  ObjectMapper</span></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="comment">//3.转换</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        转换方法：</span></span><br><span class="line"><span class="comment">            writeValue(参数1，obj):</span></span><br><span class="line"><span class="comment">                参数1：</span></span><br><span class="line"><span class="comment">                    File：将obj对象转换为JSON字符串，并保存到指定的文件中</span></span><br><span class="line"><span class="comment">                    Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中</span></span><br><span class="line"><span class="comment">                    OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</span></span><br><span class="line"><span class="comment">            writeValueAsString(obj):将对象转为json字符串</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(p);</span><br><span class="line">    <span class="comment">//&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;&#125;</span></span><br><span class="line">    <span class="comment">//System.out.println(json);//&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;&#125;</span></span><br></pre></td></tr></table></figure>                    //writeValue，将数据写到d://a.txt文件中                    //mapper.writeValue(new File(&quot;d://a.txt&quot;),p);                    //writeValue.将数据关联到Writer中                    mapper.writeValue(new FileWriter(&quot;d://b.txt&quot;),p);                &#125;                @Test                public void test2() throws Exception &#123;                    //1.创建Person对象                    Person p = new Person();                    p.setName(&quot;张三&quot;);                    p.setAge(23);                    p.setGender(&quot;男&quot;);                    p.setBirthday(new Date());                    //2.转换                    ObjectMapper mapper = new ObjectMapper();                    String json = mapper.writeValueAsString(p);                    System.out.println(json);//&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;,&quot;birthday&quot;:1530958029263&#125;                                            //&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;,&quot;birthday&quot;:&quot;2018-07-07&quot;&#125;                &#125;                @Test                public void test3() throws Exception &#123;                    //1.创建Person对象                    Person p = new Person();                    p.setName(&quot;张三&quot;);                    p.setAge(23);                    p.setGender(&quot;男&quot;);                    p.setBirthday(new Date());                    Person p1 = new Person();                    p1.setName(&quot;张三&quot;);                    p1.setAge(23);                    p1.setGender(&quot;男&quot;);                    p1.setBirthday(new Date());                    Person p2 = new Person();                    p2.setName(&quot;张三&quot;);                    p2.setAge(23);                    p2.setGender(&quot;男&quot;);                    p2.setBirthday(new Date());                    //创建List集合                    List&lt;Person&gt; ps = new ArrayList&lt;Person&gt;();                    ps.add(p);                    ps.add(p1);                    ps.add(p2);                    //2.转换                    ObjectMapper mapper = new ObjectMapper();                    String json = mapper.writeValueAsString(ps);                    // [&#123;&#125;,&#123;&#125;,&#123;&#125;]                    //[&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;,&quot;birthday&quot;:&quot;2018-07-07&quot;&#125;,&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;,&quot;birthday&quot;:&quot;2018-07-07&quot;&#125;,&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;,&quot;birthday&quot;:&quot;2018-07-07&quot;&#125;]                    System.out.println(json);                &#125;                @Test                public void test4() throws Exception &#123;                    //1.创建map对象                    Map&lt;String,Object&gt; map = new HashMap&lt;String,Object&gt;();                    map.put(&quot;name&quot;,&quot;张三&quot;);                    map.put(&quot;age&quot;,23);                    map.put(&quot;gender&quot;,&quot;男&quot;);            <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//2.转换</span></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(map);</span><br><span class="line">    <span class="comment">//&#123;&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23,&quot;gender&quot;:&quot;男&quot;&#125;</span></span><br><span class="line">    System.out.println(json);<span class="comment">//&#123;&quot;gender&quot;:&quot;男&quot;,&quot;name&quot;:&quot;张三&quot;,&quot;age&quot;:23&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示 JSON字符串转为Java对象</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   <span class="comment">//1.初始化JSON字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;gender\&quot;:\&quot;男\&quot;,\&quot;name\&quot;:\&quot;张三\&quot;,\&quot;age\&quot;:23&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建ObjectMapper对象</span></span><br><span class="line">    <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">    <span class="comment">//3.转换为Java对象 Person对象</span></span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> mapper.readValue(json, Person.class);</span><br><span class="line"></span><br><span class="line">    System.out.println(person);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>            1. 注解：              1. @JsonIgnore：排除属性。              2. @JsonFormat：属性值得格式化                  * @JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)            2. 复杂java对象转换              1. List：数组              2. Map：对象格式一致</code></pre><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><ul><li>校验用户是否存在<ol><li>服务器响应的数据，在客户端使用的时，要想当作json数据格式使用<ol><li>$.get(type):将最后</li><li>也可以response.setContentType(“application/json;charse=utf-8”);</li></ol></li></ol></li></ul><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>1.1.什么是NOSQL<br>        NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。<br>        随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。</p><p>​    1.1.1.    NOSQL和关系型数据库比较<br>​        优点：<br>​            1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。<br>​            2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。<br>​            3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。<br>​            4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。</p><p>​        缺点：<br>​            1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。<br>​            2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。<br>​            3）不提供关系型数据库对事务的处理。</p><p>​    1.1.2.    非关系型数据库的优势：<br>​        1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。<br>​        2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。</p><p>​    1.1.3.    关系型数据库的优势：<br>​        1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。<br>​        2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。</p><p>​    1.1.4.    总结<br>​        关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，<br>​        让NoSQL数据库对关系型数据库的不足进行弥补。<br>​        一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据</p><p>1.2.主流的NOSQL产品<br>    •    键值(Key-Value)存储数据库<br>            相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB<br>            典型应用： 内容缓存，主要用于处理大量数据的高访问负载。<br>            数据模型： 一系列键值对<br>            优势： 快速查询<br>            劣势： 存储的数据缺少结构化<br>    •    列存储数据库<br>            相关产品：Cassandra, HBase, Riak<br>            典型应用：分布式的文件系统<br>            数据模型：以列簇式存储，将同一列数据存在一起<br>            优势：查找速度快，可扩展性强，更容易进行分布式扩展<br>            劣势：功能相对局限<br>    •    文档型数据库<br>            相关产品：CouchDB、MongoDB<br>            典型应用：Web应用（与Key-Value类似，Value是结构化的）<br>            数据模型： 一系列键值对<br>            优势：数据结构要求不严格<br>            劣势： 查询性能不高，而且缺乏统一的查询语法<br>    •    图形(Graph)数据库<br>            相关数据库：Neo4J、InfoGrid、Infinite Graph<br>            典型应用：社交网络<br>            数据模型：图结构<br>            优势：利用图结构相关算法。<br>            劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。<br>1.3 什么是Redis<br>    Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：<br>        1) 字符串类型 string<br>        2) 哈希类型 hash<br>        3) 列表类型 list<br>        4) 集合类型 set<br>        5) 有序集合类型 sortedset<br>        1.3.1 redis的应用场景</p><ol><li><p>字符串类型：</p><ol><li>建立：set key value</li><li>获取：get key</li><li>删除：del key</li></ol></li><li><p>哈希类型：</p><ol><li>建立：hset key field value</li><li>获取：<ol><li>hget key field  获取指定的field的值</li><li>hgetall key: 获取所有的field和value</li></ol></li><li>删除：hdel key field</li></ol></li><li><p>列表类型 list ：可以添加列表元素在头部或者时尾部</p><ul><li>添加</li></ul><ol><li>在头左边添加：lpush mylist a(lpush key value) </li><li>在右边添加： rpush mylist a(rpush key value）</li></ol><ul><li>获取：<ul><li>lrange key start end :范围获取</li></ul></li><li>删除：<ul><li>lpop key：删除类编最左边的元素，并将元素放回</li><li>rpop key： 删除最右边的元素，并将元素返回</li></ul></li></ul></li><li><p>集合类型 set ： 不预序重复元素</p><ol><li>存储：sadd key value </li><li>获取：smembers key ： 获取set集合中所有的元素</li><li>删除：</li></ol></li><li><p>有序集合类型sortedset ：不允许重复元素，且元素有顺序</p><ol><li>存储：zadd key score value</li><li>获取：zrange mysort 0 -1 withscores(显示分数)</li><li>删除 : zrem key value</li></ol></li><li><p>通用命令</p><ol><li>keys *：查询所有的建</li><li>type key ： 获取键对应的value的类型</li><li>del ke y：删除指定的key value</li></ol></li></ol><ul><li><p>持久化</p><ol><li><p>redis是一个内存数据库，当redis服务器重启，获取电脑重启，数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘的文件中。</p></li><li><p>redis持久化机制：</p><ol><li><p>RDB：默认方式，不需要进行配置，默认就使用这种机制</p><ul><li>在一定的间隔时间中，检测key的变化情况，然后持久化数据</li></ul><ol><li><p>编辑redis.windwos.conf文件</p><p> after 900 sec (15 min) if at least 1 key changed</p><p> save 900 1</p><p> after 300 sec (5 min) if at least 10 keys changed</p><p> save 300 10</p><p> after 60 sec if at least 10000 keys changed</p><p> save 60 10000</p></li><li><p>重新启动redis服务器，并指定配置文件名称<br> D:\JavaWeb2018\day23_redis\资料\redis\windows-64\redis-2.8.9&gt;redis-server.exe redis.windows.conf    </p></li></ol></li><li><p>AOF：日志记录的方式，可以记录每一条命令的操作。可以每一次命令操作后，持久化数据</p><ol><li><p>编辑redis.windwos.conf文件<br> appendonly no（关闭aof） —&gt; appendonly yes （开启aof）</p><p> appendfsync always ： 每一次操作都进行持久化</p><p> appendfsync everysec ： 每隔一秒进行一次持久化</p><p> appendfsync no     ： 不进行持久化</p></li></ol></li></ol></li></ol></li></ul><ol><li><p>Java客户端 Jedis</p><ul><li>Jedis: 一款java操作redis数据库的工具.</li><li>使用步骤：<ol><li>下载jedis的jar包</li><li>使用<br> //1. 获取连接</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"><span class="comment">//2. 操作</span></span><br><span class="line">jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"><span class="comment">//3. 关闭连接</span></span><br><span class="line">jedis.close();</span><br></pre></td></tr></table></figure><ul><li><p>Jedis操作各种redis中的数据结构</p><pre><code>  1) 字符串类型 string      set      get</code></pre>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//1. 获取连接</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    <span class="comment">//存储</span></span><br><span class="line">    jedis.set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以使用setex()方法存储可以指定过期时间的 key value</span></span><br><span class="line">    jedis.setex(<span class="string">&quot;activecode&quot;</span>,<span class="number">20</span>,<span class="string">&quot;hehe&quot;</span>);<span class="comment">//将activecode：hehe键值对存入redis，并且20秒后自动删除该键值对</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 关闭连接</span></span><br><span class="line">    jedis.close();</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>) 哈希类型 hash ： map格式  </span><br><span class="line">hset</span><br><span class="line">hget</span><br><span class="line">hgetAll</span><br><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">    <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line">    <span class="comment">//2. 操作</span></span><br><span class="line">    <span class="comment">// 存储hash</span></span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;23&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;gender&quot;</span>,<span class="string">&quot;female&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取hash</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.hget(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="comment">// 获取hash的所有map中的数据</span></span><br><span class="line">        Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// keyset</span></span><br><span class="line">        Set&lt;String&gt; keySet = user.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            <span class="comment">//获取value</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> user.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">&quot;:&quot;</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line"><span class="number">3</span>) 列表类型 list ： linkedlist格式。支持重复元素</span><br><span class="line">lpush / rpush</span><br><span class="line">lpop / rpop</span><br><span class="line">lrange start end : 范围获取</span><br><span class="line"></span><br><span class="line"> <span class="comment">//1. 获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">// list 存储</span></span><br><span class="line">        jedis.lpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//从左边存</span></span><br><span class="line">        jedis.rpush(<span class="string">&quot;mylist&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);<span class="comment">//从右边存</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// list 范围获取</span></span><br><span class="line">        List&lt;String&gt; mylist = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(mylist);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// list 弹出</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">element1</span> <span class="operator">=</span> jedis.lpop(<span class="string">&quot;mylist&quot;</span>);<span class="comment">//c</span></span><br><span class="line">        System.out.println(element1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">element2</span> <span class="operator">=</span> jedis.rpop(<span class="string">&quot;mylist&quot;</span>);<span class="comment">//c</span></span><br><span class="line">        System.out.println(element2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// list 范围获取</span></span><br><span class="line">        List&lt;String&gt; mylist2 = jedis.lrange(<span class="string">&quot;mylist&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        System.out.println(mylist2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">        <span class="number">4</span>) 集合类型 set  ： 不允许重复元素<span class="number">2</span>            sadd3            smembers:获取所有元素<span class="number">4</span>​<span class="number">5</span>            <span class="comment">//1. 获取连接6            Jedis jedis = new Jedis();//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口7            //2. 操作</span></span><br><span class="line">              <span class="comment">// set 存储</span></span><br><span class="line">        jedis.sadd(<span class="string">&quot;myset&quot;</span>,<span class="string">&quot;java&quot;</span>,<span class="string">&quot;php&quot;</span>,<span class="string">&quot;c++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set 获取</span></span><br><span class="line">        Set&lt;String&gt; myset = jedis.smembers(<span class="string">&quot;myset&quot;</span>);</span><br><span class="line">        System.out.println(myset);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line"><span class="number">5</span>) 有序集合类型 sortedset：不允许重复元素，且元素有顺序</span><br><span class="line">zadd</span><br><span class="line">zrange</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jedis</span>();<span class="comment">//如果使用空参构造，默认值 &quot;localhost&quot;,6379端口</span></span><br><span class="line">        <span class="comment">//2. 操作</span></span><br><span class="line">        <span class="comment">// sortedset 存储</span></span><br><span class="line">        jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">3</span>,<span class="string">&quot;亚瑟&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">30</span>,<span class="string">&quot;后裔&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;mysortedset&quot;</span>,<span class="number">55</span>,<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sortedset 获取</span></span><br><span class="line">        Set&lt;String&gt; mysortedset = jedis.zrange(<span class="string">&quot;mysortedset&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(mysortedset);</span><br><span class="line">   <span class="comment">//3. 关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">* jedis连接池： JedisPool</span><br><span class="line">* 使用：</span><br><span class="line"><span class="number">1.</span> 创建JedisPool连接池对象</span><br><span class="line"><span class="number">2.</span> 调用方法 getResource()方法获取Jedis连接</span><br><span class="line"><span class="comment">//0.创建一个配置对象</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">        config.setMaxIdle(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">        <span class="type">JedisPool</span> <span class="variable">jedisPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPool</span>(config,<span class="string">&quot;localhost&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取连接</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> jedisPool.getResource();</span><br><span class="line">        <span class="comment">//3. 使用</span></span><br><span class="line">        jedis.set(<span class="string">&quot;hehe&quot;</span>,<span class="string">&quot;heihei&quot;</span>);</span><br><span class="line">        <span class="comment">//4. 关闭 归还到连接池中</span></span><br><span class="line">        jedis.close();</span><br><span class="line"></span><br><span class="line">* 连接池工具类</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisPoolUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> JedisPoolUtils.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jedis.properties&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Properties对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">//关联文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pro.load(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取数据，设置到JedisPoolConfig中</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxTotal&quot;</span>)));</span><br><span class="line">        config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">&quot;maxIdle&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化JedisPool</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(config,pro.getProperty(<span class="string">&quot;host&quot;</span>),Integer.parseInt(pro.getProperty(<span class="string">&quot;port&quot;</span>)));&#125;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="黑马旅游"><a href="#黑马旅游" class="headerlink" title="黑马旅游"></a>黑马旅游</h1><h2 id="技术选型："><a href="#技术选型：" class="headerlink" title="技术选型："></a>技术选型：</h2><ol><li>web层<ol><li>Servlet：前端控制器</li><li>html：识图</li><li>Filter：过滤器</li><li>BeanUtils：数据的封装</li><li>Jackso：json序列化工具</li></ol></li><li>Service层<ol><li>Javamail：java发送邮件工具</li><li>Redis：nosqlJedis：java的redis客户端</li></ol></li><li>Dao层<ol><li>Mysql：数据库</li><li>Druid：数据库连接池</li><li>jdbcTemplate的工具</li></ol></li></ol><p>异步只能通过aja获取响应数据所以，我们这里使用的html</p></script></p></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexoi</title>
      <link href="/posts/ef715bdc.html"/>
      <url>/posts/ef715bdc.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><span class="p yellow h3 center">Hexo</span><ol><li><u>hexo</u>新建一篇文章</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &#123;post,link&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexoi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue&amp;html</title>
      <link href="/posts/js.html"/>
      <url>/posts/js.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="day1"><a href="#day1" class="headerlink" title="day1"></a>day1</h2><ol><li>border-radius: 圆角(px越大越圆)</li><li>postition:  absolute —绝对位置</li><li>input type radio: 单选(给他们去相同的名字) checkbox :多选<ol><li>checked : 进入页面默认选择</li><li>maxlength： 用户最多输入多少</li><li>type:reset 重新输入所有</li><li>type：butten: 普通真牛牛</li><li>type： file 上传文件用的</li><li>text-indent：2em缩进两个字</li></ol></li><li>label: for 对应的input的name的值</li><li>select：<ol><li>selected=”selected” 默认选择</li></ol></li><li>textarea ：反馈留言<ol><li>cols： 每行的字符数</li><li>row： 显示多少行</li></ol></li></ol><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2><ol><li>font-family: 选择字体</li><li>em，i： 倾斜 fontStyle：normal不倾斜</li><li>text-align：center，本质在盒子内居中</li><li>line-height  行高</li><li>text-decoration 文本修饰 下划线啥的</li><li>font-size: 14px/1.5 1.5是字体的1.5倍</li><li>body是12px</li></ol><ul><li>块元素：h,p,div,ul,ol.li</li></ul><p>！文字类的标签不能在放块</p><ul><li>行内元素：&lt;a,&lt;span<ol><li>可以多个</li><li>宽高无法设置</li></ol></li><li>行内块元素： &lt;img,&lt;input,td<ul><li>可以设置块的元素</li><li>本身的行内元素，可以显示多个</li></ul></li><li>！<ul><li>display: block 转块</li><li>display: lnline 转行</li><li>block-lnline  行内块元素</li><li>alt 选择c辅助</li></ul></li><li>权重</li></ul><p>继承&lt;元素&lt;类&lt;id&lt;行内&lt;!important</p><p>无论父元素是多少子是0</p><p>a&lt; 有自己的a{color : blue}</p><p>权重的叠加，不会进位</p><p>margin: 0 auto;左右水品剧中</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><ol><li>background-color：默认是透明的</li></ol><h2 id="盒子"><a href="#盒子" class="headerlink" title="盒子"></a>盒子</h2><ol><li>line-height：行高（有上空隙和下空隙）放在盒子里</li></ol><ul><li>border：边框<ul><li>solid：实现边框（border.width:n px,border.style: soild:)5px soild red</li><li>单元格table,td,th<ul><li>border-collapse : 合并他的边框</li><li>text-align: center; 文字居中</li></ul></li></ul></li><li>panding : 与内容的距离<ul><li>1：上下左右</li><li>2：上下一个，左右一个</li><li>3：上 左右 下</li><li>4 上 右 下 左 顺时针</li><li>固定大小的盒子，加上 内边距会影响 盒子的大小</li></ul></li><li>margin: </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">display: inline-block;</span><br><span class="line">height: 41px;</span><br><span class="line">padding: 0 20px;</span><br><span class="line">font-size 12px</span><br><span class="line">text-decoration: none</span><br><span class="line">line-height</span><br><span class="line">.nav a:hover 经过变</span><br></pre></td></tr></table></figure><p>父子 子有外边距 会塌陷</p><ul><li>解决办法：<ul><li>transparent 透明</li><li>给一个内边距：padding</li><li>orverflow：hidden</li></ul></li><li>清除 边距<ul><li><ul><li>margin:0</li><li>padding:0</li></ul></li></ul></li><li>给行内元素加上浮动就有了行内块特点</li><li>只会影响前面的标准流</li><li>清除浮动<ul><li>块级元素：clear：both</li><li>给父级添加 overflow : hidden </li></ul></li><li>定位：position<ul><li>static：静态定位</li><li>relative：相对定位<ul><li>再到自己原来的位置移动</li></ul></li><li>absolut： 绝对定位<ul><li>没有祖先，祖先没定义</li><li>最近的祖辈 根据他的位置 以他为基准点</li><li>设有绝对定位，不占有原来的位置</li><li>子绝父相</li><li>em 是行内标签，可以使用 图片的叠加 在同一个li中两个img</li></ul></li><li>fixed： 固定定位<ul><li>参照浏览器的位置</li><li>不占有原先的位置</li><li>小技巧<ul><li><ol><li>left50%</li><li>margin-lift版新的一半 </li></ol></li></ul></li></ul></li><li>sticky<ul><li>必须要添加    top或者left right bottom</li></ul></li><li>z-index <ul><li>如果没有写就是aoto谁在前面谁就</li><li>只有定位才有 </li><li>数字前面不能加单位</li></ul></li></ul></li></ul><p>​    加了绝对定位 不能田间margin：0 auto水平居中</p><ul><li>让他水平居中<ul><li>left ： 50%</li><li>left ： -n/2</li></ul></li><li>加了决定对或者固定定位<ul><li>可以直接设置高度和宽度</li><li>块级元素不给高宽 加了定位的话 默认就是内容的大小</li></ul></li><li>浮动和决定<ul><li>浮动不压，决对压住    </li></ul></li></ul><h3 id="emmet语法"><a href="#emmet语法" class="headerlink" title="emmet语法 -"></a>emmet语法 -</h3><ol><li>div*n </li><li>ul&gt;li(包含)</li><li>+就是兄弟</li><li>.是类，#是id</li><li>p.one</li><li>.demo$*5(类 自增)</li><li>w100px</li></ol><h2 id="显示与隐藏"><a href="#显示与隐藏" class="headerlink" title="显示与隐藏"></a>显示与隐藏</h2><ul><li>display: <ul><li>显示：block</li><li>不显示none</li><li>不显示不占有有；</li></ul></li><li>visibility<ul><li>visible ： 可见</li><li>hidden： 隐藏</li></ul></li><li>overflow：<ul><li>默认显示</li><li>hidden： 多出来的文字隐藏</li><li>scroll：溢出的地方显示滚动条</li><li>aoto：在需要得放提案加滚动条</li><li>有超出的的部分最好别用：hidden</li></ul></li><li>link : 初始化的状态</li><li>visited: 被访问过的状态</li><li>active: 正在访问的状态</li><li>hover: 鼠标悬浮的状态</li></ul><h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><ol><li><strong>property</strong>这相当于原生对象<img src="/posts/js/image-20230308091906173.png" alt="image-20230308091906173"></li><li>反向代理    </li></ol><p><img src="/posts/js/image-20230308194459836.png" alt="image-20230308194459836"></p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><img src="/posts/js/image-20230308195834861.png" alt="image-20230308195834861"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue&amp;html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/posts/69c3279c.html"/>
      <url>/posts/69c3279c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="设置用户签名和邮箱"><a href="#设置用户签名和邮箱" class="headerlink" title="设置用户签名和邮箱"></a>设置用户签名和邮箱</h2><p>git config —global user.name</p><p>git config —global user.email</p><h2 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h2><p>git init</p><h2 id="查看本地库的状态"><a href="#查看本地库的状态" class="headerlink" title="查看本地库的状态"></a>查看本地库的状态</h2><p>git status</p><ol><li>红色的知识存在于工作区</li><li>绿色是存在暂存区</li><li>没有东西可以提交。</li></ol><h2 id="添加暂存区"><a href="#添加暂存区" class="headerlink" title="添加暂存区"></a>添加暂存区</h2><p>git add 文件名</p><h2 id="提交本地库"><a href="#提交本地库" class="headerlink" title="提交本地库"></a>提交本地库</h2><p>git commit -m’’日志信息’’（版本）文件名</p><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><p>git relog</p><p>详细 git log能够知道谁提交的</p><h2 id="版本穿梭"><a href="#版本穿梭" class="headerlink" title="版本穿梭"></a>版本穿梭</h2><p>git reset —hard 版本号</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>副本指针的引用</p><h3 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h3><p>查看分支: git branch -v</p><p>创建分支:git branch 分支名</p><p>切换分支:git checkout 分支名</p><p>合并分支：git merge 分支名</p><p>​    注意：</p><ul><li>提交 时候不能加上文件名子</li><li></li></ul><h1 id="GItHub"><a href="#GItHub" class="headerlink" title="GItHub"></a>GItHub</h1><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>git  remote -v （查看当前所有的远程地址的别名）</p><p>git remote add 别名 远程地址（设置别名）</p><h2 id="推送-分支"><a href="#推送-分支" class="headerlink" title="推送(分支)"></a>推送(分支)</h2><p>git push git-demo master</p><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><p>git pull git-demo master</p><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>克隆：git clone 地址</p><h2 id="团队协作"><a href="#团队协作" class="headerlink" title="团队协作"></a>团队协作</h2><p>加入团队后才能相互推送</p><h2 id="shh免密登录"><a href="#shh免密登录" class="headerlink" title="shh免密登录"></a>shh免密登录</h2><p>ssh-keygen -t rsa -C 3027638938@qq.com</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
  
</search>
